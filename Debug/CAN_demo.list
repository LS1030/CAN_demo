
CAN_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003280  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003464  08003464  00013464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034e4  080034e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080034e4  080034e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034e4  080034e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034e4  080034e4  000134e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034e8  080034e8  000134e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000070  0800355c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  0800355c  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfed  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002134  00000000  00000000  0002d086  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d08  00000000  00000000  0002f1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  0002fec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001693a  00000000  00000000  00030a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a8bb  00000000  00000000  000473ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000806aa  00000000  00000000  00051c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d232f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d0  00000000  00000000  000d23ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	0800344c 	.word	0x0800344c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	0800344c 	.word	0x0800344c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <Uart_printf>:
#include "bsp_debug.h"

static uint8_t Uart_TxBuff[200];

void Uart_printf(UART_HandleTypeDef *huart, char *fmt, ...)
{
 8000234:	b40e      	push	{r1, r2, r3}
 8000236:	b580      	push	{r7, lr}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
  uint16_t len;
  va_list ap;
  va_start(ap, fmt);
 800023e:	f107 0320 	add.w	r3, r7, #32
 8000242:	60bb      	str	r3, [r7, #8]
  vsprintf((char*) Uart_TxBuff, fmt, ap);
 8000244:	68ba      	ldr	r2, [r7, #8]
 8000246:	69f9      	ldr	r1, [r7, #28]
 8000248:	480a      	ldr	r0, [pc, #40]	; (8000274 <Uart_printf+0x40>)
 800024a:	f002 fd03 	bl	8002c54 <vsiprintf>
  va_end(ap);
  len = strlen((const char*) Uart_TxBuff); //此次发送数据的长度
 800024e:	4809      	ldr	r0, [pc, #36]	; (8000274 <Uart_printf+0x40>)
 8000250:	f7ff ffe8 	bl	8000224 <strlen>
 8000254:	4603      	mov	r3, r0
 8000256:	81fb      	strh	r3, [r7, #14]
  HAL_UART_Transmit(huart, Uart_TxBuff, len, 100);
 8000258:	89fa      	ldrh	r2, [r7, #14]
 800025a:	2364      	movs	r3, #100	; 0x64
 800025c:	4905      	ldr	r1, [pc, #20]	; (8000274 <Uart_printf+0x40>)
 800025e:	6878      	ldr	r0, [r7, #4]
 8000260:	f002 faf3 	bl	800284a <HAL_UART_Transmit>
 8000264:	bf00      	nop
 8000266:	3714      	adds	r7, #20
 8000268:	46bd      	mov	sp, r7
 800026a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800026e:	b003      	add	sp, #12
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	2000008c 	.word	0x2000008c

08000278 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0

  hcan.Instance = CAN1;
 800027c:	4b17      	ldr	r3, [pc, #92]	; (80002dc <MX_CAN_Init+0x64>)
 800027e:	4a18      	ldr	r2, [pc, #96]	; (80002e0 <MX_CAN_Init+0x68>)
 8000280:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000282:	4b16      	ldr	r3, [pc, #88]	; (80002dc <MX_CAN_Init+0x64>)
 8000284:	2204      	movs	r2, #4
 8000286:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000288:	4b14      	ldr	r3, [pc, #80]	; (80002dc <MX_CAN_Init+0x64>)
 800028a:	2200      	movs	r2, #0
 800028c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800028e:	4b13      	ldr	r3, [pc, #76]	; (80002dc <MX_CAN_Init+0x64>)
 8000290:	2200      	movs	r2, #0
 8000292:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <MX_CAN_Init+0x64>)
 8000296:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800029a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <MX_CAN_Init+0x64>)
 800029e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80002a2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002a4:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <MX_CAN_Init+0x64>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <MX_CAN_Init+0x64>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <MX_CAN_Init+0x64>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <MX_CAN_Init+0x64>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <MX_CAN_Init+0x64>)
 80002be:	2200      	movs	r2, #0
 80002c0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <MX_CAN_Init+0x64>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002c8:	4804      	ldr	r0, [pc, #16]	; (80002dc <MX_CAN_Init+0x64>)
 80002ca:	f000 fc2f 	bl	8000b2c <HAL_CAN_Init>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80002d4:	f000 fa1a 	bl	800070c <Error_Handler>
  }

}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	2000018c 	.word	0x2000018c
 80002e0:	40006400 	.word	0x40006400

080002e4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b08a      	sub	sp, #40	; 0x28
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ec:	f107 0314 	add.w	r3, r7, #20
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a2d      	ldr	r2, [pc, #180]	; (80003b4 <HAL_CAN_MspInit+0xd0>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d153      	bne.n	80003ac <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000304:	4b2c      	ldr	r3, [pc, #176]	; (80003b8 <HAL_CAN_MspInit+0xd4>)
 8000306:	69db      	ldr	r3, [r3, #28]
 8000308:	4a2b      	ldr	r2, [pc, #172]	; (80003b8 <HAL_CAN_MspInit+0xd4>)
 800030a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800030e:	61d3      	str	r3, [r2, #28]
 8000310:	4b29      	ldr	r3, [pc, #164]	; (80003b8 <HAL_CAN_MspInit+0xd4>)
 8000312:	69db      	ldr	r3, [r3, #28]
 8000314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000318:	613b      	str	r3, [r7, #16]
 800031a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800031c:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <HAL_CAN_MspInit+0xd4>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a25      	ldr	r2, [pc, #148]	; (80003b8 <HAL_CAN_MspInit+0xd4>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b23      	ldr	r3, [pc, #140]	; (80003b8 <HAL_CAN_MspInit+0xd4>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0308 	and.w	r3, r3, #8
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800033a:	2300      	movs	r3, #0
 800033c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000342:	f107 0314 	add.w	r3, r7, #20
 8000346:	4619      	mov	r1, r3
 8000348:	481c      	ldr	r0, [pc, #112]	; (80003bc <HAL_CAN_MspInit+0xd8>)
 800034a:	f001 fa2d 	bl	80017a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800034e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000354:	2302      	movs	r3, #2
 8000356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000358:	2303      	movs	r3, #3
 800035a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800035c:	f107 0314 	add.w	r3, r7, #20
 8000360:	4619      	mov	r1, r3
 8000362:	4816      	ldr	r0, [pc, #88]	; (80003bc <HAL_CAN_MspInit+0xd8>)
 8000364:	f001 fa20 	bl	80017a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <HAL_CAN_MspInit+0xdc>)
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	627b      	str	r3, [r7, #36]	; 0x24
 800036e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000370:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000374:	627b      	str	r3, [r7, #36]	; 0x24
 8000376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000378:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800037c:	627b      	str	r3, [r7, #36]	; 0x24
 800037e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000384:	627b      	str	r3, [r7, #36]	; 0x24
 8000386:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <HAL_CAN_MspInit+0xdc>)
 8000388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800038a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 2, 0);
 800038c:	2200      	movs	r2, #0
 800038e:	2102      	movs	r1, #2
 8000390:	2014      	movs	r0, #20
 8000392:	f001 f9de 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000396:	2014      	movs	r0, #20
 8000398:	f001 f9f7 	bl	800178a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 2, 0);
 800039c:	2200      	movs	r2, #0
 800039e:	2102      	movs	r1, #2
 80003a0:	2016      	movs	r0, #22
 80003a2:	f001 f9d6 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80003a6:	2016      	movs	r0, #22
 80003a8:	f001 f9ef 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80003ac:	bf00      	nop
 80003ae:	3728      	adds	r7, #40	; 0x28
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40006400 	.word	0x40006400
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40010c00 	.word	0x40010c00
 80003c0:	40010000 	.word	0x40010000

080003c4 <CAN_Config>:
  * @brief  Configures the CAN.
  * @param  None
  * @retval None
  */
void CAN_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08a      	sub	sp, #40	; 0x28
 80003c8:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef  sFilterConfig;

  /* Configure the CAN Filter */
  sFilterConfig.FilterBank = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80003d2:	2301      	movs	r3, #1
 80003d4:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80003d6:	2300      	movs	r3, #0
 80003d8:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80003da:	2300      	movs	r3, #0
 80003dc:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80003de:	2300      	movs	r3, #0
 80003e0:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80003e2:	2300      	movs	r3, #0
 80003e4:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80003ea:	2301      	movs	r3, #1
 80003ec:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80003ee:	230e      	movs	r3, #14
 80003f0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80003f2:	463b      	mov	r3, r7
 80003f4:	4619      	mov	r1, r3
 80003f6:	481c      	ldr	r0, [pc, #112]	; (8000468 <CAN_Config+0xa4>)
 80003f8:	f000 fc93 	bl	8000d22 <HAL_CAN_ConfigFilter>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <CAN_Config+0x42>
  {
    /* Filter configuration Error */
    Error_Handler();
 8000402:	f000 f983 	bl	800070c <Error_Handler>
  }

  /* Start the CAN peripheral */
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000406:	4818      	ldr	r0, [pc, #96]	; (8000468 <CAN_Config+0xa4>)
 8000408:	f000 fd54 	bl	8000eb4 <HAL_CAN_Start>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <CAN_Config+0x52>
  {
    /* Start Error */
    Error_Handler();
 8000412:	f000 f97b 	bl	800070c <Error_Handler>
  }

  /* Activate CAN RX notification */
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000416:	2102      	movs	r1, #2
 8000418:	4813      	ldr	r0, [pc, #76]	; (8000468 <CAN_Config+0xa4>)
 800041a:	f000 fea0 	bl	800115e <HAL_CAN_ActivateNotification>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <CAN_Config+0x64>
  {
    /* Notification Error */
    Error_Handler();
 8000424:	f000 f972 	bl	800070c <Error_Handler>
  }

  __HAL_CAN_ENABLE_IT(&hcan, CAN_IT_ERROR);
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <CAN_Config+0xa4>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <CAN_Config+0xa4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000436:	615a      	str	r2, [r3, #20]
  /* Configure Transmission process */
  CAN_TxHeader.StdId = 0x320;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <CAN_Config+0xa8>)
 800043a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800043e:	601a      	str	r2, [r3, #0]
  CAN_TxHeader.ExtId = 0x01;
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <CAN_Config+0xa8>)
 8000442:	2201      	movs	r2, #1
 8000444:	605a      	str	r2, [r3, #4]
  CAN_TxHeader.RTR = CAN_RTR_DATA;
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <CAN_Config+0xa8>)
 8000448:	2200      	movs	r2, #0
 800044a:	60da      	str	r2, [r3, #12]
  CAN_TxHeader.IDE = CAN_ID_STD;
 800044c:	4b07      	ldr	r3, [pc, #28]	; (800046c <CAN_Config+0xa8>)
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
  CAN_TxHeader.DLC = 2;
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <CAN_Config+0xa8>)
 8000454:	2202      	movs	r2, #2
 8000456:	611a      	str	r2, [r3, #16]
  CAN_TxHeader.TransmitGlobalTime = DISABLE;
 8000458:	4b04      	ldr	r3, [pc, #16]	; (800046c <CAN_Config+0xa8>)
 800045a:	2200      	movs	r2, #0
 800045c:	751a      	strb	r2, [r3, #20]
}
 800045e:	bf00      	nop
 8000460:	3728      	adds	r7, #40	; 0x28
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	2000018c 	.word	0x2000018c
 800046c:	20000170 	.word	0x20000170

08000470 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  CanHandle: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &CAN_RxHeader, CAN_RxData) != HAL_OK)
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800047a:	4a1c      	ldr	r2, [pc, #112]	; (80004ec <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800047c:	2100      	movs	r1, #0
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f000 fd5c 	bl	8000f3c <HAL_CAN_GetRxMessage>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 800048a:	f000 f93f 	bl	800070c <Error_Handler>
  }

  /* Display LEDx */
  CAN_RxMessage_time = HAL_GetTick();
 800048e:	f000 fb43 	bl	8000b18 <HAL_GetTick>
 8000492:	4602      	mov	r2, r0
 8000494:	4b16      	ldr	r3, [pc, #88]	; (80004f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000496:	601a      	str	r2, [r3, #0]
  LED0_OFF;
 8000498:	2201      	movs	r2, #1
 800049a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049e:	4815      	ldr	r0, [pc, #84]	; (80004f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80004a0:	f001 faec 	bl	8001a7c <HAL_GPIO_WritePin>

  if ((CAN_RxHeader.StdId == 0x320) && (CAN_RxHeader.IDE == CAN_ID_STD) && (CAN_RxHeader.DLC == 3))
 80004a4:	4b11      	ldr	r3, [pc, #68]	; (80004ec <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80004ac:	d117      	bne.n	80004de <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
 80004ae:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d113      	bne.n	80004de <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
 80004b6:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80004b8:	691b      	ldr	r3, [r3, #16]
 80004ba:	2b03      	cmp	r3, #3
 80004bc:	d10f      	bne.n	80004de <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
  {
      led_time = HAL_GetTick();
 80004be:	f000 fb2b 	bl	8000b18 <HAL_GetTick>
 80004c2:	4602      	mov	r2, r0
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80004c6:	601a      	str	r2, [r3, #0]
      LED1_ON;
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ce:	4809      	ldr	r0, [pc, #36]	; (80004f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80004d0:	f001 fad4 	bl	8001a7c <HAL_GPIO_WritePin>
      Uart_printf(&huart1, "\r\n%s\r\n", CAN_RxData);
 80004d4:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80004d6:	4909      	ldr	r1, [pc, #36]	; (80004fc <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80004d8:	4809      	ldr	r0, [pc, #36]	; (8000500 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80004da:	f7ff feab 	bl	8000234 <Uart_printf>
  }
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	2000015c 	.word	0x2000015c
 80004ec:	200001b4 	.word	0x200001b4
 80004f0:	20000158 	.word	0x20000158
 80004f4:	40010c00 	.word	0x40010c00
 80004f8:	20000154 	.word	0x20000154
 80004fc:	08003464 	.word	0x08003464
 8000500:	20000210 	.word	0x20000210

08000504 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  uint32_t CAN_ErrorCode;
  CAN_ErrorCode = HAL_CAN_GetError(hcan);
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f001 f85f 	bl	80015d0 <HAL_CAN_GetError>
 8000512:	4603      	mov	r3, r0
 8000514:	60fb      	str	r3, [r7, #12]
  Uart_printf(&huart1, "Can Error Code is %ld", &CAN_ErrorCode);
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	461a      	mov	r2, r3
 800051c:	4903      	ldr	r1, [pc, #12]	; (800052c <HAL_CAN_ErrorCallback+0x28>)
 800051e:	4804      	ldr	r0, [pc, #16]	; (8000530 <HAL_CAN_ErrorCallback+0x2c>)
 8000520:	f7ff fe88 	bl	8000234 <Uart_printf>
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	0800346c 	.word	0x0800346c
 8000530:	20000210 	.word	0x20000210

08000534 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000548:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <MX_GPIO_Init+0x90>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a1d      	ldr	r2, [pc, #116]	; (80005c4 <MX_GPIO_Init+0x90>)
 800054e:	f043 0310 	orr.w	r3, r3, #16
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <MX_GPIO_Init+0x90>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0310 	and.w	r3, r3, #16
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000560:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <MX_GPIO_Init+0x90>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <MX_GPIO_Init+0x90>)
 8000566:	f043 0308 	orr.w	r3, r3, #8
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <MX_GPIO_Init+0x90>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0308 	and.w	r3, r3, #8
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <MX_GPIO_Init+0x90>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <MX_GPIO_Init+0x90>)
 800057e:	f043 0304 	orr.w	r3, r3, #4
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <MX_GPIO_Init+0x90>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000596:	480c      	ldr	r0, [pc, #48]	; (80005c8 <MX_GPIO_Init+0x94>)
 8000598:	f001 fa70 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 800059c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80005a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005a6:	2302      	movs	r3, #2
 80005a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2302      	movs	r3, #2
 80005ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ae:	f107 0310 	add.w	r3, r7, #16
 80005b2:	4619      	mov	r1, r3
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <MX_GPIO_Init+0x94>)
 80005b6:	f001 f8f7 	bl	80017a8 <HAL_GPIO_Init>

}
 80005ba:	bf00      	nop
 80005bc:	3720      	adds	r7, #32
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40010c00 	.word	0x40010c00

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fa79 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f83f 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f7ff ffab 	bl	8000534 <MX_GPIO_Init>
  MX_CAN_Init();
 80005de:	f7ff fe4b 	bl	8000278 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80005e2:	f000 f9d5 	bl	8000990 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config();
 80005e6:	f7ff feed 	bl	80003c4 <CAN_Config>

  uint32_t CAN_time_temp = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  uint32_t systick_temp = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
  uint32_t led_time_temp = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

     /*CAN Rx Message interval time should less than 1s*/
	 CAN_time_temp = CAN_RxMessage_time;
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <main+0x80>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	60fb      	str	r3, [r7, #12]
	 led_time_temp = led_time;
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <main+0x84>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	607b      	str	r3, [r7, #4]
	 systick_temp = HAL_GetTick();
 8000602:	f000 fa89 	bl	8000b18 <HAL_GetTick>
 8000606:	60b8      	str	r0, [r7, #8]
	 if(systick_temp > CAN_time_temp)
 8000608:	68ba      	ldr	r2, [r7, #8]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	429a      	cmp	r2, r3
 800060e:	d90b      	bls.n	8000628 <main+0x5c>
	 {
		 if ((systick_temp-CAN_time_temp) > CAN_RxMessage_time_interval_Max)
 8000610:	68ba      	ldr	r2, [r7, #8]
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800061a:	d905      	bls.n	8000628 <main+0x5c>
		      {
		        LED0_ON;
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000622:	480c      	ldr	r0, [pc, #48]	; (8000654 <main+0x88>)
 8000624:	f001 fa2a 	bl	8001a7c <HAL_GPIO_WritePin>
		      }
	 }

	 if(systick_temp > led_time_temp)
 8000628:	68ba      	ldr	r2, [r7, #8]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	d9e2      	bls.n	80005f6 <main+0x2a>
	 {
		 if ((systick_temp-led_time_temp) > led_delay_time)
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800063a:	d9dc      	bls.n	80005f6 <main+0x2a>
	     {
			 LED1_OFF;
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <main+0x88>)
 8000644:	f001 fa1a 	bl	8001a7c <HAL_GPIO_WritePin>
	 CAN_time_temp = CAN_RxMessage_time;
 8000648:	e7d5      	b.n	80005f6 <main+0x2a>
 800064a:	bf00      	nop
 800064c:	20000158 	.word	0x20000158
 8000650:	20000154 	.word	0x20000154
 8000654:	40010c00 	.word	0x40010c00

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b090      	sub	sp, #64	; 0x40
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	2228      	movs	r2, #40	; 0x28
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fad6 	bl	8002c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000696:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0318 	add.w	r3, r7, #24
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fa03 	bl	8001aac <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006ac:	f000 f82e 	bl	800070c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2102      	movs	r1, #2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 fc6e 	bl	8001fac <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006d6:	f000 f819 	bl	800070c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80006da:	f001 fd51 	bl	8002180 <HAL_RCC_EnableCSS>
}
 80006de:	bf00      	nop
 80006e0:	3740      	adds	r7, #64	; 0x40
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a04      	ldr	r2, [pc, #16]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d101      	bne.n	80006fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006fa:	f000 f9fb 	bl	8000af4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40001400 	.word	0x40001400

0800070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_MspInit+0x5c>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	4a14      	ldr	r2, [pc, #80]	; (8000774 <HAL_MspInit+0x5c>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6193      	str	r3, [r2, #24]
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_MspInit+0x5c>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <HAL_MspInit+0x5c>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <HAL_MspInit+0x5c>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HAL_MspInit+0x5c>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <HAL_MspInit+0x60>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <HAL_MspInit+0x60>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	40021000 	.word	0x40021000
 8000778:	40010000 	.word	0x40010000

0800077c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08c      	sub	sp, #48	; 0x30
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 800078c:	2200      	movs	r2, #0
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	2037      	movs	r0, #55	; 0x37
 8000792:	f000 ffde 	bl	8001752 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000796:	2037      	movs	r0, #55	; 0x37
 8000798:	f000 fff7 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <HAL_InitTick+0xa0>)
 800079e:	69db      	ldr	r3, [r3, #28]
 80007a0:	4a1e      	ldr	r2, [pc, #120]	; (800081c <HAL_InitTick+0xa0>)
 80007a2:	f043 0320 	orr.w	r3, r3, #32
 80007a6:	61d3      	str	r3, [r2, #28]
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <HAL_InitTick+0xa0>)
 80007aa:	69db      	ldr	r3, [r3, #28]
 80007ac:	f003 0320 	and.w	r3, r3, #32
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007b4:	f107 0210 	add.w	r2, r7, #16
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fd7e 	bl	80022c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80007c4:	f001 fd54 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 80007c8:	4603      	mov	r3, r0
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80007ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d0:	4a13      	ldr	r2, [pc, #76]	; (8000820 <HAL_InitTick+0xa4>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9b      	lsrs	r3, r3, #18
 80007d8:	3b01      	subs	r3, #1
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <HAL_InitTick+0xa8>)
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <HAL_InitTick+0xac>)
 80007e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <HAL_InitTick+0xa8>)
 80007e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007e8:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80007ea:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <HAL_InitTick+0xa8>)
 80007ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ee:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <HAL_InitTick+0xa8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <HAL_InitTick+0xa8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80007fc:	4809      	ldr	r0, [pc, #36]	; (8000824 <HAL_InitTick+0xa8>)
 80007fe:	f001 fdc7 	bl	8002390 <HAL_TIM_Base_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d104      	bne.n	8000812 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000808:	4806      	ldr	r0, [pc, #24]	; (8000824 <HAL_InitTick+0xa8>)
 800080a:	f001 fdf5 	bl	80023f8 <HAL_TIM_Base_Start_IT>
 800080e:	4603      	mov	r3, r0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3730      	adds	r7, #48	; 0x30
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40021000 	.word	0x40021000
 8000820:	431bde83 	.word	0x431bde83
 8000824:	200001d0 	.word	0x200001d0
 8000828:	40001400 	.word	0x40001400

0800082c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000830:	f001 fd76 	bl	8002320 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}

08000838 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <HardFault_Handler+0x4>

0800083e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <MemManage_Handler+0x4>

08000844 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <BusFault_Handler+0x4>

0800084a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <UsageFault_Handler+0x4>

08000850 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000886:	f000 fc8f 	bl	80011a8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000018c 	.word	0x2000018c

08000894 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <CAN1_SCE_IRQHandler+0x10>)
 800089a:	f000 fc85 	bl	80011a8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2000018c 	.word	0x2000018c

080008a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <TIM7_IRQHandler+0x10>)
 80008ae:	f001 fdc6 	bl	800243e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200001d0 	.word	0x200001d0

080008bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c4:	4a14      	ldr	r2, [pc, #80]	; (8000918 <_sbrk+0x5c>)
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <_sbrk+0x60>)
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <_sbrk+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d102      	bne.n	80008de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <_sbrk+0x64>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <_sbrk+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d207      	bcs.n	80008fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008ec:	f002 f96a 	bl	8002bc4 <__errno>
 80008f0:	4602      	mov	r2, r0
 80008f2:	230c      	movs	r3, #12
 80008f4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	e009      	b.n	8000910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <_sbrk+0x64>)
 800090c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800090e:	68fb      	ldr	r3, [r7, #12]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20010000 	.word	0x20010000
 800091c:	00000400 	.word	0x00000400
 8000920:	20000164 	.word	0x20000164
 8000924:	20000258 	.word	0x20000258

08000928 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <SystemInit+0x5c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <SystemInit+0x5c>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <SystemInit+0x5c>)
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	4911      	ldr	r1, [pc, #68]	; (8000984 <SystemInit+0x5c>)
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <SystemInit+0x60>)
 8000940:	4013      	ands	r3, r2
 8000942:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <SystemInit+0x5c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <SystemInit+0x5c>)
 800094a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800094e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000952:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <SystemInit+0x5c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <SystemInit+0x5c>)
 800095a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800095e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <SystemInit+0x5c>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	4a07      	ldr	r2, [pc, #28]	; (8000984 <SystemInit+0x5c>)
 8000966:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800096a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <SystemInit+0x5c>)
 800096e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000972:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <SystemInit+0x64>)
 8000976:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800097a:	609a      	str	r2, [r3, #8]
#endif 
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	40021000 	.word	0x40021000
 8000988:	f8ff0000 	.word	0xf8ff0000
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <MX_USART1_UART_Init+0x50>)
 8000998:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009c8:	f001 fef2 	bl	80027b0 <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009d2:	f7ff fe9b 	bl	800070c <Error_Handler>
  }

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000210 	.word	0x20000210
 80009e0:	40013800 	.word	0x40013800

080009e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <HAL_UART_MspInit+0x8c>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d131      	bne.n	8000a68 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <HAL_UART_MspInit+0x90>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a1a      	ldr	r2, [pc, #104]	; (8000a74 <HAL_UART_MspInit+0x90>)
 8000a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <HAL_UART_MspInit+0x90>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <HAL_UART_MspInit+0x90>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <HAL_UART_MspInit+0x90>)
 8000a22:	f043 0304 	orr.w	r3, r3, #4
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_UART_MspInit+0x90>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	4619      	mov	r1, r3
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <HAL_UART_MspInit+0x94>)
 8000a4a:	f000 fead 	bl	80017a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4619      	mov	r1, r3
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <HAL_UART_MspInit+0x94>)
 8000a64:	f000 fea0 	bl	80017a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3720      	adds	r7, #32
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40013800 	.word	0x40013800
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40010800 	.word	0x40010800

08000a7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a7c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a7e:	e003      	b.n	8000a88 <LoopCopyDataInit>

08000a80 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a82:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a84:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a86:	3104      	adds	r1, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a88:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a8c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a8e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a90:	d3f6      	bcc.n	8000a80 <CopyDataInit>
  ldr r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a94:	e002      	b.n	8000a9c <LoopFillZerobss>

08000a96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a98:	f842 3b04 	str.w	r3, [r2], #4

08000a9c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a9e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000aa0:	d3f9      	bcc.n	8000a96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aa2:	f7ff ff41 	bl	8000928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f002 f893 	bl	8002bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aaa:	f7ff fd8f 	bl	80005cc <main>
  bx lr
 8000aae:	4770      	bx	lr
  ldr r3, =_sidata
 8000ab0:	080034ec 	.word	0x080034ec
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ab8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000abc:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000ac0:	20000258 	.word	0x20000258

08000ac4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC1_2_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_Init+0x28>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <HAL_Init+0x28>)
 8000ad2:	f043 0310 	orr.w	r3, r3, #16
 8000ad6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 fe2f 	bl	800173c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f7ff fe4c 	bl	800077c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae4:	f7ff fe18 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40022000 	.word	0x40022000

08000af4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_IncTick+0x1c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_IncTick+0x20>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	4a03      	ldr	r2, [pc, #12]	; (8000b14 <HAL_IncTick+0x20>)
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000250 	.word	0x20000250

08000b18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b1c:	4b02      	ldr	r3, [pc, #8]	; (8000b28 <HAL_GetTick+0x10>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	20000250 	.word	0x20000250

08000b2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e0ed      	b.n	8000d1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d102      	bne.n	8000b50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fbca 	bl	80002e4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f022 0202 	bic.w	r2, r2, #2
 8000b5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b60:	f7ff ffda 	bl	8000b18 <HAL_GetTick>
 8000b64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b66:	e012      	b.n	8000b8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b68:	f7ff ffd6 	bl	8000b18 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	2b0a      	cmp	r3, #10
 8000b74:	d90b      	bls.n	8000b8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2205      	movs	r2, #5
 8000b86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e0c5      	b.n	8000d1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1e5      	bne.n	8000b68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f042 0201 	orr.w	r2, r2, #1
 8000baa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bac:	f7ff ffb4 	bl	8000b18 <HAL_GetTick>
 8000bb0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bb2:	e012      	b.n	8000bda <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bb4:	f7ff ffb0 	bl	8000b18 <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	2b0a      	cmp	r3, #10
 8000bc0:	d90b      	bls.n	8000bda <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2205      	movs	r2, #5
 8000bd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e09f      	b.n	8000d1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d0e5      	beq.n	8000bb4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	7e1b      	ldrb	r3, [r3, #24]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d108      	bne.n	8000c02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	e007      	b.n	8000c12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	7e5b      	ldrb	r3, [r3, #25]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d108      	bne.n	8000c2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	e007      	b.n	8000c3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	7e9b      	ldrb	r3, [r3, #26]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d108      	bne.n	8000c56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f042 0220 	orr.w	r2, r2, #32
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	e007      	b.n	8000c66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f022 0220 	bic.w	r2, r2, #32
 8000c64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	7edb      	ldrb	r3, [r3, #27]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d108      	bne.n	8000c80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f022 0210 	bic.w	r2, r2, #16
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	e007      	b.n	8000c90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f042 0210 	orr.w	r2, r2, #16
 8000c8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7f1b      	ldrb	r3, [r3, #28]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d108      	bne.n	8000caa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f042 0208 	orr.w	r2, r2, #8
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	e007      	b.n	8000cba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f022 0208 	bic.w	r2, r2, #8
 8000cb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	7f5b      	ldrb	r3, [r3, #29]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d108      	bne.n	8000cd4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f042 0204 	orr.w	r2, r2, #4
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	e007      	b.n	8000ce4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f022 0204 	bic.w	r2, r2, #4
 8000ce2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689a      	ldr	r2, [r3, #8]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	431a      	orrs	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	691b      	ldr	r3, [r3, #16]
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	ea42 0103 	orr.w	r1, r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	1e5a      	subs	r2, r3, #1
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	430a      	orrs	r2, r1
 8000d08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2201      	movs	r2, #1
 8000d14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b087      	sub	sp, #28
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d38:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d3a:	7cfb      	ldrb	r3, [r7, #19]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d003      	beq.n	8000d48 <HAL_CAN_ConfigFilter+0x26>
 8000d40:	7cfb      	ldrb	r3, [r7, #19]
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	f040 80aa 	bne.w	8000e9c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d4e:	f043 0201 	orr.w	r2, r3, #1
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	f003 031f 	and.w	r3, r3, #31
 8000d60:	2201      	movs	r2, #1
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	401a      	ands	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d123      	bne.n	8000dca <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000da4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3248      	adds	r2, #72	; 0x48
 8000daa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dbe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dc0:	6979      	ldr	r1, [r7, #20]
 8000dc2:	3348      	adds	r3, #72	; 0x48
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	440b      	add	r3, r1
 8000dc8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d122      	bne.n	8000e18 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000df2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	3248      	adds	r2, #72	; 0x48
 8000df8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e0c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e0e:	6979      	ldr	r1, [r7, #20]
 8000e10:	3348      	adds	r3, #72	; 0x48
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	440b      	add	r3, r1
 8000e16:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d109      	bne.n	8000e34 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000e32:	e007      	b.n	8000e44 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d109      	bne.n	8000e60 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000e5e:	e007      	b.n	8000e70 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	6a1b      	ldr	r3, [r3, #32]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d107      	bne.n	8000e88 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	431a      	orrs	r2, r3
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e8e:	f023 0201 	bic.w	r2, r3, #1
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	e006      	b.n	8000eaa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
  }
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	371c      	adds	r7, #28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d12e      	bne.n	8000f26 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2202      	movs	r2, #2
 8000ecc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0201 	bic.w	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ee0:	f7ff fe1a 	bl	8000b18 <HAL_GetTick>
 8000ee4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ee6:	e012      	b.n	8000f0e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ee8:	f7ff fe16 	bl	8000b18 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b0a      	cmp	r3, #10
 8000ef4:	d90b      	bls.n	8000f0e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2205      	movs	r2, #5
 8000f06:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e012      	b.n	8000f34 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1e5      	bne.n	8000ee8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e006      	b.n	8000f34 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
  }
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f50:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f52:	7dfb      	ldrb	r3, [r7, #23]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d003      	beq.n	8000f60 <HAL_CAN_GetRxMessage+0x24>
 8000f58:	7dfb      	ldrb	r3, [r7, #23]
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	f040 80f3 	bne.w	8001146 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10e      	bne.n	8000f84 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d116      	bne.n	8000fa2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e0e7      	b.n	8001154 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d107      	bne.n	8000fa2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e0d8      	b.n	8001154 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	331b      	adds	r3, #27
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	4413      	add	r3, r2
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0204 	and.w	r2, r3, #4
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10c      	bne.n	8000fda <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	331b      	adds	r3, #27
 8000fc8:	011b      	lsls	r3, r3, #4
 8000fca:	4413      	add	r3, r2
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	0d5b      	lsrs	r3, r3, #21
 8000fd0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	e00b      	b.n	8000ff2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	331b      	adds	r3, #27
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	4413      	add	r3, r2
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	08db      	lsrs	r3, r3, #3
 8000fea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	331b      	adds	r3, #27
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	4413      	add	r3, r2
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0202 	and.w	r2, r3, #2
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	331b      	adds	r3, #27
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	4413      	add	r3, r2
 8001014:	3304      	adds	r3, #4
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 020f 	and.w	r2, r3, #15
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	331b      	adds	r3, #27
 8001028:	011b      	lsls	r3, r3, #4
 800102a:	4413      	add	r3, r2
 800102c:	3304      	adds	r3, #4
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	b2da      	uxtb	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	331b      	adds	r3, #27
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	4413      	add	r3, r2
 8001044:	3304      	adds	r3, #4
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	0c1b      	lsrs	r3, r3, #16
 800104a:	b29a      	uxth	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	4413      	add	r3, r2
 800105a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	011b      	lsls	r3, r3, #4
 800106e:	4413      	add	r3, r2
 8001070:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	0a1a      	lsrs	r2, r3, #8
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	4413      	add	r3, r2
 800108a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	0c1a      	lsrs	r2, r3, #16
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	3302      	adds	r3, #2
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	011b      	lsls	r3, r3, #4
 80010a2:	4413      	add	r3, r2
 80010a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	0e1a      	lsrs	r2, r3, #24
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	3303      	adds	r3, #3
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	4413      	add	r3, r2
 80010be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	3304      	adds	r3, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	4413      	add	r3, r2
 80010d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	0a1a      	lsrs	r2, r3, #8
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	3305      	adds	r3, #5
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	4413      	add	r3, r2
 80010f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	0c1a      	lsrs	r2, r3, #16
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	3306      	adds	r3, #6
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	011b      	lsls	r3, r3, #4
 8001108:	4413      	add	r3, r2
 800110a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	0e1a      	lsrs	r2, r3, #24
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	3307      	adds	r3, #7
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d108      	bne.n	8001132 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0220 	orr.w	r2, r2, #32
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	e007      	b.n	8001142 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f042 0220 	orr.w	r2, r2, #32
 8001140:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e006      	b.n	8001154 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
  }
}
 8001154:	4618      	mov	r0, r3
 8001156:	371c      	adds	r7, #28
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr

0800115e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800115e:	b480      	push	{r7}
 8001160:	b085      	sub	sp, #20
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800116e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d002      	beq.n	800117c <HAL_CAN_ActivateNotification+0x1e>
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d109      	bne.n	8001190 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6959      	ldr	r1, [r3, #20]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	e006      	b.n	800119e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
  }
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d07c      	beq.n	80012e8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d023      	beq.n	8001240 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2201      	movs	r2, #1
 80011fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f97d 	bl	800150a <HAL_CAN_TxMailbox0CompleteCallback>
 8001210:	e016      	b.n	8001240 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	d004      	beq.n	8001226 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
 8001224:	e00c      	b.n	8001240 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	2b00      	cmp	r3, #0
 800122e:	d004      	beq.n	800123a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
 8001238:	e002      	b.n	8001240 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 f980 	bl	8001540 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001246:	2b00      	cmp	r3, #0
 8001248:	d024      	beq.n	8001294 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001252:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f95c 	bl	800151c <HAL_CAN_TxMailbox1CompleteCallback>
 8001264:	e016      	b.n	8001294 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800126c:	2b00      	cmp	r3, #0
 800126e:	d004      	beq.n	800127a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
 8001278:	e00c      	b.n	8001294 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
 800128c:	e002      	b.n	8001294 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f95f 	bl	8001552 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d024      	beq.n	80012e8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 f93b 	bl	800152e <HAL_CAN_TxMailbox2CompleteCallback>
 80012b8:	e016      	b.n	80012e8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d004      	beq.n	80012ce <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
 80012cc:	e00c      	b.n	80012e8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d004      	beq.n	80012e2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
 80012e0:	e002      	b.n	80012e8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 f93e 	bl	8001564 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00c      	beq.n	800130c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d007      	beq.n	800130c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001302:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2210      	movs	r2, #16
 800130a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00b      	beq.n	800132e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f003 0308 	and.w	r3, r3, #8
 800131c:	2b00      	cmp	r3, #0
 800131e:	d006      	beq.n	800132e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2208      	movs	r2, #8
 8001326:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f924 	bl	8001576 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800132e:	6a3b      	ldr	r3, [r7, #32]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d009      	beq.n	800134c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d002      	beq.n	800134c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff f892 	bl	8000470 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00c      	beq.n	8001370 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	2b00      	cmp	r3, #0
 800135e:	d007      	beq.n	8001370 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001366:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2210      	movs	r2, #16
 800136e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	f003 0320 	and.w	r3, r3, #32
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00b      	beq.n	8001392 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	2b00      	cmp	r3, #0
 8001382:	d006      	beq.n	8001392 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2208      	movs	r2, #8
 800138a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 f904 	bl	800159a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001392:	6a3b      	ldr	r3, [r7, #32]
 8001394:	f003 0310 	and.w	r3, r3, #16
 8001398:	2b00      	cmp	r3, #0
 800139a:	d009      	beq.n	80013b0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d002      	beq.n	80013b0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 f8ec 	bl	8001588 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d006      	beq.n	80013d2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2210      	movs	r2, #16
 80013ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f8ed 	bl	80015ac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00b      	beq.n	80013f4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d006      	beq.n	80013f4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2208      	movs	r2, #8
 80013ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f8e5 	bl	80015be <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d075      	beq.n	80014ea <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	d06c      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140e:	2b00      	cmp	r3, #0
 8001410:	d008      	beq.n	8001424 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800142a:	2b00      	cmp	r3, #0
 800142c:	d008      	beq.n	8001440 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	f043 0302 	orr.w	r3, r3, #2
 800143e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001446:	2b00      	cmp	r3, #0
 8001448:	d008      	beq.n	800145c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	f043 0304 	orr.w	r3, r3, #4
 800145a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001462:	2b00      	cmp	r3, #0
 8001464:	d03d      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800146c:	2b00      	cmp	r3, #0
 800146e:	d038      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001476:	2b30      	cmp	r3, #48	; 0x30
 8001478:	d017      	beq.n	80014aa <HAL_CAN_IRQHandler+0x302>
 800147a:	2b30      	cmp	r3, #48	; 0x30
 800147c:	d804      	bhi.n	8001488 <HAL_CAN_IRQHandler+0x2e0>
 800147e:	2b10      	cmp	r3, #16
 8001480:	d009      	beq.n	8001496 <HAL_CAN_IRQHandler+0x2ee>
 8001482:	2b20      	cmp	r3, #32
 8001484:	d00c      	beq.n	80014a0 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001486:	e024      	b.n	80014d2 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001488:	2b50      	cmp	r3, #80	; 0x50
 800148a:	d018      	beq.n	80014be <HAL_CAN_IRQHandler+0x316>
 800148c:	2b60      	cmp	r3, #96	; 0x60
 800148e:	d01b      	beq.n	80014c8 <HAL_CAN_IRQHandler+0x320>
 8001490:	2b40      	cmp	r3, #64	; 0x40
 8001492:	d00f      	beq.n	80014b4 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001494:	e01d      	b.n	80014d2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	f043 0308 	orr.w	r3, r3, #8
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800149e:	e018      	b.n	80014d2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	f043 0310 	orr.w	r3, r3, #16
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014a8:	e013      	b.n	80014d2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	f043 0320 	orr.w	r3, r3, #32
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014b2:	e00e      	b.n	80014d2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014bc:	e009      	b.n	80014d2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014c6:	e004      	b.n	80014d2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014d0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	699a      	ldr	r2, [r3, #24]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80014e0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2204      	movs	r2, #4
 80014e8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d008      	beq.n	8001502 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff f801 	bl	8000504 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001502:	bf00      	nop
 8001504:	3728      	adds	r7, #40	; 0x28
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr

08001552 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
	...

080015e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <__NVIC_GetPriorityGrouping+0x18>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 0307 	and.w	r3, r3, #7
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	2b00      	cmp	r3, #0
 800165c:	db0b      	blt.n	8001676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f003 021f 	and.w	r2, r3, #31
 8001664:	4906      	ldr	r1, [pc, #24]	; (8001680 <__NVIC_EnableIRQ+0x34>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	2001      	movs	r0, #1
 800166e:	fa00 f202 	lsl.w	r2, r0, r2
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	; (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	; (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff4f 	bl	80015e8 <__NVIC_SetPriorityGrouping>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001764:	f7ff ff64 	bl	8001630 <__NVIC_GetPriorityGrouping>
 8001768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff ffb2 	bl	80016d8 <NVIC_EncodePriority>
 8001774:	4602      	mov	r2, r0
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff81 	bl	8001684 <__NVIC_SetPriority>
}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff57 	bl	800164c <__NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b08b      	sub	sp, #44	; 0x2c
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ba:	e133      	b.n	8001a24 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017bc:	2201      	movs	r2, #1
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	f040 8122 	bne.w	8001a1e <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b12      	cmp	r3, #18
 80017e0:	d034      	beq.n	800184c <HAL_GPIO_Init+0xa4>
 80017e2:	2b12      	cmp	r3, #18
 80017e4:	d80d      	bhi.n	8001802 <HAL_GPIO_Init+0x5a>
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d02b      	beq.n	8001842 <HAL_GPIO_Init+0x9a>
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d804      	bhi.n	80017f8 <HAL_GPIO_Init+0x50>
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d031      	beq.n	8001856 <HAL_GPIO_Init+0xae>
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d01c      	beq.n	8001830 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017f6:	e048      	b.n	800188a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d043      	beq.n	8001884 <HAL_GPIO_Init+0xdc>
 80017fc:	2b11      	cmp	r3, #17
 80017fe:	d01b      	beq.n	8001838 <HAL_GPIO_Init+0x90>
          break;
 8001800:	e043      	b.n	800188a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001802:	4a8f      	ldr	r2, [pc, #572]	; (8001a40 <HAL_GPIO_Init+0x298>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d026      	beq.n	8001856 <HAL_GPIO_Init+0xae>
 8001808:	4a8d      	ldr	r2, [pc, #564]	; (8001a40 <HAL_GPIO_Init+0x298>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d806      	bhi.n	800181c <HAL_GPIO_Init+0x74>
 800180e:	4a8d      	ldr	r2, [pc, #564]	; (8001a44 <HAL_GPIO_Init+0x29c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d020      	beq.n	8001856 <HAL_GPIO_Init+0xae>
 8001814:	4a8c      	ldr	r2, [pc, #560]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d01d      	beq.n	8001856 <HAL_GPIO_Init+0xae>
          break;
 800181a:	e036      	b.n	800188a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800181c:	4a8b      	ldr	r2, [pc, #556]	; (8001a4c <HAL_GPIO_Init+0x2a4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d019      	beq.n	8001856 <HAL_GPIO_Init+0xae>
 8001822:	4a8b      	ldr	r2, [pc, #556]	; (8001a50 <HAL_GPIO_Init+0x2a8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d016      	beq.n	8001856 <HAL_GPIO_Init+0xae>
 8001828:	4a8a      	ldr	r2, [pc, #552]	; (8001a54 <HAL_GPIO_Init+0x2ac>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d013      	beq.n	8001856 <HAL_GPIO_Init+0xae>
          break;
 800182e:	e02c      	b.n	800188a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	623b      	str	r3, [r7, #32]
          break;
 8001836:	e028      	b.n	800188a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	3304      	adds	r3, #4
 800183e:	623b      	str	r3, [r7, #32]
          break;
 8001840:	e023      	b.n	800188a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	3308      	adds	r3, #8
 8001848:	623b      	str	r3, [r7, #32]
          break;
 800184a:	e01e      	b.n	800188a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	330c      	adds	r3, #12
 8001852:	623b      	str	r3, [r7, #32]
          break;
 8001854:	e019      	b.n	800188a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800185e:	2304      	movs	r3, #4
 8001860:	623b      	str	r3, [r7, #32]
          break;
 8001862:	e012      	b.n	800188a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d105      	bne.n	8001878 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800186c:	2308      	movs	r3, #8
 800186e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	611a      	str	r2, [r3, #16]
          break;
 8001876:	e008      	b.n	800188a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001878:	2308      	movs	r3, #8
 800187a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	615a      	str	r2, [r3, #20]
          break;
 8001882:	e002      	b.n	800188a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
          break;
 8001888:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	2bff      	cmp	r3, #255	; 0xff
 800188e:	d801      	bhi.n	8001894 <HAL_GPIO_Init+0xec>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	e001      	b.n	8001898 <HAL_GPIO_Init+0xf0>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3304      	adds	r3, #4
 8001898:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	2bff      	cmp	r3, #255	; 0xff
 800189e:	d802      	bhi.n	80018a6 <HAL_GPIO_Init+0xfe>
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	e002      	b.n	80018ac <HAL_GPIO_Init+0x104>
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	3b08      	subs	r3, #8
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	210f      	movs	r1, #15
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	401a      	ands	r2, r3
 80018be:	6a39      	ldr	r1, [r7, #32]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	431a      	orrs	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80a2 	beq.w	8001a1e <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018da:	4b5f      	ldr	r3, [pc, #380]	; (8001a58 <HAL_GPIO_Init+0x2b0>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	4a5e      	ldr	r2, [pc, #376]	; (8001a58 <HAL_GPIO_Init+0x2b0>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6193      	str	r3, [r2, #24]
 80018e6:	4b5c      	ldr	r3, [pc, #368]	; (8001a58 <HAL_GPIO_Init+0x2b0>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018f2:	4a5a      	ldr	r2, [pc, #360]	; (8001a5c <HAL_GPIO_Init+0x2b4>)
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	220f      	movs	r2, #15
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	4013      	ands	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a51      	ldr	r2, [pc, #324]	; (8001a60 <HAL_GPIO_Init+0x2b8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01f      	beq.n	800195e <HAL_GPIO_Init+0x1b6>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a50      	ldr	r2, [pc, #320]	; (8001a64 <HAL_GPIO_Init+0x2bc>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d019      	beq.n	800195a <HAL_GPIO_Init+0x1b2>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4f      	ldr	r2, [pc, #316]	; (8001a68 <HAL_GPIO_Init+0x2c0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_GPIO_Init+0x1ae>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4e      	ldr	r2, [pc, #312]	; (8001a6c <HAL_GPIO_Init+0x2c4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00d      	beq.n	8001952 <HAL_GPIO_Init+0x1aa>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4d      	ldr	r2, [pc, #308]	; (8001a70 <HAL_GPIO_Init+0x2c8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d007      	beq.n	800194e <HAL_GPIO_Init+0x1a6>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4c      	ldr	r2, [pc, #304]	; (8001a74 <HAL_GPIO_Init+0x2cc>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d101      	bne.n	800194a <HAL_GPIO_Init+0x1a2>
 8001946:	2305      	movs	r3, #5
 8001948:	e00a      	b.n	8001960 <HAL_GPIO_Init+0x1b8>
 800194a:	2306      	movs	r3, #6
 800194c:	e008      	b.n	8001960 <HAL_GPIO_Init+0x1b8>
 800194e:	2304      	movs	r3, #4
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x1b8>
 8001952:	2303      	movs	r3, #3
 8001954:	e004      	b.n	8001960 <HAL_GPIO_Init+0x1b8>
 8001956:	2302      	movs	r3, #2
 8001958:	e002      	b.n	8001960 <HAL_GPIO_Init+0x1b8>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <HAL_GPIO_Init+0x1b8>
 800195e:	2300      	movs	r3, #0
 8001960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001962:	f002 0203 	and.w	r2, r2, #3
 8001966:	0092      	lsls	r2, r2, #2
 8001968:	4093      	lsls	r3, r2
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001970:	493a      	ldr	r1, [pc, #232]	; (8001a5c <HAL_GPIO_Init+0x2b4>)
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	089b      	lsrs	r3, r3, #2
 8001976:	3302      	adds	r3, #2
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d006      	beq.n	8001998 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800198a:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	493a      	ldr	r1, [pc, #232]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]
 8001996:	e006      	b.n	80019a6 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001998:	4b37      	ldr	r3, [pc, #220]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	43db      	mvns	r3, r3
 80019a0:	4935      	ldr	r1, [pc, #212]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d006      	beq.n	80019c0 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019b2:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	4930      	ldr	r1, [pc, #192]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
 80019be:	e006      	b.n	80019ce <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019c0:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	492b      	ldr	r1, [pc, #172]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019da:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	4926      	ldr	r1, [pc, #152]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	608b      	str	r3, [r1, #8]
 80019e6:	e006      	b.n	80019f6 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019e8:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	4921      	ldr	r1, [pc, #132]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d006      	beq.n	8001a10 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a02:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	491c      	ldr	r1, [pc, #112]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60cb      	str	r3, [r1, #12]
 8001a0e:	e006      	b.n	8001a1e <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	4917      	ldr	r1, [pc, #92]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	3301      	adds	r3, #1
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f47f aec4 	bne.w	80017bc <HAL_GPIO_Init+0x14>
  }
}
 8001a34:	bf00      	nop
 8001a36:	372c      	adds	r7, #44	; 0x2c
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	10210000 	.word	0x10210000
 8001a44:	10110000 	.word	0x10110000
 8001a48:	10120000 	.word	0x10120000
 8001a4c:	10310000 	.word	0x10310000
 8001a50:	10320000 	.word	0x10320000
 8001a54:	10220000 	.word	0x10220000
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40010000 	.word	0x40010000
 8001a60:	40010800 	.word	0x40010800
 8001a64:	40010c00 	.word	0x40010c00
 8001a68:	40011000 	.word	0x40011000
 8001a6c:	40011400 	.word	0x40011400
 8001a70:	40011800 	.word	0x40011800
 8001a74:	40011c00 	.word	0x40011c00
 8001a78:	40010400 	.word	0x40010400

08001a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a8c:	787b      	ldrb	r3, [r7, #1]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a98:	e003      	b.n	8001aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	041a      	lsls	r2, r3, #16
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	611a      	str	r2, [r3, #16]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e26c      	b.n	8001f98 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 8087 	beq.w	8001bda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001acc:	4b92      	ldr	r3, [pc, #584]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d00c      	beq.n	8001af2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ad8:	4b8f      	ldr	r3, [pc, #572]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d112      	bne.n	8001b0a <HAL_RCC_OscConfig+0x5e>
 8001ae4:	4b8c      	ldr	r3, [pc, #560]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af0:	d10b      	bne.n	8001b0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af2:	4b89      	ldr	r3, [pc, #548]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d06c      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x12c>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d168      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e246      	b.n	8001f98 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b12:	d106      	bne.n	8001b22 <HAL_RCC_OscConfig+0x76>
 8001b14:	4b80      	ldr	r3, [pc, #512]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a7f      	ldr	r2, [pc, #508]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	e02e      	b.n	8001b80 <HAL_RCC_OscConfig+0xd4>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x98>
 8001b2a:	4b7b      	ldr	r3, [pc, #492]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a7a      	ldr	r2, [pc, #488]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	4b78      	ldr	r3, [pc, #480]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a77      	ldr	r2, [pc, #476]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e01d      	b.n	8001b80 <HAL_RCC_OscConfig+0xd4>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b4c:	d10c      	bne.n	8001b68 <HAL_RCC_OscConfig+0xbc>
 8001b4e:	4b72      	ldr	r3, [pc, #456]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a71      	ldr	r2, [pc, #452]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b6f      	ldr	r3, [pc, #444]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a6e      	ldr	r2, [pc, #440]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e00b      	b.n	8001b80 <HAL_RCC_OscConfig+0xd4>
 8001b68:	4b6b      	ldr	r3, [pc, #428]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a6a      	ldr	r2, [pc, #424]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	4b68      	ldr	r3, [pc, #416]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a67      	ldr	r2, [pc, #412]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d013      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7fe ffc6 	bl	8000b18 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b90:	f7fe ffc2 	bl	8000b18 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	; 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e1fa      	b.n	8001f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b5d      	ldr	r3, [pc, #372]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0xe4>
 8001bae:	e014      	b.n	8001bda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7fe ffb2 	bl	8000b18 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb8:	f7fe ffae 	bl	8000b18 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b64      	cmp	r3, #100	; 0x64
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e1e6      	b.n	8001f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bca:	4b53      	ldr	r3, [pc, #332]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x10c>
 8001bd6:	e000      	b.n	8001bda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d063      	beq.n	8001cae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001be6:	4b4c      	ldr	r3, [pc, #304]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00b      	beq.n	8001c0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bf2:	4b49      	ldr	r3, [pc, #292]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d11c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x18c>
 8001bfe:	4b46      	ldr	r3, [pc, #280]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d116      	bne.n	8001c38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0a:	4b43      	ldr	r3, [pc, #268]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d005      	beq.n	8001c22 <HAL_RCC_OscConfig+0x176>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d001      	beq.n	8001c22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e1ba      	b.n	8001f98 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c22:	4b3d      	ldr	r3, [pc, #244]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4939      	ldr	r1, [pc, #228]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c36:	e03a      	b.n	8001cae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d020      	beq.n	8001c82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c40:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c46:	f7fe ff67 	bl	8000b18 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4e:	f7fe ff63 	bl	8000b18 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e19b      	b.n	8001f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	4b2d      	ldr	r3, [pc, #180]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6c:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4927      	ldr	r1, [pc, #156]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	600b      	str	r3, [r1, #0]
 8001c80:	e015      	b.n	8001cae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c82:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7fe ff46 	bl	8000b18 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c90:	f7fe ff42 	bl	8000b18 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e17a      	b.n	8001f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca2:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d03a      	beq.n	8001d30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d019      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_RCC_OscConfig+0x274>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc8:	f7fe ff26 	bl	8000b18 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd0:	f7fe ff22 	bl	8000b18 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e15a      	b.n	8001f98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f000 fb2a 	bl	8002348 <RCC_Delay>
 8001cf4:	e01c      	b.n	8001d30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_RCC_OscConfig+0x274>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfc:	f7fe ff0c 	bl	8000b18 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d02:	e00f      	b.n	8001d24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d04:	f7fe ff08 	bl	8000b18 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d908      	bls.n	8001d24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e140      	b.n	8001f98 <HAL_RCC_OscConfig+0x4ec>
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	42420000 	.word	0x42420000
 8001d20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d24:	4b9e      	ldr	r3, [pc, #632]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1e9      	bne.n	8001d04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 80a6 	beq.w	8001e8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d42:	4b97      	ldr	r3, [pc, #604]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10d      	bne.n	8001d6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	4b94      	ldr	r3, [pc, #592]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	4a93      	ldr	r2, [pc, #588]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d58:	61d3      	str	r3, [r2, #28]
 8001d5a:	4b91      	ldr	r3, [pc, #580]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d66:	2301      	movs	r3, #1
 8001d68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6a:	4b8e      	ldr	r3, [pc, #568]	; (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d118      	bne.n	8001da8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d76:	4b8b      	ldr	r3, [pc, #556]	; (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a8a      	ldr	r2, [pc, #552]	; (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d82:	f7fe fec9 	bl	8000b18 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8a:	f7fe fec5 	bl	8000b18 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b64      	cmp	r3, #100	; 0x64
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e0fd      	b.n	8001f98 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	4b81      	ldr	r3, [pc, #516]	; (8001fa4 <HAL_RCC_OscConfig+0x4f8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d106      	bne.n	8001dbe <HAL_RCC_OscConfig+0x312>
 8001db0:	4b7b      	ldr	r3, [pc, #492]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4a7a      	ldr	r2, [pc, #488]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6213      	str	r3, [r2, #32]
 8001dbc:	e02d      	b.n	8001e1a <HAL_RCC_OscConfig+0x36e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x334>
 8001dc6:	4b76      	ldr	r3, [pc, #472]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a75      	ldr	r2, [pc, #468]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	6213      	str	r3, [r2, #32]
 8001dd2:	4b73      	ldr	r3, [pc, #460]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4a72      	ldr	r2, [pc, #456]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	f023 0304 	bic.w	r3, r3, #4
 8001ddc:	6213      	str	r3, [r2, #32]
 8001dde:	e01c      	b.n	8001e1a <HAL_RCC_OscConfig+0x36e>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b05      	cmp	r3, #5
 8001de6:	d10c      	bne.n	8001e02 <HAL_RCC_OscConfig+0x356>
 8001de8:	4b6d      	ldr	r3, [pc, #436]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	4a6c      	ldr	r2, [pc, #432]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001dee:	f043 0304 	orr.w	r3, r3, #4
 8001df2:	6213      	str	r3, [r2, #32]
 8001df4:	4b6a      	ldr	r3, [pc, #424]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4a69      	ldr	r2, [pc, #420]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6213      	str	r3, [r2, #32]
 8001e00:	e00b      	b.n	8001e1a <HAL_RCC_OscConfig+0x36e>
 8001e02:	4b67      	ldr	r3, [pc, #412]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	4a66      	ldr	r2, [pc, #408]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	6213      	str	r3, [r2, #32]
 8001e0e:	4b64      	ldr	r3, [pc, #400]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	4a63      	ldr	r2, [pc, #396]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	f023 0304 	bic.w	r3, r3, #4
 8001e18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d015      	beq.n	8001e4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e22:	f7fe fe79 	bl	8000b18 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7fe fe75 	bl	8000b18 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e0ab      	b.n	8001f98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e40:	4b57      	ldr	r3, [pc, #348]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0ee      	beq.n	8001e2a <HAL_RCC_OscConfig+0x37e>
 8001e4c:	e014      	b.n	8001e78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4e:	f7fe fe63 	bl	8000b18 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7fe fe5f 	bl	8000b18 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e095      	b.n	8001f98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6c:	4b4c      	ldr	r3, [pc, #304]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1ee      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e78:	7dfb      	ldrb	r3, [r7, #23]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d105      	bne.n	8001e8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7e:	4b48      	ldr	r3, [pc, #288]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	4a47      	ldr	r2, [pc, #284]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8081 	beq.w	8001f96 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e94:	4b42      	ldr	r3, [pc, #264]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d061      	beq.n	8001f64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d146      	bne.n	8001f36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea8:	4b3f      	ldr	r3, [pc, #252]	; (8001fa8 <HAL_RCC_OscConfig+0x4fc>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eae:	f7fe fe33 	bl	8000b18 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7fe fe2f 	bl	8000b18 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e067      	b.n	8001f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec8:	4b35      	ldr	r3, [pc, #212]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f0      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001edc:	d108      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ede:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	492d      	ldr	r1, [pc, #180]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef0:	4b2b      	ldr	r3, [pc, #172]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a19      	ldr	r1, [r3, #32]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	430b      	orrs	r3, r1
 8001f02:	4927      	ldr	r1, [pc, #156]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f08:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <HAL_RCC_OscConfig+0x4fc>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0e:	f7fe fe03 	bl	8000b18 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f16:	f7fe fdff 	bl	8000b18 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e037      	b.n	8001f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f28:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x46a>
 8001f34:	e02f      	b.n	8001f96 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f36:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <HAL_RCC_OscConfig+0x4fc>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7fe fdec 	bl	8000b18 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f44:	f7fe fde8 	bl	8000b18 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e020      	b.n	8001f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x498>
 8001f62:	e018      	b.n	8001f96 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e013      	b.n	8001f98 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d106      	bne.n	8001f92 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d001      	beq.n	8001f96 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40007000 	.word	0x40007000
 8001fa8:	42420060 	.word	0x42420060

08001fac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0d0      	b.n	8002162 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc0:	4b6a      	ldr	r3, [pc, #424]	; (800216c <HAL_RCC_ClockConfig+0x1c0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d910      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	4b67      	ldr	r3, [pc, #412]	; (800216c <HAL_RCC_ClockConfig+0x1c0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 0207 	bic.w	r2, r3, #7
 8001fd6:	4965      	ldr	r1, [pc, #404]	; (800216c <HAL_RCC_ClockConfig+0x1c0>)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fde:	4b63      	ldr	r3, [pc, #396]	; (800216c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0b8      	b.n	8002162 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d020      	beq.n	800203e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002008:	4b59      	ldr	r3, [pc, #356]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	4a58      	ldr	r2, [pc, #352]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002012:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002020:	4b53      	ldr	r3, [pc, #332]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4a52      	ldr	r2, [pc, #328]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800202a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800202c:	4b50      	ldr	r3, [pc, #320]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	494d      	ldr	r1, [pc, #308]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d040      	beq.n	80020cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d107      	bne.n	8002062 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002052:	4b47      	ldr	r3, [pc, #284]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d115      	bne.n	800208a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e07f      	b.n	8002162 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d107      	bne.n	800207a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206a:	4b41      	ldr	r3, [pc, #260]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d109      	bne.n	800208a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e073      	b.n	8002162 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207a:	4b3d      	ldr	r3, [pc, #244]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e06b      	b.n	8002162 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800208a:	4b39      	ldr	r3, [pc, #228]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f023 0203 	bic.w	r2, r3, #3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4936      	ldr	r1, [pc, #216]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800209c:	f7fe fd3c 	bl	8000b18 <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a4:	f7fe fd38 	bl	8000b18 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e053      	b.n	8002162 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ba:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 020c 	and.w	r2, r3, #12
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d1eb      	bne.n	80020a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020cc:	4b27      	ldr	r3, [pc, #156]	; (800216c <HAL_RCC_ClockConfig+0x1c0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d210      	bcs.n	80020fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b24      	ldr	r3, [pc, #144]	; (800216c <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 0207 	bic.w	r2, r3, #7
 80020e2:	4922      	ldr	r1, [pc, #136]	; (800216c <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b20      	ldr	r3, [pc, #128]	; (800216c <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e032      	b.n	8002162 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4916      	ldr	r1, [pc, #88]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	4313      	orrs	r3, r2
 8002118:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d009      	beq.n	800213a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002126:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	490e      	ldr	r1, [pc, #56]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	4313      	orrs	r3, r2
 8002138:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800213a:	f000 f82d 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 800213e:	4601      	mov	r1, r0
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 800214c:	5cd3      	ldrb	r3, [r2, r3]
 800214e:	fa21 f303 	lsr.w	r3, r1, r3
 8002152:	4a09      	ldr	r2, [pc, #36]	; (8002178 <HAL_RCC_ClockConfig+0x1cc>)
 8002154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_RCC_ClockConfig+0x1d0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fb0e 	bl	800077c <HAL_InitTick>

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40022000 	.word	0x40022000
 8002170:	40021000 	.word	0x40021000
 8002174:	08003498 	.word	0x08003498
 8002178:	20000000 	.word	0x20000000
 800217c:	20000004 	.word	0x20000004

08002180 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <HAL_RCC_EnableCSS+0x14>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	4242004c 	.word	0x4242004c

08002198 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002198:	b490      	push	{r4, r7}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800219e:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021a0:	1d3c      	adds	r4, r7, #4
 80021a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021a8:	4b28      	ldr	r3, [pc, #160]	; (800224c <HAL_RCC_GetSysClockFreq+0xb4>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021c2:	4b23      	ldr	r3, [pc, #140]	; (8002250 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d002      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0x40>
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d003      	beq.n	80021de <HAL_RCC_GetSysClockFreq+0x46>
 80021d6:	e02d      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d8:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021da:	623b      	str	r3, [r7, #32]
      break;
 80021dc:	e02d      	b.n	800223a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	0c9b      	lsrs	r3, r3, #18
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021ea:	4413      	add	r3, r2
 80021ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	0c5b      	lsrs	r3, r3, #17
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800220a:	4413      	add	r3, r2
 800220c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002210:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	4a0f      	ldr	r2, [pc, #60]	; (8002254 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002216:	fb02 f203 	mul.w	r2, r2, r3
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
 8002222:	e004      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002228:	fb02 f303 	mul.w	r3, r2, r3
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	623b      	str	r3, [r7, #32]
      break;
 8002232:	e002      	b.n	800223a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002234:	4b07      	ldr	r3, [pc, #28]	; (8002254 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002236:	623b      	str	r3, [r7, #32]
      break;
 8002238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800223a:	6a3b      	ldr	r3, [r7, #32]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3728      	adds	r7, #40	; 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bc90      	pop	{r4, r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	08003484 	.word	0x08003484
 800224c:	08003494 	.word	0x08003494
 8002250:	40021000 	.word	0x40021000
 8002254:	007a1200 	.word	0x007a1200
 8002258:	003d0900 	.word	0x003d0900

0800225c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002260:	4b02      	ldr	r3, [pc, #8]	; (800226c <HAL_RCC_GetHCLKFreq+0x10>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	20000000 	.word	0x20000000

08002270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002274:	f7ff fff2 	bl	800225c <HAL_RCC_GetHCLKFreq>
 8002278:	4601      	mov	r1, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4a03      	ldr	r2, [pc, #12]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	fa21 f303 	lsr.w	r3, r1, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	080034a8 	.word	0x080034a8

08002298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800229c:	f7ff ffde 	bl	800225c <HAL_RCC_GetHCLKFreq>
 80022a0:	4601      	mov	r1, r0
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	0adb      	lsrs	r3, r3, #11
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4a03      	ldr	r2, [pc, #12]	; (80022bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ae:	5cd3      	ldrb	r3, [r2, r3]
 80022b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	080034a8 	.word	0x080034a8

080022c0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	220f      	movs	r2, #15
 80022ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_RCC_GetClockConfig+0x58>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0203 	and.w	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <HAL_RCC_GetClockConfig+0x58>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_RCC_GetClockConfig+0x58>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <HAL_RCC_GetClockConfig+0x58>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	08db      	lsrs	r3, r3, #3
 80022fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_RCC_GetClockConfig+0x5c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0207 	and.w	r2, r3, #7
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	40021000 	.word	0x40021000
 800231c:	40022000 	.word	0x40022000

08002320 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232c:	2b80      	cmp	r3, #128	; 0x80
 800232e:	d104      	bne.n	800233a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002330:	f000 f828 	bl	8002384 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002336:	2280      	movs	r2, #128	; 0x80
 8002338:	701a      	strb	r2, [r3, #0]
  }
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	4002100a 	.word	0x4002100a

08002348 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <RCC_Delay+0x34>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <RCC_Delay+0x38>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	0a5b      	lsrs	r3, r3, #9
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002364:	bf00      	nop
  }
  while (Delay --);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1e5a      	subs	r2, r3, #1
 800236a:	60fa      	str	r2, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f9      	bne.n	8002364 <RCC_Delay+0x1c>
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000000 	.word	0x20000000
 8002380:	10624dd3 	.word	0x10624dd3

08002384 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e01d      	b.n	80023de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f815 	bl	80023e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3304      	adds	r3, #4
 80023cc:	4619      	mov	r1, r3
 80023ce:	4610      	mov	r0, r2
 80023d0:	f000 f962 	bl	8002698 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b06      	cmp	r3, #6
 8002420:	d007      	beq.n	8002432 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0201 	orr.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b02      	cmp	r3, #2
 8002452:	d122      	bne.n	800249a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b02      	cmp	r3, #2
 8002460:	d11b      	bne.n	800249a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f06f 0202 	mvn.w	r2, #2
 800246a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f8ed 	bl	8002660 <HAL_TIM_IC_CaptureCallback>
 8002486:	e005      	b.n	8002494 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f8e0 	bl	800264e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f8ef 	bl	8002672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d122      	bne.n	80024ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d11b      	bne.n	80024ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f06f 0204 	mvn.w	r2, #4
 80024be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f8c3 	bl	8002660 <HAL_TIM_IC_CaptureCallback>
 80024da:	e005      	b.n	80024e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f8b6 	bl	800264e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f8c5 	bl	8002672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d122      	bne.n	8002542 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b08      	cmp	r3, #8
 8002508:	d11b      	bne.n	8002542 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f06f 0208 	mvn.w	r2, #8
 8002512:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2204      	movs	r2, #4
 8002518:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f899 	bl	8002660 <HAL_TIM_IC_CaptureCallback>
 800252e:	e005      	b.n	800253c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f88c 	bl	800264e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f89b 	bl	8002672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2b10      	cmp	r3, #16
 800254e:	d122      	bne.n	8002596 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b10      	cmp	r3, #16
 800255c:	d11b      	bne.n	8002596 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f06f 0210 	mvn.w	r2, #16
 8002566:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2208      	movs	r2, #8
 800256c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f86f 	bl	8002660 <HAL_TIM_IC_CaptureCallback>
 8002582:	e005      	b.n	8002590 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f862 	bl	800264e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f871 	bl	8002672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d10e      	bne.n	80025c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d107      	bne.n	80025c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f06f 0201 	mvn.w	r2, #1
 80025ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7fe f893 	bl	80006e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025cc:	2b80      	cmp	r3, #128	; 0x80
 80025ce:	d10e      	bne.n	80025ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025da:	2b80      	cmp	r3, #128	; 0x80
 80025dc:	d107      	bne.n	80025ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f8d8 	bl	800279e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f8:	2b40      	cmp	r3, #64	; 0x40
 80025fa:	d10e      	bne.n	800261a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002606:	2b40      	cmp	r3, #64	; 0x40
 8002608:	d107      	bne.n	800261a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f835 	bl	8002684 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	2b20      	cmp	r3, #32
 8002626:	d10e      	bne.n	8002646 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b20      	cmp	r3, #32
 8002634:	d107      	bne.n	8002646 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f06f 0220 	mvn.w	r2, #32
 800263e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f8a3 	bl	800278c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
	...

08002698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a33      	ldr	r2, [pc, #204]	; (8002778 <TIM_Base_SetConfig+0xe0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d013      	beq.n	80026d8 <TIM_Base_SetConfig+0x40>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a32      	ldr	r2, [pc, #200]	; (800277c <TIM_Base_SetConfig+0xe4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d00f      	beq.n	80026d8 <TIM_Base_SetConfig+0x40>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026be:	d00b      	beq.n	80026d8 <TIM_Base_SetConfig+0x40>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a2f      	ldr	r2, [pc, #188]	; (8002780 <TIM_Base_SetConfig+0xe8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d007      	beq.n	80026d8 <TIM_Base_SetConfig+0x40>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a2e      	ldr	r2, [pc, #184]	; (8002784 <TIM_Base_SetConfig+0xec>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d003      	beq.n	80026d8 <TIM_Base_SetConfig+0x40>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a2d      	ldr	r2, [pc, #180]	; (8002788 <TIM_Base_SetConfig+0xf0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d108      	bne.n	80026ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a22      	ldr	r2, [pc, #136]	; (8002778 <TIM_Base_SetConfig+0xe0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <TIM_Base_SetConfig+0x82>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a21      	ldr	r2, [pc, #132]	; (800277c <TIM_Base_SetConfig+0xe4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00f      	beq.n	800271a <TIM_Base_SetConfig+0x82>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002700:	d00b      	beq.n	800271a <TIM_Base_SetConfig+0x82>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a1e      	ldr	r2, [pc, #120]	; (8002780 <TIM_Base_SetConfig+0xe8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d007      	beq.n	800271a <TIM_Base_SetConfig+0x82>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a1d      	ldr	r2, [pc, #116]	; (8002784 <TIM_Base_SetConfig+0xec>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d003      	beq.n	800271a <TIM_Base_SetConfig+0x82>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a1c      	ldr	r2, [pc, #112]	; (8002788 <TIM_Base_SetConfig+0xf0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d108      	bne.n	800272c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a09      	ldr	r2, [pc, #36]	; (8002778 <TIM_Base_SetConfig+0xe0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d003      	beq.n	8002760 <TIM_Base_SetConfig+0xc8>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a08      	ldr	r2, [pc, #32]	; (800277c <TIM_Base_SetConfig+0xe4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d103      	bne.n	8002768 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	615a      	str	r2, [r3, #20]
}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr
 8002778:	40012c00 	.word	0x40012c00
 800277c:	40013400 	.word	0x40013400
 8002780:	40000400 	.word	0x40000400
 8002784:	40000800 	.word	0x40000800
 8002788:	40000c00 	.word	0x40000c00

0800278c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e03f      	b.n	8002842 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7fe f904 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2224      	movs	r2, #36	; 0x24
 80027e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f90b 	bl	8002a10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002818:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002828:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b088      	sub	sp, #32
 800284e:	af02      	add	r7, sp, #8
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	603b      	str	r3, [r7, #0]
 8002856:	4613      	mov	r3, r2
 8002858:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b20      	cmp	r3, #32
 8002868:	f040 8083 	bne.w	8002972 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_UART_Transmit+0x2e>
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e07b      	b.n	8002974 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_UART_Transmit+0x40>
 8002886:	2302      	movs	r3, #2
 8002888:	e074      	b.n	8002974 <HAL_UART_Transmit+0x12a>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2221      	movs	r2, #33	; 0x21
 800289c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028a0:	f7fe f93a 	bl	8000b18 <HAL_GetTick>
 80028a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	88fa      	ldrh	r2, [r7, #6]
 80028aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	88fa      	ldrh	r2, [r7, #6]
 80028b0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028b2:	e042      	b.n	800293a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ca:	d122      	bne.n	8002912 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2200      	movs	r2, #0
 80028d4:	2180      	movs	r1, #128	; 0x80
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f850 	bl	800297c <UART_WaitOnFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e046      	b.n	8002974 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028f8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d103      	bne.n	800290a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	3302      	adds	r3, #2
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	e017      	b.n	800293a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	3301      	adds	r3, #1
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	e013      	b.n	800293a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2200      	movs	r2, #0
 800291a:	2180      	movs	r1, #128	; 0x80
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f82d 	bl	800297c <UART_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e023      	b.n	8002974 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	60ba      	str	r2, [r7, #8]
 8002932:	781a      	ldrb	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800293e:	b29b      	uxth	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1b7      	bne.n	80028b4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2200      	movs	r2, #0
 800294c:	2140      	movs	r1, #64	; 0x40
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f814 	bl	800297c <UART_WaitOnFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e00a      	b.n	8002974 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	e000      	b.n	8002974 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002972:	2302      	movs	r3, #2
  }
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	4613      	mov	r3, r2
 800298a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800298c:	e02c      	b.n	80029e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d028      	beq.n	80029e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d007      	beq.n	80029ac <UART_WaitOnFlagUntilTimeout+0x30>
 800299c:	f7fe f8bc 	bl	8000b18 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d21d      	bcs.n	80029e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e00f      	b.n	8002a08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	4013      	ands	r3, r2
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d0c3      	beq.n	800298e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a4a:	f023 030c 	bic.w	r3, r3, #12
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	68f9      	ldr	r1, [r7, #12]
 8002a54:	430b      	orrs	r3, r1
 8002a56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699a      	ldr	r2, [r3, #24]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a52      	ldr	r2, [pc, #328]	; (8002bbc <UART_SetConfig+0x1ac>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d14e      	bne.n	8002b16 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a78:	f7ff fc0e 	bl	8002298 <HAL_RCC_GetPCLK2Freq>
 8002a7c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	009a      	lsls	r2, r3, #2
 8002a88:	441a      	add	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a94:	4a4a      	ldr	r2, [pc, #296]	; (8002bc0 <UART_SetConfig+0x1b0>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	0119      	lsls	r1, r3, #4
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009a      	lsls	r2, r3, #2
 8002aa8:	441a      	add	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ab4:	4b42      	ldr	r3, [pc, #264]	; (8002bc0 <UART_SetConfig+0x1b0>)
 8002ab6:	fba3 0302 	umull	r0, r3, r3, r2
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	2064      	movs	r0, #100	; 0x64
 8002abe:	fb00 f303 	mul.w	r3, r0, r3
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	3332      	adds	r3, #50	; 0x32
 8002ac8:	4a3d      	ldr	r2, [pc, #244]	; (8002bc0 <UART_SetConfig+0x1b0>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad4:	4419      	add	r1, r3
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	009a      	lsls	r2, r3, #2
 8002ae0:	441a      	add	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aec:	4b34      	ldr	r3, [pc, #208]	; (8002bc0 <UART_SetConfig+0x1b0>)
 8002aee:	fba3 0302 	umull	r0, r3, r3, r2
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2064      	movs	r0, #100	; 0x64
 8002af6:	fb00 f303 	mul.w	r3, r0, r3
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	3332      	adds	r3, #50	; 0x32
 8002b00:	4a2f      	ldr	r2, [pc, #188]	; (8002bc0 <UART_SetConfig+0x1b0>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	f003 020f 	and.w	r2, r3, #15
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	440a      	add	r2, r1
 8002b12:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002b14:	e04d      	b.n	8002bb2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b16:	f7ff fbab 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 8002b1a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	009a      	lsls	r2, r3, #2
 8002b26:	441a      	add	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b32:	4a23      	ldr	r2, [pc, #140]	; (8002bc0 <UART_SetConfig+0x1b0>)
 8002b34:	fba2 2303 	umull	r2, r3, r2, r3
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	0119      	lsls	r1, r3, #4
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	009a      	lsls	r2, r3, #2
 8002b46:	441a      	add	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b52:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <UART_SetConfig+0x1b0>)
 8002b54:	fba3 0302 	umull	r0, r3, r3, r2
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	2064      	movs	r0, #100	; 0x64
 8002b5c:	fb00 f303 	mul.w	r3, r0, r3
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	3332      	adds	r3, #50	; 0x32
 8002b66:	4a16      	ldr	r2, [pc, #88]	; (8002bc0 <UART_SetConfig+0x1b0>)
 8002b68:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b72:	4419      	add	r1, r3
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009a      	lsls	r2, r3, #2
 8002b7e:	441a      	add	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <UART_SetConfig+0x1b0>)
 8002b8c:	fba3 0302 	umull	r0, r3, r3, r2
 8002b90:	095b      	lsrs	r3, r3, #5
 8002b92:	2064      	movs	r0, #100	; 0x64
 8002b94:	fb00 f303 	mul.w	r3, r0, r3
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	3332      	adds	r3, #50	; 0x32
 8002b9e:	4a08      	ldr	r2, [pc, #32]	; (8002bc0 <UART_SetConfig+0x1b0>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	f003 020f 	and.w	r2, r3, #15
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	440a      	add	r2, r1
 8002bb0:	609a      	str	r2, [r3, #8]
}
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40013800 	.word	0x40013800
 8002bc0:	51eb851f 	.word	0x51eb851f

08002bc4 <__errno>:
 8002bc4:	4b01      	ldr	r3, [pc, #4]	; (8002bcc <__errno+0x8>)
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	2000000c 	.word	0x2000000c

08002bd0 <__libc_init_array>:
 8002bd0:	b570      	push	{r4, r5, r6, lr}
 8002bd2:	2500      	movs	r5, #0
 8002bd4:	4e0c      	ldr	r6, [pc, #48]	; (8002c08 <__libc_init_array+0x38>)
 8002bd6:	4c0d      	ldr	r4, [pc, #52]	; (8002c0c <__libc_init_array+0x3c>)
 8002bd8:	1ba4      	subs	r4, r4, r6
 8002bda:	10a4      	asrs	r4, r4, #2
 8002bdc:	42a5      	cmp	r5, r4
 8002bde:	d109      	bne.n	8002bf4 <__libc_init_array+0x24>
 8002be0:	f000 fc34 	bl	800344c <_init>
 8002be4:	2500      	movs	r5, #0
 8002be6:	4e0a      	ldr	r6, [pc, #40]	; (8002c10 <__libc_init_array+0x40>)
 8002be8:	4c0a      	ldr	r4, [pc, #40]	; (8002c14 <__libc_init_array+0x44>)
 8002bea:	1ba4      	subs	r4, r4, r6
 8002bec:	10a4      	asrs	r4, r4, #2
 8002bee:	42a5      	cmp	r5, r4
 8002bf0:	d105      	bne.n	8002bfe <__libc_init_array+0x2e>
 8002bf2:	bd70      	pop	{r4, r5, r6, pc}
 8002bf4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bf8:	4798      	blx	r3
 8002bfa:	3501      	adds	r5, #1
 8002bfc:	e7ee      	b.n	8002bdc <__libc_init_array+0xc>
 8002bfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c02:	4798      	blx	r3
 8002c04:	3501      	adds	r5, #1
 8002c06:	e7f2      	b.n	8002bee <__libc_init_array+0x1e>
 8002c08:	080034e4 	.word	0x080034e4
 8002c0c:	080034e4 	.word	0x080034e4
 8002c10:	080034e4 	.word	0x080034e4
 8002c14:	080034e8 	.word	0x080034e8

08002c18 <memset>:
 8002c18:	4603      	mov	r3, r0
 8002c1a:	4402      	add	r2, r0
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d100      	bne.n	8002c22 <memset+0xa>
 8002c20:	4770      	bx	lr
 8002c22:	f803 1b01 	strb.w	r1, [r3], #1
 8002c26:	e7f9      	b.n	8002c1c <memset+0x4>

08002c28 <_vsiprintf_r>:
 8002c28:	b500      	push	{lr}
 8002c2a:	b09b      	sub	sp, #108	; 0x6c
 8002c2c:	9100      	str	r1, [sp, #0]
 8002c2e:	9104      	str	r1, [sp, #16]
 8002c30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c34:	9105      	str	r1, [sp, #20]
 8002c36:	9102      	str	r1, [sp, #8]
 8002c38:	4905      	ldr	r1, [pc, #20]	; (8002c50 <_vsiprintf_r+0x28>)
 8002c3a:	9103      	str	r1, [sp, #12]
 8002c3c:	4669      	mov	r1, sp
 8002c3e:	f000 f86d 	bl	8002d1c <_svfiprintf_r>
 8002c42:	2200      	movs	r2, #0
 8002c44:	9b00      	ldr	r3, [sp, #0]
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	b01b      	add	sp, #108	; 0x6c
 8002c4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c4e:	bf00      	nop
 8002c50:	ffff0208 	.word	0xffff0208

08002c54 <vsiprintf>:
 8002c54:	4613      	mov	r3, r2
 8002c56:	460a      	mov	r2, r1
 8002c58:	4601      	mov	r1, r0
 8002c5a:	4802      	ldr	r0, [pc, #8]	; (8002c64 <vsiprintf+0x10>)
 8002c5c:	6800      	ldr	r0, [r0, #0]
 8002c5e:	f7ff bfe3 	b.w	8002c28 <_vsiprintf_r>
 8002c62:	bf00      	nop
 8002c64:	2000000c 	.word	0x2000000c

08002c68 <__ssputs_r>:
 8002c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c6c:	688e      	ldr	r6, [r1, #8]
 8002c6e:	4682      	mov	sl, r0
 8002c70:	429e      	cmp	r6, r3
 8002c72:	460c      	mov	r4, r1
 8002c74:	4690      	mov	r8, r2
 8002c76:	4699      	mov	r9, r3
 8002c78:	d837      	bhi.n	8002cea <__ssputs_r+0x82>
 8002c7a:	898a      	ldrh	r2, [r1, #12]
 8002c7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c80:	d031      	beq.n	8002ce6 <__ssputs_r+0x7e>
 8002c82:	2302      	movs	r3, #2
 8002c84:	6825      	ldr	r5, [r4, #0]
 8002c86:	6909      	ldr	r1, [r1, #16]
 8002c88:	1a6f      	subs	r7, r5, r1
 8002c8a:	6965      	ldr	r5, [r4, #20]
 8002c8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c90:	fb95 f5f3 	sdiv	r5, r5, r3
 8002c94:	f109 0301 	add.w	r3, r9, #1
 8002c98:	443b      	add	r3, r7
 8002c9a:	429d      	cmp	r5, r3
 8002c9c:	bf38      	it	cc
 8002c9e:	461d      	movcc	r5, r3
 8002ca0:	0553      	lsls	r3, r2, #21
 8002ca2:	d530      	bpl.n	8002d06 <__ssputs_r+0x9e>
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	f000 fb37 	bl	8003318 <_malloc_r>
 8002caa:	4606      	mov	r6, r0
 8002cac:	b950      	cbnz	r0, 8002cc4 <__ssputs_r+0x5c>
 8002cae:	230c      	movs	r3, #12
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb4:	f8ca 3000 	str.w	r3, [sl]
 8002cb8:	89a3      	ldrh	r3, [r4, #12]
 8002cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cbe:	81a3      	strh	r3, [r4, #12]
 8002cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cc4:	463a      	mov	r2, r7
 8002cc6:	6921      	ldr	r1, [r4, #16]
 8002cc8:	f000 fab6 	bl	8003238 <memcpy>
 8002ccc:	89a3      	ldrh	r3, [r4, #12]
 8002cce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd6:	81a3      	strh	r3, [r4, #12]
 8002cd8:	6126      	str	r6, [r4, #16]
 8002cda:	443e      	add	r6, r7
 8002cdc:	6026      	str	r6, [r4, #0]
 8002cde:	464e      	mov	r6, r9
 8002ce0:	6165      	str	r5, [r4, #20]
 8002ce2:	1bed      	subs	r5, r5, r7
 8002ce4:	60a5      	str	r5, [r4, #8]
 8002ce6:	454e      	cmp	r6, r9
 8002ce8:	d900      	bls.n	8002cec <__ssputs_r+0x84>
 8002cea:	464e      	mov	r6, r9
 8002cec:	4632      	mov	r2, r6
 8002cee:	4641      	mov	r1, r8
 8002cf0:	6820      	ldr	r0, [r4, #0]
 8002cf2:	f000 faac 	bl	800324e <memmove>
 8002cf6:	68a3      	ldr	r3, [r4, #8]
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	1b9b      	subs	r3, r3, r6
 8002cfc:	60a3      	str	r3, [r4, #8]
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	441e      	add	r6, r3
 8002d02:	6026      	str	r6, [r4, #0]
 8002d04:	e7dc      	b.n	8002cc0 <__ssputs_r+0x58>
 8002d06:	462a      	mov	r2, r5
 8002d08:	f000 fb60 	bl	80033cc <_realloc_r>
 8002d0c:	4606      	mov	r6, r0
 8002d0e:	2800      	cmp	r0, #0
 8002d10:	d1e2      	bne.n	8002cd8 <__ssputs_r+0x70>
 8002d12:	6921      	ldr	r1, [r4, #16]
 8002d14:	4650      	mov	r0, sl
 8002d16:	f000 fab3 	bl	8003280 <_free_r>
 8002d1a:	e7c8      	b.n	8002cae <__ssputs_r+0x46>

08002d1c <_svfiprintf_r>:
 8002d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d20:	461d      	mov	r5, r3
 8002d22:	898b      	ldrh	r3, [r1, #12]
 8002d24:	b09d      	sub	sp, #116	; 0x74
 8002d26:	061f      	lsls	r7, r3, #24
 8002d28:	4680      	mov	r8, r0
 8002d2a:	460c      	mov	r4, r1
 8002d2c:	4616      	mov	r6, r2
 8002d2e:	d50f      	bpl.n	8002d50 <_svfiprintf_r+0x34>
 8002d30:	690b      	ldr	r3, [r1, #16]
 8002d32:	b96b      	cbnz	r3, 8002d50 <_svfiprintf_r+0x34>
 8002d34:	2140      	movs	r1, #64	; 0x40
 8002d36:	f000 faef 	bl	8003318 <_malloc_r>
 8002d3a:	6020      	str	r0, [r4, #0]
 8002d3c:	6120      	str	r0, [r4, #16]
 8002d3e:	b928      	cbnz	r0, 8002d4c <_svfiprintf_r+0x30>
 8002d40:	230c      	movs	r3, #12
 8002d42:	f8c8 3000 	str.w	r3, [r8]
 8002d46:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4a:	e0c8      	b.n	8002ede <_svfiprintf_r+0x1c2>
 8002d4c:	2340      	movs	r3, #64	; 0x40
 8002d4e:	6163      	str	r3, [r4, #20]
 8002d50:	2300      	movs	r3, #0
 8002d52:	9309      	str	r3, [sp, #36]	; 0x24
 8002d54:	2320      	movs	r3, #32
 8002d56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d5a:	2330      	movs	r3, #48	; 0x30
 8002d5c:	f04f 0b01 	mov.w	fp, #1
 8002d60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d64:	9503      	str	r5, [sp, #12]
 8002d66:	4637      	mov	r7, r6
 8002d68:	463d      	mov	r5, r7
 8002d6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002d6e:	b10b      	cbz	r3, 8002d74 <_svfiprintf_r+0x58>
 8002d70:	2b25      	cmp	r3, #37	; 0x25
 8002d72:	d13e      	bne.n	8002df2 <_svfiprintf_r+0xd6>
 8002d74:	ebb7 0a06 	subs.w	sl, r7, r6
 8002d78:	d00b      	beq.n	8002d92 <_svfiprintf_r+0x76>
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	4632      	mov	r2, r6
 8002d7e:	4621      	mov	r1, r4
 8002d80:	4640      	mov	r0, r8
 8002d82:	f7ff ff71 	bl	8002c68 <__ssputs_r>
 8002d86:	3001      	adds	r0, #1
 8002d88:	f000 80a4 	beq.w	8002ed4 <_svfiprintf_r+0x1b8>
 8002d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d8e:	4453      	add	r3, sl
 8002d90:	9309      	str	r3, [sp, #36]	; 0x24
 8002d92:	783b      	ldrb	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 809d 	beq.w	8002ed4 <_svfiprintf_r+0x1b8>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002da0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002da4:	9304      	str	r3, [sp, #16]
 8002da6:	9307      	str	r3, [sp, #28]
 8002da8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dac:	931a      	str	r3, [sp, #104]	; 0x68
 8002dae:	462f      	mov	r7, r5
 8002db0:	2205      	movs	r2, #5
 8002db2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002db6:	4850      	ldr	r0, [pc, #320]	; (8002ef8 <_svfiprintf_r+0x1dc>)
 8002db8:	f000 fa30 	bl	800321c <memchr>
 8002dbc:	9b04      	ldr	r3, [sp, #16]
 8002dbe:	b9d0      	cbnz	r0, 8002df6 <_svfiprintf_r+0xda>
 8002dc0:	06d9      	lsls	r1, r3, #27
 8002dc2:	bf44      	itt	mi
 8002dc4:	2220      	movmi	r2, #32
 8002dc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002dca:	071a      	lsls	r2, r3, #28
 8002dcc:	bf44      	itt	mi
 8002dce:	222b      	movmi	r2, #43	; 0x2b
 8002dd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002dd4:	782a      	ldrb	r2, [r5, #0]
 8002dd6:	2a2a      	cmp	r2, #42	; 0x2a
 8002dd8:	d015      	beq.n	8002e06 <_svfiprintf_r+0xea>
 8002dda:	462f      	mov	r7, r5
 8002ddc:	2000      	movs	r0, #0
 8002dde:	250a      	movs	r5, #10
 8002de0:	9a07      	ldr	r2, [sp, #28]
 8002de2:	4639      	mov	r1, r7
 8002de4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002de8:	3b30      	subs	r3, #48	; 0x30
 8002dea:	2b09      	cmp	r3, #9
 8002dec:	d94d      	bls.n	8002e8a <_svfiprintf_r+0x16e>
 8002dee:	b1b8      	cbz	r0, 8002e20 <_svfiprintf_r+0x104>
 8002df0:	e00f      	b.n	8002e12 <_svfiprintf_r+0xf6>
 8002df2:	462f      	mov	r7, r5
 8002df4:	e7b8      	b.n	8002d68 <_svfiprintf_r+0x4c>
 8002df6:	4a40      	ldr	r2, [pc, #256]	; (8002ef8 <_svfiprintf_r+0x1dc>)
 8002df8:	463d      	mov	r5, r7
 8002dfa:	1a80      	subs	r0, r0, r2
 8002dfc:	fa0b f000 	lsl.w	r0, fp, r0
 8002e00:	4318      	orrs	r0, r3
 8002e02:	9004      	str	r0, [sp, #16]
 8002e04:	e7d3      	b.n	8002dae <_svfiprintf_r+0x92>
 8002e06:	9a03      	ldr	r2, [sp, #12]
 8002e08:	1d11      	adds	r1, r2, #4
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	9103      	str	r1, [sp, #12]
 8002e0e:	2a00      	cmp	r2, #0
 8002e10:	db01      	blt.n	8002e16 <_svfiprintf_r+0xfa>
 8002e12:	9207      	str	r2, [sp, #28]
 8002e14:	e004      	b.n	8002e20 <_svfiprintf_r+0x104>
 8002e16:	4252      	negs	r2, r2
 8002e18:	f043 0302 	orr.w	r3, r3, #2
 8002e1c:	9207      	str	r2, [sp, #28]
 8002e1e:	9304      	str	r3, [sp, #16]
 8002e20:	783b      	ldrb	r3, [r7, #0]
 8002e22:	2b2e      	cmp	r3, #46	; 0x2e
 8002e24:	d10c      	bne.n	8002e40 <_svfiprintf_r+0x124>
 8002e26:	787b      	ldrb	r3, [r7, #1]
 8002e28:	2b2a      	cmp	r3, #42	; 0x2a
 8002e2a:	d133      	bne.n	8002e94 <_svfiprintf_r+0x178>
 8002e2c:	9b03      	ldr	r3, [sp, #12]
 8002e2e:	3702      	adds	r7, #2
 8002e30:	1d1a      	adds	r2, r3, #4
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	9203      	str	r2, [sp, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	bfb8      	it	lt
 8002e3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e3e:	9305      	str	r3, [sp, #20]
 8002e40:	4d2e      	ldr	r5, [pc, #184]	; (8002efc <_svfiprintf_r+0x1e0>)
 8002e42:	2203      	movs	r2, #3
 8002e44:	7839      	ldrb	r1, [r7, #0]
 8002e46:	4628      	mov	r0, r5
 8002e48:	f000 f9e8 	bl	800321c <memchr>
 8002e4c:	b138      	cbz	r0, 8002e5e <_svfiprintf_r+0x142>
 8002e4e:	2340      	movs	r3, #64	; 0x40
 8002e50:	1b40      	subs	r0, r0, r5
 8002e52:	fa03 f000 	lsl.w	r0, r3, r0
 8002e56:	9b04      	ldr	r3, [sp, #16]
 8002e58:	3701      	adds	r7, #1
 8002e5a:	4303      	orrs	r3, r0
 8002e5c:	9304      	str	r3, [sp, #16]
 8002e5e:	7839      	ldrb	r1, [r7, #0]
 8002e60:	2206      	movs	r2, #6
 8002e62:	4827      	ldr	r0, [pc, #156]	; (8002f00 <_svfiprintf_r+0x1e4>)
 8002e64:	1c7e      	adds	r6, r7, #1
 8002e66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e6a:	f000 f9d7 	bl	800321c <memchr>
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	d038      	beq.n	8002ee4 <_svfiprintf_r+0x1c8>
 8002e72:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <_svfiprintf_r+0x1e8>)
 8002e74:	bb13      	cbnz	r3, 8002ebc <_svfiprintf_r+0x1a0>
 8002e76:	9b03      	ldr	r3, [sp, #12]
 8002e78:	3307      	adds	r3, #7
 8002e7a:	f023 0307 	bic.w	r3, r3, #7
 8002e7e:	3308      	adds	r3, #8
 8002e80:	9303      	str	r3, [sp, #12]
 8002e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e84:	444b      	add	r3, r9
 8002e86:	9309      	str	r3, [sp, #36]	; 0x24
 8002e88:	e76d      	b.n	8002d66 <_svfiprintf_r+0x4a>
 8002e8a:	fb05 3202 	mla	r2, r5, r2, r3
 8002e8e:	2001      	movs	r0, #1
 8002e90:	460f      	mov	r7, r1
 8002e92:	e7a6      	b.n	8002de2 <_svfiprintf_r+0xc6>
 8002e94:	2300      	movs	r3, #0
 8002e96:	250a      	movs	r5, #10
 8002e98:	4619      	mov	r1, r3
 8002e9a:	3701      	adds	r7, #1
 8002e9c:	9305      	str	r3, [sp, #20]
 8002e9e:	4638      	mov	r0, r7
 8002ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ea4:	3a30      	subs	r2, #48	; 0x30
 8002ea6:	2a09      	cmp	r2, #9
 8002ea8:	d903      	bls.n	8002eb2 <_svfiprintf_r+0x196>
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0c8      	beq.n	8002e40 <_svfiprintf_r+0x124>
 8002eae:	9105      	str	r1, [sp, #20]
 8002eb0:	e7c6      	b.n	8002e40 <_svfiprintf_r+0x124>
 8002eb2:	fb05 2101 	mla	r1, r5, r1, r2
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	4607      	mov	r7, r0
 8002eba:	e7f0      	b.n	8002e9e <_svfiprintf_r+0x182>
 8002ebc:	ab03      	add	r3, sp, #12
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	4622      	mov	r2, r4
 8002ec2:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <_svfiprintf_r+0x1ec>)
 8002ec4:	a904      	add	r1, sp, #16
 8002ec6:	4640      	mov	r0, r8
 8002ec8:	f3af 8000 	nop.w
 8002ecc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002ed0:	4681      	mov	r9, r0
 8002ed2:	d1d6      	bne.n	8002e82 <_svfiprintf_r+0x166>
 8002ed4:	89a3      	ldrh	r3, [r4, #12]
 8002ed6:	065b      	lsls	r3, r3, #25
 8002ed8:	f53f af35 	bmi.w	8002d46 <_svfiprintf_r+0x2a>
 8002edc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ede:	b01d      	add	sp, #116	; 0x74
 8002ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ee4:	ab03      	add	r3, sp, #12
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	4622      	mov	r2, r4
 8002eea:	4b07      	ldr	r3, [pc, #28]	; (8002f08 <_svfiprintf_r+0x1ec>)
 8002eec:	a904      	add	r1, sp, #16
 8002eee:	4640      	mov	r0, r8
 8002ef0:	f000 f882 	bl	8002ff8 <_printf_i>
 8002ef4:	e7ea      	b.n	8002ecc <_svfiprintf_r+0x1b0>
 8002ef6:	bf00      	nop
 8002ef8:	080034b0 	.word	0x080034b0
 8002efc:	080034b6 	.word	0x080034b6
 8002f00:	080034ba 	.word	0x080034ba
 8002f04:	00000000 	.word	0x00000000
 8002f08:	08002c69 	.word	0x08002c69

08002f0c <_printf_common>:
 8002f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f10:	4691      	mov	r9, r2
 8002f12:	461f      	mov	r7, r3
 8002f14:	688a      	ldr	r2, [r1, #8]
 8002f16:	690b      	ldr	r3, [r1, #16]
 8002f18:	4606      	mov	r6, r0
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	bfb8      	it	lt
 8002f1e:	4613      	movlt	r3, r2
 8002f20:	f8c9 3000 	str.w	r3, [r9]
 8002f24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f28:	460c      	mov	r4, r1
 8002f2a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f2e:	b112      	cbz	r2, 8002f36 <_printf_common+0x2a>
 8002f30:	3301      	adds	r3, #1
 8002f32:	f8c9 3000 	str.w	r3, [r9]
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	0699      	lsls	r1, r3, #26
 8002f3a:	bf42      	ittt	mi
 8002f3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002f40:	3302      	addmi	r3, #2
 8002f42:	f8c9 3000 	strmi.w	r3, [r9]
 8002f46:	6825      	ldr	r5, [r4, #0]
 8002f48:	f015 0506 	ands.w	r5, r5, #6
 8002f4c:	d107      	bne.n	8002f5e <_printf_common+0x52>
 8002f4e:	f104 0a19 	add.w	sl, r4, #25
 8002f52:	68e3      	ldr	r3, [r4, #12]
 8002f54:	f8d9 2000 	ldr.w	r2, [r9]
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	42ab      	cmp	r3, r5
 8002f5c:	dc29      	bgt.n	8002fb2 <_printf_common+0xa6>
 8002f5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002f62:	6822      	ldr	r2, [r4, #0]
 8002f64:	3300      	adds	r3, #0
 8002f66:	bf18      	it	ne
 8002f68:	2301      	movne	r3, #1
 8002f6a:	0692      	lsls	r2, r2, #26
 8002f6c:	d42e      	bmi.n	8002fcc <_printf_common+0xc0>
 8002f6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f72:	4639      	mov	r1, r7
 8002f74:	4630      	mov	r0, r6
 8002f76:	47c0      	blx	r8
 8002f78:	3001      	adds	r0, #1
 8002f7a:	d021      	beq.n	8002fc0 <_printf_common+0xb4>
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	68e5      	ldr	r5, [r4, #12]
 8002f80:	f003 0306 	and.w	r3, r3, #6
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	bf18      	it	ne
 8002f88:	2500      	movne	r5, #0
 8002f8a:	f8d9 2000 	ldr.w	r2, [r9]
 8002f8e:	f04f 0900 	mov.w	r9, #0
 8002f92:	bf08      	it	eq
 8002f94:	1aad      	subeq	r5, r5, r2
 8002f96:	68a3      	ldr	r3, [r4, #8]
 8002f98:	6922      	ldr	r2, [r4, #16]
 8002f9a:	bf08      	it	eq
 8002f9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	bfc4      	itt	gt
 8002fa4:	1a9b      	subgt	r3, r3, r2
 8002fa6:	18ed      	addgt	r5, r5, r3
 8002fa8:	341a      	adds	r4, #26
 8002faa:	454d      	cmp	r5, r9
 8002fac:	d11a      	bne.n	8002fe4 <_printf_common+0xd8>
 8002fae:	2000      	movs	r0, #0
 8002fb0:	e008      	b.n	8002fc4 <_printf_common+0xb8>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	4652      	mov	r2, sl
 8002fb6:	4639      	mov	r1, r7
 8002fb8:	4630      	mov	r0, r6
 8002fba:	47c0      	blx	r8
 8002fbc:	3001      	adds	r0, #1
 8002fbe:	d103      	bne.n	8002fc8 <_printf_common+0xbc>
 8002fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fc8:	3501      	adds	r5, #1
 8002fca:	e7c2      	b.n	8002f52 <_printf_common+0x46>
 8002fcc:	2030      	movs	r0, #48	; 0x30
 8002fce:	18e1      	adds	r1, r4, r3
 8002fd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fda:	4422      	add	r2, r4
 8002fdc:	3302      	adds	r3, #2
 8002fde:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fe2:	e7c4      	b.n	8002f6e <_printf_common+0x62>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	4622      	mov	r2, r4
 8002fe8:	4639      	mov	r1, r7
 8002fea:	4630      	mov	r0, r6
 8002fec:	47c0      	blx	r8
 8002fee:	3001      	adds	r0, #1
 8002ff0:	d0e6      	beq.n	8002fc0 <_printf_common+0xb4>
 8002ff2:	f109 0901 	add.w	r9, r9, #1
 8002ff6:	e7d8      	b.n	8002faa <_printf_common+0x9e>

08002ff8 <_printf_i>:
 8002ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ffc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003000:	460c      	mov	r4, r1
 8003002:	7e09      	ldrb	r1, [r1, #24]
 8003004:	b085      	sub	sp, #20
 8003006:	296e      	cmp	r1, #110	; 0x6e
 8003008:	4617      	mov	r7, r2
 800300a:	4606      	mov	r6, r0
 800300c:	4698      	mov	r8, r3
 800300e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003010:	f000 80b3 	beq.w	800317a <_printf_i+0x182>
 8003014:	d822      	bhi.n	800305c <_printf_i+0x64>
 8003016:	2963      	cmp	r1, #99	; 0x63
 8003018:	d036      	beq.n	8003088 <_printf_i+0x90>
 800301a:	d80a      	bhi.n	8003032 <_printf_i+0x3a>
 800301c:	2900      	cmp	r1, #0
 800301e:	f000 80b9 	beq.w	8003194 <_printf_i+0x19c>
 8003022:	2958      	cmp	r1, #88	; 0x58
 8003024:	f000 8083 	beq.w	800312e <_printf_i+0x136>
 8003028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800302c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003030:	e032      	b.n	8003098 <_printf_i+0xa0>
 8003032:	2964      	cmp	r1, #100	; 0x64
 8003034:	d001      	beq.n	800303a <_printf_i+0x42>
 8003036:	2969      	cmp	r1, #105	; 0x69
 8003038:	d1f6      	bne.n	8003028 <_printf_i+0x30>
 800303a:	6820      	ldr	r0, [r4, #0]
 800303c:	6813      	ldr	r3, [r2, #0]
 800303e:	0605      	lsls	r5, r0, #24
 8003040:	f103 0104 	add.w	r1, r3, #4
 8003044:	d52a      	bpl.n	800309c <_printf_i+0xa4>
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6011      	str	r1, [r2, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	da03      	bge.n	8003056 <_printf_i+0x5e>
 800304e:	222d      	movs	r2, #45	; 0x2d
 8003050:	425b      	negs	r3, r3
 8003052:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003056:	486f      	ldr	r0, [pc, #444]	; (8003214 <_printf_i+0x21c>)
 8003058:	220a      	movs	r2, #10
 800305a:	e039      	b.n	80030d0 <_printf_i+0xd8>
 800305c:	2973      	cmp	r1, #115	; 0x73
 800305e:	f000 809d 	beq.w	800319c <_printf_i+0x1a4>
 8003062:	d808      	bhi.n	8003076 <_printf_i+0x7e>
 8003064:	296f      	cmp	r1, #111	; 0x6f
 8003066:	d020      	beq.n	80030aa <_printf_i+0xb2>
 8003068:	2970      	cmp	r1, #112	; 0x70
 800306a:	d1dd      	bne.n	8003028 <_printf_i+0x30>
 800306c:	6823      	ldr	r3, [r4, #0]
 800306e:	f043 0320 	orr.w	r3, r3, #32
 8003072:	6023      	str	r3, [r4, #0]
 8003074:	e003      	b.n	800307e <_printf_i+0x86>
 8003076:	2975      	cmp	r1, #117	; 0x75
 8003078:	d017      	beq.n	80030aa <_printf_i+0xb2>
 800307a:	2978      	cmp	r1, #120	; 0x78
 800307c:	d1d4      	bne.n	8003028 <_printf_i+0x30>
 800307e:	2378      	movs	r3, #120	; 0x78
 8003080:	4865      	ldr	r0, [pc, #404]	; (8003218 <_printf_i+0x220>)
 8003082:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003086:	e055      	b.n	8003134 <_printf_i+0x13c>
 8003088:	6813      	ldr	r3, [r2, #0]
 800308a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800308e:	1d19      	adds	r1, r3, #4
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6011      	str	r1, [r2, #0]
 8003094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003098:	2301      	movs	r3, #1
 800309a:	e08c      	b.n	80031b6 <_printf_i+0x1be>
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030a2:	6011      	str	r1, [r2, #0]
 80030a4:	bf18      	it	ne
 80030a6:	b21b      	sxthne	r3, r3
 80030a8:	e7cf      	b.n	800304a <_printf_i+0x52>
 80030aa:	6813      	ldr	r3, [r2, #0]
 80030ac:	6825      	ldr	r5, [r4, #0]
 80030ae:	1d18      	adds	r0, r3, #4
 80030b0:	6010      	str	r0, [r2, #0]
 80030b2:	0628      	lsls	r0, r5, #24
 80030b4:	d501      	bpl.n	80030ba <_printf_i+0xc2>
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	e002      	b.n	80030c0 <_printf_i+0xc8>
 80030ba:	0668      	lsls	r0, r5, #25
 80030bc:	d5fb      	bpl.n	80030b6 <_printf_i+0xbe>
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	296f      	cmp	r1, #111	; 0x6f
 80030c2:	bf14      	ite	ne
 80030c4:	220a      	movne	r2, #10
 80030c6:	2208      	moveq	r2, #8
 80030c8:	4852      	ldr	r0, [pc, #328]	; (8003214 <_printf_i+0x21c>)
 80030ca:	2100      	movs	r1, #0
 80030cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030d0:	6865      	ldr	r5, [r4, #4]
 80030d2:	2d00      	cmp	r5, #0
 80030d4:	60a5      	str	r5, [r4, #8]
 80030d6:	f2c0 8095 	blt.w	8003204 <_printf_i+0x20c>
 80030da:	6821      	ldr	r1, [r4, #0]
 80030dc:	f021 0104 	bic.w	r1, r1, #4
 80030e0:	6021      	str	r1, [r4, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d13d      	bne.n	8003162 <_printf_i+0x16a>
 80030e6:	2d00      	cmp	r5, #0
 80030e8:	f040 808e 	bne.w	8003208 <_printf_i+0x210>
 80030ec:	4665      	mov	r5, ip
 80030ee:	2a08      	cmp	r2, #8
 80030f0:	d10b      	bne.n	800310a <_printf_i+0x112>
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	07db      	lsls	r3, r3, #31
 80030f6:	d508      	bpl.n	800310a <_printf_i+0x112>
 80030f8:	6923      	ldr	r3, [r4, #16]
 80030fa:	6862      	ldr	r2, [r4, #4]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	bfde      	ittt	le
 8003100:	2330      	movle	r3, #48	; 0x30
 8003102:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003106:	f105 35ff 	addle.w	r5, r5, #4294967295
 800310a:	ebac 0305 	sub.w	r3, ip, r5
 800310e:	6123      	str	r3, [r4, #16]
 8003110:	f8cd 8000 	str.w	r8, [sp]
 8003114:	463b      	mov	r3, r7
 8003116:	aa03      	add	r2, sp, #12
 8003118:	4621      	mov	r1, r4
 800311a:	4630      	mov	r0, r6
 800311c:	f7ff fef6 	bl	8002f0c <_printf_common>
 8003120:	3001      	adds	r0, #1
 8003122:	d14d      	bne.n	80031c0 <_printf_i+0x1c8>
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	b005      	add	sp, #20
 800312a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800312e:	4839      	ldr	r0, [pc, #228]	; (8003214 <_printf_i+0x21c>)
 8003130:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003134:	6813      	ldr	r3, [r2, #0]
 8003136:	6821      	ldr	r1, [r4, #0]
 8003138:	1d1d      	adds	r5, r3, #4
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6015      	str	r5, [r2, #0]
 800313e:	060a      	lsls	r2, r1, #24
 8003140:	d50b      	bpl.n	800315a <_printf_i+0x162>
 8003142:	07ca      	lsls	r2, r1, #31
 8003144:	bf44      	itt	mi
 8003146:	f041 0120 	orrmi.w	r1, r1, #32
 800314a:	6021      	strmi	r1, [r4, #0]
 800314c:	b91b      	cbnz	r3, 8003156 <_printf_i+0x15e>
 800314e:	6822      	ldr	r2, [r4, #0]
 8003150:	f022 0220 	bic.w	r2, r2, #32
 8003154:	6022      	str	r2, [r4, #0]
 8003156:	2210      	movs	r2, #16
 8003158:	e7b7      	b.n	80030ca <_printf_i+0xd2>
 800315a:	064d      	lsls	r5, r1, #25
 800315c:	bf48      	it	mi
 800315e:	b29b      	uxthmi	r3, r3
 8003160:	e7ef      	b.n	8003142 <_printf_i+0x14a>
 8003162:	4665      	mov	r5, ip
 8003164:	fbb3 f1f2 	udiv	r1, r3, r2
 8003168:	fb02 3311 	mls	r3, r2, r1, r3
 800316c:	5cc3      	ldrb	r3, [r0, r3]
 800316e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003172:	460b      	mov	r3, r1
 8003174:	2900      	cmp	r1, #0
 8003176:	d1f5      	bne.n	8003164 <_printf_i+0x16c>
 8003178:	e7b9      	b.n	80030ee <_printf_i+0xf6>
 800317a:	6813      	ldr	r3, [r2, #0]
 800317c:	6825      	ldr	r5, [r4, #0]
 800317e:	1d18      	adds	r0, r3, #4
 8003180:	6961      	ldr	r1, [r4, #20]
 8003182:	6010      	str	r0, [r2, #0]
 8003184:	0628      	lsls	r0, r5, #24
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	d501      	bpl.n	800318e <_printf_i+0x196>
 800318a:	6019      	str	r1, [r3, #0]
 800318c:	e002      	b.n	8003194 <_printf_i+0x19c>
 800318e:	066a      	lsls	r2, r5, #25
 8003190:	d5fb      	bpl.n	800318a <_printf_i+0x192>
 8003192:	8019      	strh	r1, [r3, #0]
 8003194:	2300      	movs	r3, #0
 8003196:	4665      	mov	r5, ip
 8003198:	6123      	str	r3, [r4, #16]
 800319a:	e7b9      	b.n	8003110 <_printf_i+0x118>
 800319c:	6813      	ldr	r3, [r2, #0]
 800319e:	1d19      	adds	r1, r3, #4
 80031a0:	6011      	str	r1, [r2, #0]
 80031a2:	681d      	ldr	r5, [r3, #0]
 80031a4:	6862      	ldr	r2, [r4, #4]
 80031a6:	2100      	movs	r1, #0
 80031a8:	4628      	mov	r0, r5
 80031aa:	f000 f837 	bl	800321c <memchr>
 80031ae:	b108      	cbz	r0, 80031b4 <_printf_i+0x1bc>
 80031b0:	1b40      	subs	r0, r0, r5
 80031b2:	6060      	str	r0, [r4, #4]
 80031b4:	6863      	ldr	r3, [r4, #4]
 80031b6:	6123      	str	r3, [r4, #16]
 80031b8:	2300      	movs	r3, #0
 80031ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031be:	e7a7      	b.n	8003110 <_printf_i+0x118>
 80031c0:	6923      	ldr	r3, [r4, #16]
 80031c2:	462a      	mov	r2, r5
 80031c4:	4639      	mov	r1, r7
 80031c6:	4630      	mov	r0, r6
 80031c8:	47c0      	blx	r8
 80031ca:	3001      	adds	r0, #1
 80031cc:	d0aa      	beq.n	8003124 <_printf_i+0x12c>
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	079b      	lsls	r3, r3, #30
 80031d2:	d413      	bmi.n	80031fc <_printf_i+0x204>
 80031d4:	68e0      	ldr	r0, [r4, #12]
 80031d6:	9b03      	ldr	r3, [sp, #12]
 80031d8:	4298      	cmp	r0, r3
 80031da:	bfb8      	it	lt
 80031dc:	4618      	movlt	r0, r3
 80031de:	e7a3      	b.n	8003128 <_printf_i+0x130>
 80031e0:	2301      	movs	r3, #1
 80031e2:	464a      	mov	r2, r9
 80031e4:	4639      	mov	r1, r7
 80031e6:	4630      	mov	r0, r6
 80031e8:	47c0      	blx	r8
 80031ea:	3001      	adds	r0, #1
 80031ec:	d09a      	beq.n	8003124 <_printf_i+0x12c>
 80031ee:	3501      	adds	r5, #1
 80031f0:	68e3      	ldr	r3, [r4, #12]
 80031f2:	9a03      	ldr	r2, [sp, #12]
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	42ab      	cmp	r3, r5
 80031f8:	dcf2      	bgt.n	80031e0 <_printf_i+0x1e8>
 80031fa:	e7eb      	b.n	80031d4 <_printf_i+0x1dc>
 80031fc:	2500      	movs	r5, #0
 80031fe:	f104 0919 	add.w	r9, r4, #25
 8003202:	e7f5      	b.n	80031f0 <_printf_i+0x1f8>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1ac      	bne.n	8003162 <_printf_i+0x16a>
 8003208:	7803      	ldrb	r3, [r0, #0]
 800320a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800320e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003212:	e76c      	b.n	80030ee <_printf_i+0xf6>
 8003214:	080034c1 	.word	0x080034c1
 8003218:	080034d2 	.word	0x080034d2

0800321c <memchr>:
 800321c:	b510      	push	{r4, lr}
 800321e:	b2c9      	uxtb	r1, r1
 8003220:	4402      	add	r2, r0
 8003222:	4290      	cmp	r0, r2
 8003224:	4603      	mov	r3, r0
 8003226:	d101      	bne.n	800322c <memchr+0x10>
 8003228:	2300      	movs	r3, #0
 800322a:	e003      	b.n	8003234 <memchr+0x18>
 800322c:	781c      	ldrb	r4, [r3, #0]
 800322e:	3001      	adds	r0, #1
 8003230:	428c      	cmp	r4, r1
 8003232:	d1f6      	bne.n	8003222 <memchr+0x6>
 8003234:	4618      	mov	r0, r3
 8003236:	bd10      	pop	{r4, pc}

08003238 <memcpy>:
 8003238:	b510      	push	{r4, lr}
 800323a:	1e43      	subs	r3, r0, #1
 800323c:	440a      	add	r2, r1
 800323e:	4291      	cmp	r1, r2
 8003240:	d100      	bne.n	8003244 <memcpy+0xc>
 8003242:	bd10      	pop	{r4, pc}
 8003244:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003248:	f803 4f01 	strb.w	r4, [r3, #1]!
 800324c:	e7f7      	b.n	800323e <memcpy+0x6>

0800324e <memmove>:
 800324e:	4288      	cmp	r0, r1
 8003250:	b510      	push	{r4, lr}
 8003252:	eb01 0302 	add.w	r3, r1, r2
 8003256:	d807      	bhi.n	8003268 <memmove+0x1a>
 8003258:	1e42      	subs	r2, r0, #1
 800325a:	4299      	cmp	r1, r3
 800325c:	d00a      	beq.n	8003274 <memmove+0x26>
 800325e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003262:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003266:	e7f8      	b.n	800325a <memmove+0xc>
 8003268:	4283      	cmp	r3, r0
 800326a:	d9f5      	bls.n	8003258 <memmove+0xa>
 800326c:	1881      	adds	r1, r0, r2
 800326e:	1ad2      	subs	r2, r2, r3
 8003270:	42d3      	cmn	r3, r2
 8003272:	d100      	bne.n	8003276 <memmove+0x28>
 8003274:	bd10      	pop	{r4, pc}
 8003276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800327a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800327e:	e7f7      	b.n	8003270 <memmove+0x22>

08003280 <_free_r>:
 8003280:	b538      	push	{r3, r4, r5, lr}
 8003282:	4605      	mov	r5, r0
 8003284:	2900      	cmp	r1, #0
 8003286:	d043      	beq.n	8003310 <_free_r+0x90>
 8003288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800328c:	1f0c      	subs	r4, r1, #4
 800328e:	2b00      	cmp	r3, #0
 8003290:	bfb8      	it	lt
 8003292:	18e4      	addlt	r4, r4, r3
 8003294:	f000 f8d0 	bl	8003438 <__malloc_lock>
 8003298:	4a1e      	ldr	r2, [pc, #120]	; (8003314 <_free_r+0x94>)
 800329a:	6813      	ldr	r3, [r2, #0]
 800329c:	4610      	mov	r0, r2
 800329e:	b933      	cbnz	r3, 80032ae <_free_r+0x2e>
 80032a0:	6063      	str	r3, [r4, #4]
 80032a2:	6014      	str	r4, [r2, #0]
 80032a4:	4628      	mov	r0, r5
 80032a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032aa:	f000 b8c6 	b.w	800343a <__malloc_unlock>
 80032ae:	42a3      	cmp	r3, r4
 80032b0:	d90b      	bls.n	80032ca <_free_r+0x4a>
 80032b2:	6821      	ldr	r1, [r4, #0]
 80032b4:	1862      	adds	r2, r4, r1
 80032b6:	4293      	cmp	r3, r2
 80032b8:	bf01      	itttt	eq
 80032ba:	681a      	ldreq	r2, [r3, #0]
 80032bc:	685b      	ldreq	r3, [r3, #4]
 80032be:	1852      	addeq	r2, r2, r1
 80032c0:	6022      	streq	r2, [r4, #0]
 80032c2:	6063      	str	r3, [r4, #4]
 80032c4:	6004      	str	r4, [r0, #0]
 80032c6:	e7ed      	b.n	80032a4 <_free_r+0x24>
 80032c8:	4613      	mov	r3, r2
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	b10a      	cbz	r2, 80032d2 <_free_r+0x52>
 80032ce:	42a2      	cmp	r2, r4
 80032d0:	d9fa      	bls.n	80032c8 <_free_r+0x48>
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	1858      	adds	r0, r3, r1
 80032d6:	42a0      	cmp	r0, r4
 80032d8:	d10b      	bne.n	80032f2 <_free_r+0x72>
 80032da:	6820      	ldr	r0, [r4, #0]
 80032dc:	4401      	add	r1, r0
 80032de:	1858      	adds	r0, r3, r1
 80032e0:	4282      	cmp	r2, r0
 80032e2:	6019      	str	r1, [r3, #0]
 80032e4:	d1de      	bne.n	80032a4 <_free_r+0x24>
 80032e6:	6810      	ldr	r0, [r2, #0]
 80032e8:	6852      	ldr	r2, [r2, #4]
 80032ea:	4401      	add	r1, r0
 80032ec:	6019      	str	r1, [r3, #0]
 80032ee:	605a      	str	r2, [r3, #4]
 80032f0:	e7d8      	b.n	80032a4 <_free_r+0x24>
 80032f2:	d902      	bls.n	80032fa <_free_r+0x7a>
 80032f4:	230c      	movs	r3, #12
 80032f6:	602b      	str	r3, [r5, #0]
 80032f8:	e7d4      	b.n	80032a4 <_free_r+0x24>
 80032fa:	6820      	ldr	r0, [r4, #0]
 80032fc:	1821      	adds	r1, r4, r0
 80032fe:	428a      	cmp	r2, r1
 8003300:	bf01      	itttt	eq
 8003302:	6811      	ldreq	r1, [r2, #0]
 8003304:	6852      	ldreq	r2, [r2, #4]
 8003306:	1809      	addeq	r1, r1, r0
 8003308:	6021      	streq	r1, [r4, #0]
 800330a:	6062      	str	r2, [r4, #4]
 800330c:	605c      	str	r4, [r3, #4]
 800330e:	e7c9      	b.n	80032a4 <_free_r+0x24>
 8003310:	bd38      	pop	{r3, r4, r5, pc}
 8003312:	bf00      	nop
 8003314:	20000168 	.word	0x20000168

08003318 <_malloc_r>:
 8003318:	b570      	push	{r4, r5, r6, lr}
 800331a:	1ccd      	adds	r5, r1, #3
 800331c:	f025 0503 	bic.w	r5, r5, #3
 8003320:	3508      	adds	r5, #8
 8003322:	2d0c      	cmp	r5, #12
 8003324:	bf38      	it	cc
 8003326:	250c      	movcc	r5, #12
 8003328:	2d00      	cmp	r5, #0
 800332a:	4606      	mov	r6, r0
 800332c:	db01      	blt.n	8003332 <_malloc_r+0x1a>
 800332e:	42a9      	cmp	r1, r5
 8003330:	d903      	bls.n	800333a <_malloc_r+0x22>
 8003332:	230c      	movs	r3, #12
 8003334:	6033      	str	r3, [r6, #0]
 8003336:	2000      	movs	r0, #0
 8003338:	bd70      	pop	{r4, r5, r6, pc}
 800333a:	f000 f87d 	bl	8003438 <__malloc_lock>
 800333e:	4a21      	ldr	r2, [pc, #132]	; (80033c4 <_malloc_r+0xac>)
 8003340:	6814      	ldr	r4, [r2, #0]
 8003342:	4621      	mov	r1, r4
 8003344:	b991      	cbnz	r1, 800336c <_malloc_r+0x54>
 8003346:	4c20      	ldr	r4, [pc, #128]	; (80033c8 <_malloc_r+0xb0>)
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	b91b      	cbnz	r3, 8003354 <_malloc_r+0x3c>
 800334c:	4630      	mov	r0, r6
 800334e:	f000 f863 	bl	8003418 <_sbrk_r>
 8003352:	6020      	str	r0, [r4, #0]
 8003354:	4629      	mov	r1, r5
 8003356:	4630      	mov	r0, r6
 8003358:	f000 f85e 	bl	8003418 <_sbrk_r>
 800335c:	1c43      	adds	r3, r0, #1
 800335e:	d124      	bne.n	80033aa <_malloc_r+0x92>
 8003360:	230c      	movs	r3, #12
 8003362:	4630      	mov	r0, r6
 8003364:	6033      	str	r3, [r6, #0]
 8003366:	f000 f868 	bl	800343a <__malloc_unlock>
 800336a:	e7e4      	b.n	8003336 <_malloc_r+0x1e>
 800336c:	680b      	ldr	r3, [r1, #0]
 800336e:	1b5b      	subs	r3, r3, r5
 8003370:	d418      	bmi.n	80033a4 <_malloc_r+0x8c>
 8003372:	2b0b      	cmp	r3, #11
 8003374:	d90f      	bls.n	8003396 <_malloc_r+0x7e>
 8003376:	600b      	str	r3, [r1, #0]
 8003378:	18cc      	adds	r4, r1, r3
 800337a:	50cd      	str	r5, [r1, r3]
 800337c:	4630      	mov	r0, r6
 800337e:	f000 f85c 	bl	800343a <__malloc_unlock>
 8003382:	f104 000b 	add.w	r0, r4, #11
 8003386:	1d23      	adds	r3, r4, #4
 8003388:	f020 0007 	bic.w	r0, r0, #7
 800338c:	1ac3      	subs	r3, r0, r3
 800338e:	d0d3      	beq.n	8003338 <_malloc_r+0x20>
 8003390:	425a      	negs	r2, r3
 8003392:	50e2      	str	r2, [r4, r3]
 8003394:	e7d0      	b.n	8003338 <_malloc_r+0x20>
 8003396:	684b      	ldr	r3, [r1, #4]
 8003398:	428c      	cmp	r4, r1
 800339a:	bf16      	itet	ne
 800339c:	6063      	strne	r3, [r4, #4]
 800339e:	6013      	streq	r3, [r2, #0]
 80033a0:	460c      	movne	r4, r1
 80033a2:	e7eb      	b.n	800337c <_malloc_r+0x64>
 80033a4:	460c      	mov	r4, r1
 80033a6:	6849      	ldr	r1, [r1, #4]
 80033a8:	e7cc      	b.n	8003344 <_malloc_r+0x2c>
 80033aa:	1cc4      	adds	r4, r0, #3
 80033ac:	f024 0403 	bic.w	r4, r4, #3
 80033b0:	42a0      	cmp	r0, r4
 80033b2:	d005      	beq.n	80033c0 <_malloc_r+0xa8>
 80033b4:	1a21      	subs	r1, r4, r0
 80033b6:	4630      	mov	r0, r6
 80033b8:	f000 f82e 	bl	8003418 <_sbrk_r>
 80033bc:	3001      	adds	r0, #1
 80033be:	d0cf      	beq.n	8003360 <_malloc_r+0x48>
 80033c0:	6025      	str	r5, [r4, #0]
 80033c2:	e7db      	b.n	800337c <_malloc_r+0x64>
 80033c4:	20000168 	.word	0x20000168
 80033c8:	2000016c 	.word	0x2000016c

080033cc <_realloc_r>:
 80033cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ce:	4607      	mov	r7, r0
 80033d0:	4614      	mov	r4, r2
 80033d2:	460e      	mov	r6, r1
 80033d4:	b921      	cbnz	r1, 80033e0 <_realloc_r+0x14>
 80033d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80033da:	4611      	mov	r1, r2
 80033dc:	f7ff bf9c 	b.w	8003318 <_malloc_r>
 80033e0:	b922      	cbnz	r2, 80033ec <_realloc_r+0x20>
 80033e2:	f7ff ff4d 	bl	8003280 <_free_r>
 80033e6:	4625      	mov	r5, r4
 80033e8:	4628      	mov	r0, r5
 80033ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ec:	f000 f826 	bl	800343c <_malloc_usable_size_r>
 80033f0:	42a0      	cmp	r0, r4
 80033f2:	d20f      	bcs.n	8003414 <_realloc_r+0x48>
 80033f4:	4621      	mov	r1, r4
 80033f6:	4638      	mov	r0, r7
 80033f8:	f7ff ff8e 	bl	8003318 <_malloc_r>
 80033fc:	4605      	mov	r5, r0
 80033fe:	2800      	cmp	r0, #0
 8003400:	d0f2      	beq.n	80033e8 <_realloc_r+0x1c>
 8003402:	4631      	mov	r1, r6
 8003404:	4622      	mov	r2, r4
 8003406:	f7ff ff17 	bl	8003238 <memcpy>
 800340a:	4631      	mov	r1, r6
 800340c:	4638      	mov	r0, r7
 800340e:	f7ff ff37 	bl	8003280 <_free_r>
 8003412:	e7e9      	b.n	80033e8 <_realloc_r+0x1c>
 8003414:	4635      	mov	r5, r6
 8003416:	e7e7      	b.n	80033e8 <_realloc_r+0x1c>

08003418 <_sbrk_r>:
 8003418:	b538      	push	{r3, r4, r5, lr}
 800341a:	2300      	movs	r3, #0
 800341c:	4c05      	ldr	r4, [pc, #20]	; (8003434 <_sbrk_r+0x1c>)
 800341e:	4605      	mov	r5, r0
 8003420:	4608      	mov	r0, r1
 8003422:	6023      	str	r3, [r4, #0]
 8003424:	f7fd fa4a 	bl	80008bc <_sbrk>
 8003428:	1c43      	adds	r3, r0, #1
 800342a:	d102      	bne.n	8003432 <_sbrk_r+0x1a>
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	b103      	cbz	r3, 8003432 <_sbrk_r+0x1a>
 8003430:	602b      	str	r3, [r5, #0]
 8003432:	bd38      	pop	{r3, r4, r5, pc}
 8003434:	20000254 	.word	0x20000254

08003438 <__malloc_lock>:
 8003438:	4770      	bx	lr

0800343a <__malloc_unlock>:
 800343a:	4770      	bx	lr

0800343c <_malloc_usable_size_r>:
 800343c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003440:	1f18      	subs	r0, r3, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	bfbc      	itt	lt
 8003446:	580b      	ldrlt	r3, [r1, r0]
 8003448:	18c0      	addlt	r0, r0, r3
 800344a:	4770      	bx	lr

0800344c <_init>:
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	bf00      	nop
 8003450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003452:	bc08      	pop	{r3}
 8003454:	469e      	mov	lr, r3
 8003456:	4770      	bx	lr

08003458 <_fini>:
 8003458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345a:	bf00      	nop
 800345c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345e:	bc08      	pop	{r3}
 8003460:	469e      	mov	lr, r3
 8003462:	4770      	bx	lr
