
CAN_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003400  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080035e4  080035e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800365c  0800365c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800365c  0800365c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800365c  0800365c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800365c  0800365c  0001365c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003660  08003660  00013660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000070  080036d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  080036d4  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdc7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002083  00000000  00000000  0002ce60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf0  00000000  00000000  0002eee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  0002fbd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001674c  00000000  00000000  000307a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a263  00000000  00000000  00046eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080694  00000000  00000000  0005114f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d17e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d0  00000000  00000000  000d1860  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	080035cc 	.word	0x080035cc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	080035cc 	.word	0x080035cc

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <Uart_printf>:
#include "bsp_debug.h"

static uint8_t Uart_TxBuff[200];

void Uart_printf(UART_HandleTypeDef *huart, char *fmt, ...)
{
 8000234:	b40e      	push	{r1, r2, r3}
 8000236:	b580      	push	{r7, lr}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
  uint16_t len;
  va_list ap;
  va_start(ap, fmt);
 800023e:	f107 0320 	add.w	r3, r7, #32
 8000242:	60bb      	str	r3, [r7, #8]
  vsprintf((char*) Uart_TxBuff, fmt, ap);
 8000244:	68ba      	ldr	r2, [r7, #8]
 8000246:	69f9      	ldr	r1, [r7, #28]
 8000248:	480a      	ldr	r0, [pc, #40]	; (8000274 <Uart_printf+0x40>)
 800024a:	f002 fdc3 	bl	8002dd4 <vsiprintf>
  va_end(ap);
  len = strlen((const char*) Uart_TxBuff); //此次发送数据的长度
 800024e:	4809      	ldr	r0, [pc, #36]	; (8000274 <Uart_printf+0x40>)
 8000250:	f7ff ffe8 	bl	8000224 <strlen>
 8000254:	4603      	mov	r3, r0
 8000256:	81fb      	strh	r3, [r7, #14]
  HAL_UART_Transmit(huart, Uart_TxBuff, len, 100);
 8000258:	89fa      	ldrh	r2, [r7, #14]
 800025a:	2364      	movs	r3, #100	; 0x64
 800025c:	4905      	ldr	r1, [pc, #20]	; (8000274 <Uart_printf+0x40>)
 800025e:	6878      	ldr	r0, [r7, #4]
 8000260:	f002 fbb3 	bl	80029ca <HAL_UART_Transmit>
 8000264:	bf00      	nop
 8000266:	3714      	adds	r7, #20
 8000268:	46bd      	mov	sp, r7
 800026a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800026e:	b003      	add	sp, #12
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	2000008c 	.word	0x2000008c

08000278 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0

  hcan.Instance = CAN1;
 800027c:	4b17      	ldr	r3, [pc, #92]	; (80002dc <MX_CAN_Init+0x64>)
 800027e:	4a18      	ldr	r2, [pc, #96]	; (80002e0 <MX_CAN_Init+0x68>)
 8000280:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000282:	4b16      	ldr	r3, [pc, #88]	; (80002dc <MX_CAN_Init+0x64>)
 8000284:	2204      	movs	r2, #4
 8000286:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000288:	4b14      	ldr	r3, [pc, #80]	; (80002dc <MX_CAN_Init+0x64>)
 800028a:	2200      	movs	r2, #0
 800028c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800028e:	4b13      	ldr	r3, [pc, #76]	; (80002dc <MX_CAN_Init+0x64>)
 8000290:	2200      	movs	r2, #0
 8000292:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <MX_CAN_Init+0x64>)
 8000296:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800029a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <MX_CAN_Init+0x64>)
 800029e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80002a2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002a4:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <MX_CAN_Init+0x64>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <MX_CAN_Init+0x64>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <MX_CAN_Init+0x64>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <MX_CAN_Init+0x64>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <MX_CAN_Init+0x64>)
 80002be:	2200      	movs	r2, #0
 80002c0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <MX_CAN_Init+0x64>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002c8:	4804      	ldr	r0, [pc, #16]	; (80002dc <MX_CAN_Init+0x64>)
 80002ca:	f000 fc15 	bl	8000af8 <HAL_CAN_Init>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80002d4:	f000 f9de 	bl	8000694 <Error_Handler>
  }

}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	2000018c 	.word	0x2000018c
 80002e0:	40006400 	.word	0x40006400

080002e4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b08a      	sub	sp, #40	; 0x28
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ec:	f107 0314 	add.w	r3, r7, #20
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a2d      	ldr	r2, [pc, #180]	; (80003b4 <HAL_CAN_MspInit+0xd0>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d153      	bne.n	80003ac <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000304:	4b2c      	ldr	r3, [pc, #176]	; (80003b8 <HAL_CAN_MspInit+0xd4>)
 8000306:	69db      	ldr	r3, [r3, #28]
 8000308:	4a2b      	ldr	r2, [pc, #172]	; (80003b8 <HAL_CAN_MspInit+0xd4>)
 800030a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800030e:	61d3      	str	r3, [r2, #28]
 8000310:	4b29      	ldr	r3, [pc, #164]	; (80003b8 <HAL_CAN_MspInit+0xd4>)
 8000312:	69db      	ldr	r3, [r3, #28]
 8000314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000318:	613b      	str	r3, [r7, #16]
 800031a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800031c:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <HAL_CAN_MspInit+0xd4>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a25      	ldr	r2, [pc, #148]	; (80003b8 <HAL_CAN_MspInit+0xd4>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b23      	ldr	r3, [pc, #140]	; (80003b8 <HAL_CAN_MspInit+0xd4>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0308 	and.w	r3, r3, #8
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800033a:	2300      	movs	r3, #0
 800033c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000342:	f107 0314 	add.w	r3, r7, #20
 8000346:	4619      	mov	r1, r3
 8000348:	481c      	ldr	r0, [pc, #112]	; (80003bc <HAL_CAN_MspInit+0xd8>)
 800034a:	f001 faed 	bl	8001928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800034e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000354:	2302      	movs	r3, #2
 8000356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000358:	2303      	movs	r3, #3
 800035a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800035c:	f107 0314 	add.w	r3, r7, #20
 8000360:	4619      	mov	r1, r3
 8000362:	4816      	ldr	r0, [pc, #88]	; (80003bc <HAL_CAN_MspInit+0xd8>)
 8000364:	f001 fae0 	bl	8001928 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <HAL_CAN_MspInit+0xdc>)
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	627b      	str	r3, [r7, #36]	; 0x24
 800036e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000370:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000374:	627b      	str	r3, [r7, #36]	; 0x24
 8000376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000378:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800037c:	627b      	str	r3, [r7, #36]	; 0x24
 800037e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000384:	627b      	str	r3, [r7, #36]	; 0x24
 8000386:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <HAL_CAN_MspInit+0xdc>)
 8000388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800038a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 2, 0);
 800038c:	2200      	movs	r2, #0
 800038e:	2102      	movs	r1, #2
 8000390:	2014      	movs	r0, #20
 8000392:	f001 fa9e 	bl	80018d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000396:	2014      	movs	r0, #20
 8000398:	f001 fab7 	bl	800190a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 2, 0);
 800039c:	2200      	movs	r2, #0
 800039e:	2102      	movs	r1, #2
 80003a0:	2016      	movs	r0, #22
 80003a2:	f001 fa96 	bl	80018d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80003a6:	2016      	movs	r0, #22
 80003a8:	f001 faaf 	bl	800190a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80003ac:	bf00      	nop
 80003ae:	3728      	adds	r7, #40	; 0x28
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40006400 	.word	0x40006400
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40010c00 	.word	0x40010c00
 80003c0:	40010000 	.word	0x40010000

080003c4 <CAN_Config>:
  * @brief  Configures the CAN.
  * @param  None
  * @retval None
  */
void CAN_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08a      	sub	sp, #40	; 0x28
 80003c8:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef  sFilterConfig;

  /* Configure the CAN Filter */
  sFilterConfig.FilterBank = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80003d2:	2301      	movs	r3, #1
 80003d4:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80003d6:	2300      	movs	r3, #0
 80003d8:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80003da:	2300      	movs	r3, #0
 80003dc:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80003de:	2300      	movs	r3, #0
 80003e0:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80003e2:	2300      	movs	r3, #0
 80003e4:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80003ea:	2301      	movs	r3, #1
 80003ec:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80003ee:	230e      	movs	r3, #14
 80003f0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80003f2:	463b      	mov	r3, r7
 80003f4:	4619      	mov	r1, r3
 80003f6:	481c      	ldr	r0, [pc, #112]	; (8000468 <CAN_Config+0xa4>)
 80003f8:	f000 fc79 	bl	8000cee <HAL_CAN_ConfigFilter>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <CAN_Config+0x42>
  {
    /* Filter configuration Error */
    Error_Handler();
 8000402:	f000 f947 	bl	8000694 <Error_Handler>
  }

  /* Start the CAN peripheral */
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000406:	4818      	ldr	r0, [pc, #96]	; (8000468 <CAN_Config+0xa4>)
 8000408:	f000 fd3a 	bl	8000e80 <HAL_CAN_Start>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <CAN_Config+0x52>
  {
    /* Start Error */
    Error_Handler();
 8000412:	f000 f93f 	bl	8000694 <Error_Handler>
  }

  /* Activate CAN RX notification */
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000416:	2102      	movs	r1, #2
 8000418:	4813      	ldr	r0, [pc, #76]	; (8000468 <CAN_Config+0xa4>)
 800041a:	f000 ff60 	bl	80012de <HAL_CAN_ActivateNotification>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <CAN_Config+0x64>
  {
    /* Notification Error */
    Error_Handler();
 8000424:	f000 f936 	bl	8000694 <Error_Handler>
  }

  __HAL_CAN_ENABLE_IT(&hcan, CAN_IT_ERROR);
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <CAN_Config+0xa4>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <CAN_Config+0xa4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000436:	615a      	str	r2, [r3, #20]
  /* Configure Transmission process */
  CAN_TxHeader.StdId = 0x320;
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <CAN_Config+0xa8>)
 800043a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800043e:	601a      	str	r2, [r3, #0]
  CAN_TxHeader.ExtId = 0x01;
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <CAN_Config+0xa8>)
 8000442:	2201      	movs	r2, #1
 8000444:	605a      	str	r2, [r3, #4]
  CAN_TxHeader.RTR = CAN_RTR_DATA;
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <CAN_Config+0xa8>)
 8000448:	2200      	movs	r2, #0
 800044a:	60da      	str	r2, [r3, #12]
  CAN_TxHeader.IDE = CAN_ID_STD;
 800044c:	4b07      	ldr	r3, [pc, #28]	; (800046c <CAN_Config+0xa8>)
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
  CAN_TxHeader.DLC = 2;
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <CAN_Config+0xa8>)
 8000454:	2202      	movs	r2, #2
 8000456:	611a      	str	r2, [r3, #16]
  CAN_TxHeader.TransmitGlobalTime = DISABLE;
 8000458:	4b04      	ldr	r3, [pc, #16]	; (800046c <CAN_Config+0xa8>)
 800045a:	2200      	movs	r2, #0
 800045c:	751a      	strb	r2, [r3, #20]
}
 800045e:	bf00      	nop
 8000460:	3728      	adds	r7, #40	; 0x28
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	2000018c 	.word	0x2000018c
 800046c:	20000170 	.word	0x20000170

08000470 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  CanHandle: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &CAN_RxHeader, CAN_RxData) != HAL_OK)
 8000478:	4b07      	ldr	r3, [pc, #28]	; (8000498 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800047a:	4a08      	ldr	r2, [pc, #32]	; (800049c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800047c:	2100      	movs	r1, #0
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f000 fe1c 	bl	80010bc <HAL_CAN_GetRxMessage>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 800048a:	f000 f903 	bl	8000694 <Error_Handler>
  // {
  //     led_time = HAL_GetTick();
  //     LED1_ON;
  //     Uart_printf(&huart1, "\r\n%s\r\n", CAN_RxData);
  // }
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	2000015c 	.word	0x2000015c
 800049c:	200001b4 	.word	0x200001b4

080004a0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  uint32_t CAN_ErrorCode;
  CAN_ErrorCode = HAL_CAN_GetError(hcan);
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f001 f951 	bl	8001750 <HAL_CAN_GetError>
 80004ae:	4603      	mov	r3, r0
 80004b0:	60fb      	str	r3, [r7, #12]
  Uart_printf(&huart1, "Can Error Code is %ld", &CAN_ErrorCode);
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	461a      	mov	r2, r3
 80004b8:	4903      	ldr	r1, [pc, #12]	; (80004c8 <HAL_CAN_ErrorCallback+0x28>)
 80004ba:	4804      	ldr	r0, [pc, #16]	; (80004cc <HAL_CAN_ErrorCallback+0x2c>)
 80004bc:	f7ff feba 	bl	8000234 <Uart_printf>
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80004c0:	bf00      	nop
 80004c2:	3710      	adds	r7, #16
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	080035e4 	.word	0x080035e4
 80004cc:	20000210 	.word	0x20000210

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0310 	add.w	r3, r7, #16
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e4:	4b1e      	ldr	r3, [pc, #120]	; (8000560 <MX_GPIO_Init+0x90>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a1d      	ldr	r2, [pc, #116]	; (8000560 <MX_GPIO_Init+0x90>)
 80004ea:	f043 0310 	orr.w	r3, r3, #16
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <MX_GPIO_Init+0x90>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0310 	and.w	r3, r3, #16
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fc:	4b18      	ldr	r3, [pc, #96]	; (8000560 <MX_GPIO_Init+0x90>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a17      	ldr	r2, [pc, #92]	; (8000560 <MX_GPIO_Init+0x90>)
 8000502:	f043 0308 	orr.w	r3, r3, #8
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <MX_GPIO_Init+0x90>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0308 	and.w	r3, r3, #8
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <MX_GPIO_Init+0x90>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a11      	ldr	r2, [pc, #68]	; (8000560 <MX_GPIO_Init+0x90>)
 800051a:	f043 0304 	orr.w	r3, r3, #4
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <MX_GPIO_Init+0x90>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0304 	and.w	r3, r3, #4
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000532:	480c      	ldr	r0, [pc, #48]	; (8000564 <MX_GPIO_Init+0x94>)
 8000534:	f001 fb62 	bl	8001bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8000538:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800053c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000542:	2302      	movs	r3, #2
 8000544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2302      	movs	r3, #2
 8000548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800054a:	f107 0310 	add.w	r3, r7, #16
 800054e:	4619      	mov	r1, r3
 8000550:	4804      	ldr	r0, [pc, #16]	; (8000564 <MX_GPIO_Init+0x94>)
 8000552:	f001 f9e9 	bl	8001928 <HAL_GPIO_Init>

}
 8000556:	bf00      	nop
 8000558:	3720      	adds	r7, #32
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	40010c00 	.word	0x40010c00

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fa6f 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f835 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f7ff ffab 	bl	80004d0 <MX_GPIO_Init>
  MX_CAN_Init();
 800057a:	f7ff fe7d 	bl	8000278 <MX_CAN_Init>
  MX_USART1_UART_Init();
 800057e:	f000 f9cb 	bl	8000918 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_Config();
 8000582:	f7ff ff1f 	bl	80003c4 <CAN_Config>

  uint32_t CAN_time_temp = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
  uint32_t systick_temp = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
  uint32_t led_time_temp = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
	// 		 LED1_OFF;
	//       }
	//  }

   /* Set the data to be transmitted */
   CAN_TxData[0] = 3;
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <main+0x68>)
 8000594:	2203      	movs	r2, #3
 8000596:	701a      	strb	r2, [r3, #0]
   CAN_TxData[1] = 2;
 8000598:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <main+0x68>)
 800059a:	2202      	movs	r2, #2
 800059c:	705a      	strb	r2, [r3, #1]
   CAN_TxData[2] = 0;
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <main+0x68>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	709a      	strb	r2, [r3, #2]
   CAN_TxHeader.StdId = 0x320;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <main+0x6c>)
 80005a6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80005aa:	601a      	str	r2, [r3, #0]
   CAN_TxHeader.DLC = 3;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <main+0x6c>)
 80005ae:	2203      	movs	r2, #3
 80005b0:	611a      	str	r2, [r3, #16]

   /* Start the Transmission process */
   if (HAL_CAN_AddTxMessage(&hcan, &CAN_TxHeader, CAN_TxData, &CAN_TxMailbox) != HAL_OK)
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <main+0x70>)
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <main+0x68>)
 80005b6:	4907      	ldr	r1, [pc, #28]	; (80005d4 <main+0x6c>)
 80005b8:	4808      	ldr	r0, [pc, #32]	; (80005dc <main+0x74>)
 80005ba:	f000 fca5 	bl	8000f08 <HAL_CAN_AddTxMessage>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <main+0x60>
   {
     /* Transmission request Error */
     Error_Handler();
 80005c4:	f000 f866 	bl	8000694 <Error_Handler>
   }
   HAL_Delay(5);
 80005c8:	2005      	movs	r0, #5
 80005ca:	f000 fa73 	bl	8000ab4 <HAL_Delay>
   CAN_TxData[0] = 3;
 80005ce:	e7e0      	b.n	8000592 <main+0x2a>
 80005d0:	20000154 	.word	0x20000154
 80005d4:	20000170 	.word	0x20000170
 80005d8:	20000188 	.word	0x20000188
 80005dc:	2000018c 	.word	0x2000018c

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b090      	sub	sp, #64	; 0x40
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0318 	add.w	r3, r7, #24
 80005ea:	2228      	movs	r2, #40	; 0x28
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fbd2 	bl	8002d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000602:	2301      	movs	r3, #1
 8000604:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800061e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0318 	add.w	r3, r7, #24
 8000628:	4618      	mov	r0, r3
 800062a:	f001 faff 	bl	8001c2c <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000634:	f000 f82e 	bl	8000694 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2302      	movs	r3, #2
 800063e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2102      	movs	r1, #2
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fd6a 	bl	800212c <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800065e:	f000 f819 	bl	8000694 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000662:	f001 fe4d 	bl	8002300 <HAL_RCC_EnableCSS>
}
 8000666:	bf00      	nop
 8000668:	3740      	adds	r7, #64	; 0x40
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d101      	bne.n	8000686 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000682:	f000 f9fb 	bl	8000a7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40001400 	.word	0x40001400

08000694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <HAL_MspInit+0x5c>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	4a14      	ldr	r2, [pc, #80]	; (80006fc <HAL_MspInit+0x5c>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6193      	str	r3, [r2, #24]
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_MspInit+0x5c>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <HAL_MspInit+0x5c>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <HAL_MspInit+0x5c>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	61d3      	str	r3, [r2, #28]
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <HAL_MspInit+0x5c>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <HAL_MspInit+0x60>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <HAL_MspInit+0x60>)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010000 	.word	0x40010000

08000704 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	; 0x30
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000714:	2200      	movs	r2, #0
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	2037      	movs	r0, #55	; 0x37
 800071a:	f001 f8da 	bl	80018d2 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800071e:	2037      	movs	r0, #55	; 0x37
 8000720:	f001 f8f3 	bl	800190a <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <HAL_InitTick+0xa0>)
 8000726:	69db      	ldr	r3, [r3, #28]
 8000728:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <HAL_InitTick+0xa0>)
 800072a:	f043 0320 	orr.w	r3, r3, #32
 800072e:	61d3      	str	r3, [r2, #28]
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <HAL_InitTick+0xa0>)
 8000732:	69db      	ldr	r3, [r3, #28]
 8000734:	f003 0320 	and.w	r3, r3, #32
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800073c:	f107 0210 	add.w	r2, r7, #16
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f001 fe7a 	bl	8002440 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800074c:	f001 fe50 	bl	80023f0 <HAL_RCC_GetPCLK1Freq>
 8000750:	4603      	mov	r3, r0
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000758:	4a13      	ldr	r2, [pc, #76]	; (80007a8 <HAL_InitTick+0xa4>)
 800075a:	fba2 2303 	umull	r2, r3, r2, r3
 800075e:	0c9b      	lsrs	r3, r3, #18
 8000760:	3b01      	subs	r3, #1
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <HAL_InitTick+0xa8>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <HAL_InitTick+0xac>)
 8000768:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <HAL_InitTick+0xa8>)
 800076c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000770:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000772:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <HAL_InitTick+0xa8>)
 8000774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000776:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <HAL_InitTick+0xa8>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <HAL_InitTick+0xa8>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000784:	4809      	ldr	r0, [pc, #36]	; (80007ac <HAL_InitTick+0xa8>)
 8000786:	f001 fec3 	bl	8002510 <HAL_TIM_Base_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d104      	bne.n	800079a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000790:	4806      	ldr	r0, [pc, #24]	; (80007ac <HAL_InitTick+0xa8>)
 8000792:	f001 fef1 	bl	8002578 <HAL_TIM_Base_Start_IT>
 8000796:	4603      	mov	r3, r0
 8000798:	e000      	b.n	800079c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
}
 800079c:	4618      	mov	r0, r3
 800079e:	3730      	adds	r7, #48	; 0x30
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000
 80007a8:	431bde83 	.word	0x431bde83
 80007ac:	200001d0 	.word	0x200001d0
 80007b0:	40001400 	.word	0x40001400

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80007b8:	f001 fe72 	bl	80024a0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <HardFault_Handler+0x4>

080007c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <MemManage_Handler+0x4>

080007cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <BusFault_Handler+0x4>

080007d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <UsageFault_Handler+0x4>

080007d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800080c:	4802      	ldr	r0, [pc, #8]	; (8000818 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800080e:	f000 fd8b 	bl	8001328 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000018c 	.word	0x2000018c

0800081c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <CAN1_SCE_IRQHandler+0x10>)
 8000822:	f000 fd81 	bl	8001328 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000018c 	.word	0x2000018c

08000830 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <TIM7_IRQHandler+0x10>)
 8000836:	f001 fec2 	bl	80025be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200001d0 	.word	0x200001d0

08000844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800084c:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <_sbrk+0x5c>)
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <_sbrk+0x60>)
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <_sbrk+0x64>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d102      	bne.n	8000866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <_sbrk+0x64>)
 8000862:	4a12      	ldr	r2, [pc, #72]	; (80008ac <_sbrk+0x68>)
 8000864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <_sbrk+0x64>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	429a      	cmp	r2, r3
 8000872:	d207      	bcs.n	8000884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000874:	f002 fa66 	bl	8002d44 <__errno>
 8000878:	4602      	mov	r2, r0
 800087a:	230c      	movs	r3, #12
 800087c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	e009      	b.n	8000898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <_sbrk+0x64>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <_sbrk+0x64>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <_sbrk+0x64>)
 8000894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000896:	68fb      	ldr	r3, [r7, #12]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20010000 	.word	0x20010000
 80008a4:	00000400 	.word	0x00000400
 80008a8:	20000164 	.word	0x20000164
 80008ac:	20000258 	.word	0x20000258

080008b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <SystemInit+0x5c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a14      	ldr	r2, [pc, #80]	; (800090c <SystemInit+0x5c>)
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <SystemInit+0x5c>)
 80008c2:	685a      	ldr	r2, [r3, #4]
 80008c4:	4911      	ldr	r1, [pc, #68]	; (800090c <SystemInit+0x5c>)
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <SystemInit+0x60>)
 80008c8:	4013      	ands	r3, r2
 80008ca:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <SystemInit+0x5c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0e      	ldr	r2, [pc, #56]	; (800090c <SystemInit+0x5c>)
 80008d2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80008d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008da:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <SystemInit+0x5c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0a      	ldr	r2, [pc, #40]	; (800090c <SystemInit+0x5c>)
 80008e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008e6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <SystemInit+0x5c>)
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <SystemInit+0x5c>)
 80008ee:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80008f2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <SystemInit+0x5c>)
 80008f6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80008fa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <SystemInit+0x64>)
 80008fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000902:	609a      	str	r2, [r3, #8]
#endif 
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	40021000 	.word	0x40021000
 8000910:	f8ff0000 	.word	0xf8ff0000
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <MX_USART1_UART_Init+0x50>)
 8000920:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 8000950:	f001 ffee 	bl	8002930 <HAL_UART_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800095a:	f7ff fe9b 	bl	8000694 <Error_Handler>
  }

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000210 	.word	0x20000210
 8000968:	40013800 	.word	0x40013800

0800096c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a1c      	ldr	r2, [pc, #112]	; (80009f8 <HAL_UART_MspInit+0x8c>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d131      	bne.n	80009f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <HAL_UART_MspInit+0x90>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a1a      	ldr	r2, [pc, #104]	; (80009fc <HAL_UART_MspInit+0x90>)
 8000992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <HAL_UART_MspInit+0x90>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_UART_MspInit+0x90>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a14      	ldr	r2, [pc, #80]	; (80009fc <HAL_UART_MspInit+0x90>)
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_UART_MspInit+0x90>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0304 	and.w	r3, r3, #4
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	4619      	mov	r1, r3
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <HAL_UART_MspInit+0x94>)
 80009d2:	f000 ffa9 	bl	8001928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	4619      	mov	r1, r3
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <HAL_UART_MspInit+0x94>)
 80009ec:	f000 ff9c 	bl	8001928 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009f0:	bf00      	nop
 80009f2:	3720      	adds	r7, #32
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40013800 	.word	0x40013800
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40010800 	.word	0x40010800

08000a04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a04:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a06:	e003      	b.n	8000a10 <LoopCopyDataInit>

08000a08 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a0a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a0c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a0e:	3104      	adds	r1, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a10:	480a      	ldr	r0, [pc, #40]	; (8000a3c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a14:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a16:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a18:	d3f6      	bcc.n	8000a08 <CopyDataInit>
  ldr r2, =_sbss
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a1c:	e002      	b.n	8000a24 <LoopFillZerobss>

08000a1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a20:	f842 3b04 	str.w	r3, [r2], #4

08000a24 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a26:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a28:	d3f9      	bcc.n	8000a1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a2a:	f7ff ff41 	bl	80008b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f002 f98f 	bl	8002d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a32:	f7ff fd99 	bl	8000568 <main>
  bx lr
 8000a36:	4770      	bx	lr
  ldr r3, =_sidata
 8000a38:	08003664 	.word	0x08003664
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a40:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000a44:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000a48:	20000258 	.word	0x20000258

08000a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC1_2_IRQHandler>
	...

08000a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_Init+0x28>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_Init+0x28>)
 8000a5a:	f043 0310 	orr.w	r3, r3, #16
 8000a5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 ff2b 	bl	80018bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff fe4c 	bl	8000704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a6c:	f7ff fe18 	bl	80006a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40022000 	.word	0x40022000

08000a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_IncTick+0x1c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_IncTick+0x20>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a03      	ldr	r2, [pc, #12]	; (8000a9c <HAL_IncTick+0x20>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000250 	.word	0x20000250

08000aa0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b02      	ldr	r3, [pc, #8]	; (8000ab0 <HAL_GetTick+0x10>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	20000250 	.word	0x20000250

08000ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000abc:	f7ff fff0 	bl	8000aa0 <HAL_GetTick>
 8000ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000acc:	d005      	beq.n	8000ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_Delay+0x40>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ada:	bf00      	nop
 8000adc:	f7ff ffe0 	bl	8000aa0 <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f7      	bhi.n	8000adc <HAL_Delay+0x28>
  {
  }
}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000008 	.word	0x20000008

08000af8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d101      	bne.n	8000b0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e0ed      	b.n	8000ce6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d102      	bne.n	8000b1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff fbe4 	bl	80002e4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f022 0202 	bic.w	r2, r2, #2
 8000b2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b2c:	f7ff ffb8 	bl	8000aa0 <HAL_GetTick>
 8000b30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b32:	e012      	b.n	8000b5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b34:	f7ff ffb4 	bl	8000aa0 <HAL_GetTick>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	2b0a      	cmp	r3, #10
 8000b40:	d90b      	bls.n	8000b5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2205      	movs	r2, #5
 8000b52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e0c5      	b.n	8000ce6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1e5      	bne.n	8000b34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f042 0201 	orr.w	r2, r2, #1
 8000b76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b78:	f7ff ff92 	bl	8000aa0 <HAL_GetTick>
 8000b7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b7e:	e012      	b.n	8000ba6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b80:	f7ff ff8e 	bl	8000aa0 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	2b0a      	cmp	r3, #10
 8000b8c:	d90b      	bls.n	8000ba6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2205      	movs	r2, #5
 8000b9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e09f      	b.n	8000ce6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d0e5      	beq.n	8000b80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	7e1b      	ldrb	r3, [r3, #24]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d108      	bne.n	8000bce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	e007      	b.n	8000bde <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	7e5b      	ldrb	r3, [r3, #25]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d108      	bne.n	8000bf8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	e007      	b.n	8000c08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	7e9b      	ldrb	r3, [r3, #26]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d108      	bne.n	8000c22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f042 0220 	orr.w	r2, r2, #32
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	e007      	b.n	8000c32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f022 0220 	bic.w	r2, r2, #32
 8000c30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7edb      	ldrb	r3, [r3, #27]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d108      	bne.n	8000c4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f022 0210 	bic.w	r2, r2, #16
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	e007      	b.n	8000c5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f042 0210 	orr.w	r2, r2, #16
 8000c5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	7f1b      	ldrb	r3, [r3, #28]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d108      	bne.n	8000c76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f042 0208 	orr.w	r2, r2, #8
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	e007      	b.n	8000c86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f022 0208 	bic.w	r2, r2, #8
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	7f5b      	ldrb	r3, [r3, #29]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d108      	bne.n	8000ca0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f042 0204 	orr.w	r2, r2, #4
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	e007      	b.n	8000cb0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f022 0204 	bic.w	r2, r2, #4
 8000cae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	431a      	orrs	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	ea42 0103 	orr.w	r1, r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	1e5a      	subs	r2, r3, #1
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b087      	sub	sp, #28
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d04:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d06:	7cfb      	ldrb	r3, [r7, #19]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d003      	beq.n	8000d14 <HAL_CAN_ConfigFilter+0x26>
 8000d0c:	7cfb      	ldrb	r3, [r7, #19]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	f040 80aa 	bne.w	8000e68 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d1a:	f043 0201 	orr.w	r2, r3, #1
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	f003 031f 	and.w	r3, r3, #31
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d123      	bne.n	8000d96 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	43db      	mvns	r3, r3
 8000d58:	401a      	ands	r2, r3
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d6c:	683a      	ldr	r2, [r7, #0]
 8000d6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3248      	adds	r2, #72	; 0x48
 8000d76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d8c:	6979      	ldr	r1, [r7, #20]
 8000d8e:	3348      	adds	r3, #72	; 0x48
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	440b      	add	r3, r1
 8000d94:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d122      	bne.n	8000de4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	431a      	orrs	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000dbe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	3248      	adds	r2, #72	; 0x48
 8000dc4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dd8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dda:	6979      	ldr	r1, [r7, #20]
 8000ddc:	3348      	adds	r3, #72	; 0x48
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	440b      	add	r3, r1
 8000de2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d109      	bne.n	8000e00 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000dfe:	e007      	b.n	8000e10 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	691b      	ldr	r3, [r3, #16]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d109      	bne.n	8000e2c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000e2a:	e007      	b.n	8000e3c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	431a      	orrs	r2, r3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d107      	bne.n	8000e54 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e5a:	f023 0201 	bic.w	r2, r3, #1
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	e006      	b.n	8000e76 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
  }
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	371c      	adds	r7, #28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d12e      	bne.n	8000ef2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2202      	movs	r2, #2
 8000e98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 0201 	bic.w	r2, r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000eac:	f7ff fdf8 	bl	8000aa0 <HAL_GetTick>
 8000eb0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000eb2:	e012      	b.n	8000eda <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000eb4:	f7ff fdf4 	bl	8000aa0 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b0a      	cmp	r3, #10
 8000ec0:	d90b      	bls.n	8000eda <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2205      	movs	r2, #5
 8000ed2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e012      	b.n	8000f00 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1e5      	bne.n	8000eb4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e006      	b.n	8000f00 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
  }
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f1c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f26:	7ffb      	ldrb	r3, [r7, #31]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d003      	beq.n	8000f34 <HAL_CAN_AddTxMessage+0x2c>
 8000f2c:	7ffb      	ldrb	r3, [r7, #31]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	f040 80b8 	bne.w	80010a4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10a      	bne.n	8000f54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d105      	bne.n	8000f54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 80a0 	beq.w	8001094 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	0e1b      	lsrs	r3, r3, #24
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d907      	bls.n	8000f74 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e09e      	b.n	80010b2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f74:	2201      	movs	r2, #1
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10d      	bne.n	8000fa2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f90:	68f9      	ldr	r1, [r7, #12]
 8000f92:	6809      	ldr	r1, [r1, #0]
 8000f94:	431a      	orrs	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3318      	adds	r3, #24
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	440b      	add	r3, r1
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	e00f      	b.n	8000fc2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fac:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fb2:	68f9      	ldr	r1, [r7, #12]
 8000fb4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000fb6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	3318      	adds	r3, #24
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	440b      	add	r3, r1
 8000fc0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6819      	ldr	r1, [r3, #0]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	691a      	ldr	r2, [r3, #16]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3318      	adds	r3, #24
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	7d1b      	ldrb	r3, [r3, #20]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d111      	bne.n	8001002 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3318      	adds	r3, #24
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	4413      	add	r3, r2
 8000fea:	3304      	adds	r3, #4
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	6811      	ldr	r1, [r2, #0]
 8000ff2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3318      	adds	r3, #24
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	440b      	add	r3, r1
 8000ffe:	3304      	adds	r3, #4
 8001000:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3307      	adds	r3, #7
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	061a      	lsls	r2, r3, #24
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3306      	adds	r3, #6
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	041b      	lsls	r3, r3, #16
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3305      	adds	r3, #5
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	4313      	orrs	r3, r2
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	3204      	adds	r2, #4
 8001022:	7812      	ldrb	r2, [r2, #0]
 8001024:	4610      	mov	r0, r2
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	6811      	ldr	r1, [r2, #0]
 800102a:	ea43 0200 	orr.w	r2, r3, r0
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	440b      	add	r3, r1
 8001034:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001038:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3303      	adds	r3, #3
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	061a      	lsls	r2, r3, #24
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3302      	adds	r3, #2
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	041b      	lsls	r3, r3, #16
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3301      	adds	r3, #1
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	4313      	orrs	r3, r2
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	7812      	ldrb	r2, [r2, #0]
 800105a:	4610      	mov	r0, r2
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	6811      	ldr	r1, [r2, #0]
 8001060:	ea43 0200 	orr.w	r2, r3, r0
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	440b      	add	r3, r1
 800106a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800106e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3318      	adds	r3, #24
 8001078:	011b      	lsls	r3, r3, #4
 800107a:	4413      	add	r3, r2
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	6811      	ldr	r1, [r2, #0]
 8001082:	f043 0201 	orr.w	r2, r3, #1
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	3318      	adds	r3, #24
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	440b      	add	r3, r1
 800108e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	e00e      	b.n	80010b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001098:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e006      	b.n	80010b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
  }
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010d0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010d2:	7dfb      	ldrb	r3, [r7, #23]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d003      	beq.n	80010e0 <HAL_CAN_GetRxMessage+0x24>
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	f040 80f3 	bne.w	80012c6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10e      	bne.n	8001104 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d116      	bne.n	8001122 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e0e7      	b.n	80012d4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d107      	bne.n	8001122 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001116:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e0d8      	b.n	80012d4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	331b      	adds	r3, #27
 800112a:	011b      	lsls	r3, r3, #4
 800112c:	4413      	add	r3, r2
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0204 	and.w	r2, r3, #4
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d10c      	bne.n	800115a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	331b      	adds	r3, #27
 8001148:	011b      	lsls	r3, r3, #4
 800114a:	4413      	add	r3, r2
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	0d5b      	lsrs	r3, r3, #21
 8001150:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	e00b      	b.n	8001172 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	331b      	adds	r3, #27
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	4413      	add	r3, r2
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	08db      	lsrs	r3, r3, #3
 800116a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	331b      	adds	r3, #27
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	4413      	add	r3, r2
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0202 	and.w	r2, r3, #2
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	331b      	adds	r3, #27
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	4413      	add	r3, r2
 8001194:	3304      	adds	r3, #4
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 020f 	and.w	r2, r3, #15
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	331b      	adds	r3, #27
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	4413      	add	r3, r2
 80011ac:	3304      	adds	r3, #4
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	331b      	adds	r3, #27
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	4413      	add	r3, r2
 80011c4:	3304      	adds	r3, #4
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	0c1b      	lsrs	r3, r3, #16
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	4413      	add	r3, r2
 80011da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	4413      	add	r3, r2
 80011f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	0a1a      	lsrs	r2, r3, #8
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	4413      	add	r3, r2
 800120a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	0c1a      	lsrs	r2, r3, #16
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	3302      	adds	r3, #2
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	4413      	add	r3, r2
 8001224:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	0e1a      	lsrs	r2, r3, #24
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	3303      	adds	r3, #3
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	4413      	add	r3, r2
 800123e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	3304      	adds	r3, #4
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	4413      	add	r3, r2
 8001256:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	0a1a      	lsrs	r2, r3, #8
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	3305      	adds	r3, #5
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	4413      	add	r3, r2
 8001270:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	0c1a      	lsrs	r2, r3, #16
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	3306      	adds	r3, #6
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	011b      	lsls	r3, r3, #4
 8001288:	4413      	add	r3, r2
 800128a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	0e1a      	lsrs	r2, r3, #24
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	3307      	adds	r3, #7
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d108      	bne.n	80012b2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0220 	orr.w	r2, r2, #32
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	e007      	b.n	80012c2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 0220 	orr.w	r2, r2, #32
 80012c0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e006      	b.n	80012d4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
  }
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	371c      	adds	r7, #28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80012de:	b480      	push	{r7}
 80012e0:	b085      	sub	sp, #20
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d002      	beq.n	80012fc <HAL_CAN_ActivateNotification+0x1e>
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d109      	bne.n	8001310 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6959      	ldr	r1, [r3, #20]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	e006      	b.n	800131e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
  }
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d07c      	beq.n	8001468 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b00      	cmp	r3, #0
 8001376:	d023      	beq.n	80013c0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2201      	movs	r2, #1
 800137e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f97d 	bl	800168a <HAL_CAN_TxMailbox0CompleteCallback>
 8001390:	e016      	b.n	80013c0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d004      	beq.n	80013a6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
 80013a4:	e00c      	b.n	80013c0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	f003 0308 	and.w	r3, r3, #8
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d004      	beq.n	80013ba <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
 80013b8:	e002      	b.n	80013c0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f980 	bl	80016c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d024      	beq.n	8001414 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f95c 	bl	800169c <HAL_CAN_TxMailbox1CompleteCallback>
 80013e4:	e016      	b.n	8001414 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d004      	beq.n	80013fa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
 80013f8:	e00c      	b.n	8001414 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001400:	2b00      	cmp	r3, #0
 8001402:	d004      	beq.n	800140e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
 800140c:	e002      	b.n	8001414 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f95f 	bl	80016d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d024      	beq.n	8001468 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001426:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f93b 	bl	80016ae <HAL_CAN_TxMailbox2CompleteCallback>
 8001438:	e016      	b.n	8001468 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d004      	beq.n	800144e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
 800144c:	e00c      	b.n	8001468 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d004      	beq.n	8001462 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
 8001460:	e002      	b.n	8001468 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f93e 	bl	80016e4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001468:	6a3b      	ldr	r3, [r7, #32]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00c      	beq.n	800148c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f003 0310 	and.w	r3, r3, #16
 8001478:	2b00      	cmp	r3, #0
 800147a:	d007      	beq.n	800148c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001482:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2210      	movs	r2, #16
 800148a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00b      	beq.n	80014ae <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d006      	beq.n	80014ae <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2208      	movs	r2, #8
 80014a6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f924 	bl	80016f6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d009      	beq.n	80014cc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7fe ffd2 	bl	8000470 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014cc:	6a3b      	ldr	r3, [r7, #32]
 80014ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00c      	beq.n	80014f0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	f003 0310 	and.w	r3, r3, #16
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d007      	beq.n	80014f0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2210      	movs	r2, #16
 80014ee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014f0:	6a3b      	ldr	r3, [r7, #32]
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00b      	beq.n	8001512 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	2b00      	cmp	r3, #0
 8001502:	d006      	beq.n	8001512 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2208      	movs	r2, #8
 800150a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 f904 	bl	800171a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	f003 0310 	and.w	r3, r3, #16
 8001518:	2b00      	cmp	r3, #0
 800151a:	d009      	beq.n	8001530 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d002      	beq.n	8001530 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f8ec 	bl	8001708 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00b      	beq.n	8001552 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	2b00      	cmp	r3, #0
 8001542:	d006      	beq.n	8001552 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2210      	movs	r2, #16
 800154a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f8ed 	bl	800172c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001552:	6a3b      	ldr	r3, [r7, #32]
 8001554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00b      	beq.n	8001574 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d006      	beq.n	8001574 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2208      	movs	r2, #8
 800156c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f8e5 	bl	800173e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d075      	beq.n	800166a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d06c      	beq.n	8001662 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001588:	6a3b      	ldr	r3, [r7, #32]
 800158a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158e:	2b00      	cmp	r3, #0
 8001590:	d008      	beq.n	80015a4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d008      	beq.n	80015c0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	f043 0302 	orr.w	r3, r3, #2
 80015be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d008      	beq.n	80015dc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015dc:	6a3b      	ldr	r3, [r7, #32]
 80015de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d03d      	beq.n	8001662 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d038      	beq.n	8001662 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015f6:	2b30      	cmp	r3, #48	; 0x30
 80015f8:	d017      	beq.n	800162a <HAL_CAN_IRQHandler+0x302>
 80015fa:	2b30      	cmp	r3, #48	; 0x30
 80015fc:	d804      	bhi.n	8001608 <HAL_CAN_IRQHandler+0x2e0>
 80015fe:	2b10      	cmp	r3, #16
 8001600:	d009      	beq.n	8001616 <HAL_CAN_IRQHandler+0x2ee>
 8001602:	2b20      	cmp	r3, #32
 8001604:	d00c      	beq.n	8001620 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001606:	e024      	b.n	8001652 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001608:	2b50      	cmp	r3, #80	; 0x50
 800160a:	d018      	beq.n	800163e <HAL_CAN_IRQHandler+0x316>
 800160c:	2b60      	cmp	r3, #96	; 0x60
 800160e:	d01b      	beq.n	8001648 <HAL_CAN_IRQHandler+0x320>
 8001610:	2b40      	cmp	r3, #64	; 0x40
 8001612:	d00f      	beq.n	8001634 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001614:	e01d      	b.n	8001652 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800161e:	e018      	b.n	8001652 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	f043 0310 	orr.w	r3, r3, #16
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001628:	e013      	b.n	8001652 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	f043 0320 	orr.w	r3, r3, #32
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001632:	e00e      	b.n	8001652 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800163c:	e009      	b.n	8001652 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001646:	e004      	b.n	8001652 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001650:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	699a      	ldr	r2, [r3, #24]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001660:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2204      	movs	r2, #4
 8001668:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7fe ff0f 	bl	80004a0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	; 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
	...

08001768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001784:	4013      	ands	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179a:	4a04      	ldr	r2, [pc, #16]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <__NVIC_GetPriorityGrouping+0x18>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	f003 0307 	and.w	r3, r3, #7
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db0b      	blt.n	80017f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	4906      	ldr	r1, [pc, #24]	; (8001800 <__NVIC_EnableIRQ+0x34>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2001      	movs	r0, #1
 80017ee:	fa00 f202 	lsl.w	r2, r0, r2
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db0a      	blt.n	800182e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <__NVIC_SetPriority+0x4c>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	440b      	add	r3, r1
 8001828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800182c:	e00a      	b.n	8001844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <__NVIC_SetPriority+0x50>)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3b04      	subs	r3, #4
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	440b      	add	r3, r1
 8001842:	761a      	strb	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f1c3 0307 	rsb	r3, r3, #7
 8001872:	2b04      	cmp	r3, #4
 8001874:	bf28      	it	cs
 8001876:	2304      	movcs	r3, #4
 8001878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3304      	adds	r3, #4
 800187e:	2b06      	cmp	r3, #6
 8001880:	d902      	bls.n	8001888 <NVIC_EncodePriority+0x30>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3b03      	subs	r3, #3
 8001886:	e000      	b.n	800188a <NVIC_EncodePriority+0x32>
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43da      	mvns	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43d9      	mvns	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	4313      	orrs	r3, r2
         );
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ff4f 	bl	8001768 <__NVIC_SetPriorityGrouping>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e4:	f7ff ff64 	bl	80017b0 <__NVIC_GetPriorityGrouping>
 80018e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	6978      	ldr	r0, [r7, #20]
 80018f0:	f7ff ffb2 	bl	8001858 <NVIC_EncodePriority>
 80018f4:	4602      	mov	r2, r0
 80018f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff81 	bl	8001804 <__NVIC_SetPriority>
}
 8001902:	bf00      	nop
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff57 	bl	80017cc <__NVIC_EnableIRQ>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001928:	b480      	push	{r7}
 800192a:	b08b      	sub	sp, #44	; 0x2c
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193a:	e133      	b.n	8001ba4 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800193c:	2201      	movs	r2, #1
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	429a      	cmp	r2, r3
 8001956:	f040 8122 	bne.w	8001b9e <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b12      	cmp	r3, #18
 8001960:	d034      	beq.n	80019cc <HAL_GPIO_Init+0xa4>
 8001962:	2b12      	cmp	r3, #18
 8001964:	d80d      	bhi.n	8001982 <HAL_GPIO_Init+0x5a>
 8001966:	2b02      	cmp	r3, #2
 8001968:	d02b      	beq.n	80019c2 <HAL_GPIO_Init+0x9a>
 800196a:	2b02      	cmp	r3, #2
 800196c:	d804      	bhi.n	8001978 <HAL_GPIO_Init+0x50>
 800196e:	2b00      	cmp	r3, #0
 8001970:	d031      	beq.n	80019d6 <HAL_GPIO_Init+0xae>
 8001972:	2b01      	cmp	r3, #1
 8001974:	d01c      	beq.n	80019b0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001976:	e048      	b.n	8001a0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001978:	2b03      	cmp	r3, #3
 800197a:	d043      	beq.n	8001a04 <HAL_GPIO_Init+0xdc>
 800197c:	2b11      	cmp	r3, #17
 800197e:	d01b      	beq.n	80019b8 <HAL_GPIO_Init+0x90>
          break;
 8001980:	e043      	b.n	8001a0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001982:	4a8f      	ldr	r2, [pc, #572]	; (8001bc0 <HAL_GPIO_Init+0x298>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d026      	beq.n	80019d6 <HAL_GPIO_Init+0xae>
 8001988:	4a8d      	ldr	r2, [pc, #564]	; (8001bc0 <HAL_GPIO_Init+0x298>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d806      	bhi.n	800199c <HAL_GPIO_Init+0x74>
 800198e:	4a8d      	ldr	r2, [pc, #564]	; (8001bc4 <HAL_GPIO_Init+0x29c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d020      	beq.n	80019d6 <HAL_GPIO_Init+0xae>
 8001994:	4a8c      	ldr	r2, [pc, #560]	; (8001bc8 <HAL_GPIO_Init+0x2a0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d01d      	beq.n	80019d6 <HAL_GPIO_Init+0xae>
          break;
 800199a:	e036      	b.n	8001a0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800199c:	4a8b      	ldr	r2, [pc, #556]	; (8001bcc <HAL_GPIO_Init+0x2a4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d019      	beq.n	80019d6 <HAL_GPIO_Init+0xae>
 80019a2:	4a8b      	ldr	r2, [pc, #556]	; (8001bd0 <HAL_GPIO_Init+0x2a8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d016      	beq.n	80019d6 <HAL_GPIO_Init+0xae>
 80019a8:	4a8a      	ldr	r2, [pc, #552]	; (8001bd4 <HAL_GPIO_Init+0x2ac>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d013      	beq.n	80019d6 <HAL_GPIO_Init+0xae>
          break;
 80019ae:	e02c      	b.n	8001a0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	623b      	str	r3, [r7, #32]
          break;
 80019b6:	e028      	b.n	8001a0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	3304      	adds	r3, #4
 80019be:	623b      	str	r3, [r7, #32]
          break;
 80019c0:	e023      	b.n	8001a0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	3308      	adds	r3, #8
 80019c8:	623b      	str	r3, [r7, #32]
          break;
 80019ca:	e01e      	b.n	8001a0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	330c      	adds	r3, #12
 80019d2:	623b      	str	r3, [r7, #32]
          break;
 80019d4:	e019      	b.n	8001a0a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d102      	bne.n	80019e4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019de:	2304      	movs	r3, #4
 80019e0:	623b      	str	r3, [r7, #32]
          break;
 80019e2:	e012      	b.n	8001a0a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d105      	bne.n	80019f8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019ec:	2308      	movs	r3, #8
 80019ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	611a      	str	r2, [r3, #16]
          break;
 80019f6:	e008      	b.n	8001a0a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f8:	2308      	movs	r3, #8
 80019fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69fa      	ldr	r2, [r7, #28]
 8001a00:	615a      	str	r2, [r3, #20]
          break;
 8001a02:	e002      	b.n	8001a0a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
          break;
 8001a08:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2bff      	cmp	r3, #255	; 0xff
 8001a0e:	d801      	bhi.n	8001a14 <HAL_GPIO_Init+0xec>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	e001      	b.n	8001a18 <HAL_GPIO_Init+0xf0>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3304      	adds	r3, #4
 8001a18:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	2bff      	cmp	r3, #255	; 0xff
 8001a1e:	d802      	bhi.n	8001a26 <HAL_GPIO_Init+0xfe>
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	e002      	b.n	8001a2c <HAL_GPIO_Init+0x104>
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	3b08      	subs	r3, #8
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	210f      	movs	r1, #15
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	6a39      	ldr	r1, [r7, #32]
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	431a      	orrs	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 80a2 	beq.w	8001b9e <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a5a:	4b5f      	ldr	r3, [pc, #380]	; (8001bd8 <HAL_GPIO_Init+0x2b0>)
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	4a5e      	ldr	r2, [pc, #376]	; (8001bd8 <HAL_GPIO_Init+0x2b0>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6193      	str	r3, [r2, #24]
 8001a66:	4b5c      	ldr	r3, [pc, #368]	; (8001bd8 <HAL_GPIO_Init+0x2b0>)
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a72:	4a5a      	ldr	r2, [pc, #360]	; (8001bdc <HAL_GPIO_Init+0x2b4>)
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	3302      	adds	r3, #2
 8001a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	220f      	movs	r2, #15
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4013      	ands	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a51      	ldr	r2, [pc, #324]	; (8001be0 <HAL_GPIO_Init+0x2b8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d01f      	beq.n	8001ade <HAL_GPIO_Init+0x1b6>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a50      	ldr	r2, [pc, #320]	; (8001be4 <HAL_GPIO_Init+0x2bc>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d019      	beq.n	8001ada <HAL_GPIO_Init+0x1b2>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4f      	ldr	r2, [pc, #316]	; (8001be8 <HAL_GPIO_Init+0x2c0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d013      	beq.n	8001ad6 <HAL_GPIO_Init+0x1ae>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4e      	ldr	r2, [pc, #312]	; (8001bec <HAL_GPIO_Init+0x2c4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00d      	beq.n	8001ad2 <HAL_GPIO_Init+0x1aa>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4d      	ldr	r2, [pc, #308]	; (8001bf0 <HAL_GPIO_Init+0x2c8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d007      	beq.n	8001ace <HAL_GPIO_Init+0x1a6>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4c      	ldr	r2, [pc, #304]	; (8001bf4 <HAL_GPIO_Init+0x2cc>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_GPIO_Init+0x1a2>
 8001ac6:	2305      	movs	r3, #5
 8001ac8:	e00a      	b.n	8001ae0 <HAL_GPIO_Init+0x1b8>
 8001aca:	2306      	movs	r3, #6
 8001acc:	e008      	b.n	8001ae0 <HAL_GPIO_Init+0x1b8>
 8001ace:	2304      	movs	r3, #4
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x1b8>
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e004      	b.n	8001ae0 <HAL_GPIO_Init+0x1b8>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e002      	b.n	8001ae0 <HAL_GPIO_Init+0x1b8>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_GPIO_Init+0x1b8>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	f002 0203 	and.w	r2, r2, #3
 8001ae6:	0092      	lsls	r2, r2, #2
 8001ae8:	4093      	lsls	r3, r2
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001af0:	493a      	ldr	r1, [pc, #232]	; (8001bdc <HAL_GPIO_Init+0x2b4>)
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	3302      	adds	r3, #2
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d006      	beq.n	8001b18 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	493a      	ldr	r1, [pc, #232]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]
 8001b16:	e006      	b.n	8001b26 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	4935      	ldr	r1, [pc, #212]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b32:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4930      	ldr	r1, [pc, #192]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
 8001b3e:	e006      	b.n	8001b4e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b40:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	492b      	ldr	r1, [pc, #172]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d006      	beq.n	8001b68 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b5a:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	4926      	ldr	r1, [pc, #152]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	608b      	str	r3, [r1, #8]
 8001b66:	e006      	b.n	8001b76 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b68:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	4921      	ldr	r1, [pc, #132]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d006      	beq.n	8001b90 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b82:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	491c      	ldr	r1, [pc, #112]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60cb      	str	r3, [r1, #12]
 8001b8e:	e006      	b.n	8001b9e <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	4917      	ldr	r1, [pc, #92]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f47f aec4 	bne.w	800193c <HAL_GPIO_Init+0x14>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	372c      	adds	r7, #44	; 0x2c
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	10210000 	.word	0x10210000
 8001bc4:	10110000 	.word	0x10110000
 8001bc8:	10120000 	.word	0x10120000
 8001bcc:	10310000 	.word	0x10310000
 8001bd0:	10320000 	.word	0x10320000
 8001bd4:	10220000 	.word	0x10220000
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40010000 	.word	0x40010000
 8001be0:	40010800 	.word	0x40010800
 8001be4:	40010c00 	.word	0x40010c00
 8001be8:	40011000 	.word	0x40011000
 8001bec:	40011400 	.word	0x40011400
 8001bf0:	40011800 	.word	0x40011800
 8001bf4:	40011c00 	.word	0x40011c00
 8001bf8:	40010400 	.word	0x40010400

08001bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c0c:	787b      	ldrb	r3, [r7, #1]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c12:	887a      	ldrh	r2, [r7, #2]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c18:	e003      	b.n	8001c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c1a:	887b      	ldrh	r3, [r7, #2]
 8001c1c:	041a      	lsls	r2, r3, #16
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	611a      	str	r2, [r3, #16]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e26c      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 8087 	beq.w	8001d5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c4c:	4b92      	ldr	r3, [pc, #584]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 030c 	and.w	r3, r3, #12
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d00c      	beq.n	8001c72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c58:	4b8f      	ldr	r3, [pc, #572]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d112      	bne.n	8001c8a <HAL_RCC_OscConfig+0x5e>
 8001c64:	4b8c      	ldr	r3, [pc, #560]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c70:	d10b      	bne.n	8001c8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c72:	4b89      	ldr	r3, [pc, #548]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d06c      	beq.n	8001d58 <HAL_RCC_OscConfig+0x12c>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d168      	bne.n	8001d58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e246      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c92:	d106      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x76>
 8001c94:	4b80      	ldr	r3, [pc, #512]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a7f      	ldr	r2, [pc, #508]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	e02e      	b.n	8001d00 <HAL_RCC_OscConfig+0xd4>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x98>
 8001caa:	4b7b      	ldr	r3, [pc, #492]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a7a      	ldr	r2, [pc, #488]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b78      	ldr	r3, [pc, #480]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a77      	ldr	r2, [pc, #476]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e01d      	b.n	8001d00 <HAL_RCC_OscConfig+0xd4>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ccc:	d10c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0xbc>
 8001cce:	4b72      	ldr	r3, [pc, #456]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a71      	ldr	r2, [pc, #452]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	4b6f      	ldr	r3, [pc, #444]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a6e      	ldr	r2, [pc, #440]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	e00b      	b.n	8001d00 <HAL_RCC_OscConfig+0xd4>
 8001ce8:	4b6b      	ldr	r3, [pc, #428]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a6a      	ldr	r2, [pc, #424]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b68      	ldr	r3, [pc, #416]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a67      	ldr	r2, [pc, #412]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d013      	beq.n	8001d30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7fe feca 	bl	8000aa0 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7fe fec6 	bl	8000aa0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e1fa      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	4b5d      	ldr	r3, [pc, #372]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0xe4>
 8001d2e:	e014      	b.n	8001d5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7fe feb6 	bl	8000aa0 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d38:	f7fe feb2 	bl	8000aa0 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e1e6      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	4b53      	ldr	r3, [pc, #332]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x10c>
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d063      	beq.n	8001e2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d66:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00b      	beq.n	8001d8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d72:	4b49      	ldr	r3, [pc, #292]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d11c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x18c>
 8001d7e:	4b46      	ldr	r3, [pc, #280]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d116      	bne.n	8001db8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8a:	4b43      	ldr	r3, [pc, #268]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <HAL_RCC_OscConfig+0x176>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e1ba      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da2:	4b3d      	ldr	r3, [pc, #244]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4939      	ldr	r1, [pc, #228]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	e03a      	b.n	8001e2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d020      	beq.n	8001e02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc0:	4b36      	ldr	r3, [pc, #216]	; (8001e9c <HAL_RCC_OscConfig+0x270>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc6:	f7fe fe6b 	bl	8000aa0 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dce:	f7fe fe67 	bl	8000aa0 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e19b      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de0:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4927      	ldr	r1, [pc, #156]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]
 8001e00:	e015      	b.n	8001e2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e02:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <HAL_RCC_OscConfig+0x270>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7fe fe4a 	bl	8000aa0 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e10:	f7fe fe46 	bl	8000aa0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e17a      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d03a      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d019      	beq.n	8001e76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e48:	f7fe fe2a 	bl	8000aa0 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e50:	f7fe fe26 	bl	8000aa0 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e15a      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f000 fb2a 	bl	80024c8 <RCC_Delay>
 8001e74:	e01c      	b.n	8001eb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <HAL_RCC_OscConfig+0x274>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7c:	f7fe fe10 	bl	8000aa0 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e82:	e00f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e84:	f7fe fe0c 	bl	8000aa0 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d908      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e140      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	42420000 	.word	0x42420000
 8001ea0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea4:	4b9e      	ldr	r3, [pc, #632]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1e9      	bne.n	8001e84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80a6 	beq.w	800200a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec2:	4b97      	ldr	r3, [pc, #604]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10d      	bne.n	8001eea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	4b94      	ldr	r3, [pc, #592]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4a93      	ldr	r2, [pc, #588]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	61d3      	str	r3, [r2, #28]
 8001eda:	4b91      	ldr	r3, [pc, #580]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eea:	4b8e      	ldr	r3, [pc, #568]	; (8002124 <HAL_RCC_OscConfig+0x4f8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d118      	bne.n	8001f28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef6:	4b8b      	ldr	r3, [pc, #556]	; (8002124 <HAL_RCC_OscConfig+0x4f8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a8a      	ldr	r2, [pc, #552]	; (8002124 <HAL_RCC_OscConfig+0x4f8>)
 8001efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f02:	f7fe fdcd 	bl	8000aa0 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0a:	f7fe fdc9 	bl	8000aa0 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b64      	cmp	r3, #100	; 0x64
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e0fd      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	4b81      	ldr	r3, [pc, #516]	; (8002124 <HAL_RCC_OscConfig+0x4f8>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x312>
 8001f30:	4b7b      	ldr	r3, [pc, #492]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4a7a      	ldr	r2, [pc, #488]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6213      	str	r3, [r2, #32]
 8001f3c:	e02d      	b.n	8001f9a <HAL_RCC_OscConfig+0x36e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x334>
 8001f46:	4b76      	ldr	r3, [pc, #472]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a75      	ldr	r2, [pc, #468]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	f023 0301 	bic.w	r3, r3, #1
 8001f50:	6213      	str	r3, [r2, #32]
 8001f52:	4b73      	ldr	r3, [pc, #460]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	4a72      	ldr	r2, [pc, #456]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	f023 0304 	bic.w	r3, r3, #4
 8001f5c:	6213      	str	r3, [r2, #32]
 8001f5e:	e01c      	b.n	8001f9a <HAL_RCC_OscConfig+0x36e>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d10c      	bne.n	8001f82 <HAL_RCC_OscConfig+0x356>
 8001f68:	4b6d      	ldr	r3, [pc, #436]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4a6c      	ldr	r2, [pc, #432]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f6e:	f043 0304 	orr.w	r3, r3, #4
 8001f72:	6213      	str	r3, [r2, #32]
 8001f74:	4b6a      	ldr	r3, [pc, #424]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4a69      	ldr	r2, [pc, #420]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6213      	str	r3, [r2, #32]
 8001f80:	e00b      	b.n	8001f9a <HAL_RCC_OscConfig+0x36e>
 8001f82:	4b67      	ldr	r3, [pc, #412]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a66      	ldr	r2, [pc, #408]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	6213      	str	r3, [r2, #32]
 8001f8e:	4b64      	ldr	r3, [pc, #400]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a63      	ldr	r2, [pc, #396]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d015      	beq.n	8001fce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa2:	f7fe fd7d 	bl	8000aa0 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7fe fd79 	bl	8000aa0 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e0ab      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc0:	4b57      	ldr	r3, [pc, #348]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0ee      	beq.n	8001faa <HAL_RCC_OscConfig+0x37e>
 8001fcc:	e014      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fce:	f7fe fd67 	bl	8000aa0 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7fe fd63 	bl	8000aa0 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e095      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fec:	4b4c      	ldr	r3, [pc, #304]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1ee      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ff8:	7dfb      	ldrb	r3, [r7, #23]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d105      	bne.n	800200a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffe:	4b48      	ldr	r3, [pc, #288]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4a47      	ldr	r2, [pc, #284]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8002004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002008:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8081 	beq.w	8002116 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002014:	4b42      	ldr	r3, [pc, #264]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b08      	cmp	r3, #8
 800201e:	d061      	beq.n	80020e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d146      	bne.n	80020b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002028:	4b3f      	ldr	r3, [pc, #252]	; (8002128 <HAL_RCC_OscConfig+0x4fc>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7fe fd37 	bl	8000aa0 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002036:	f7fe fd33 	bl	8000aa0 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e067      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002048:	4b35      	ldr	r3, [pc, #212]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f0      	bne.n	8002036 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205c:	d108      	bne.n	8002070 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800205e:	4b30      	ldr	r3, [pc, #192]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	492d      	ldr	r1, [pc, #180]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002070:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a19      	ldr	r1, [r3, #32]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	430b      	orrs	r3, r1
 8002082:	4927      	ldr	r1, [pc, #156]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	4313      	orrs	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002088:	4b27      	ldr	r3, [pc, #156]	; (8002128 <HAL_RCC_OscConfig+0x4fc>)
 800208a:	2201      	movs	r2, #1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7fe fd07 	bl	8000aa0 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002096:	f7fe fd03 	bl	8000aa0 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e037      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a8:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x46a>
 80020b4:	e02f      	b.n	8002116 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b6:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <HAL_RCC_OscConfig+0x4fc>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7fe fcf0 	bl	8000aa0 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c4:	f7fe fcec 	bl	8000aa0 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e020      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x498>
 80020e2:	e018      	b.n	8002116 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e013      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_RCC_OscConfig+0x4f4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	429a      	cmp	r2, r3
 8002102:	d106      	bne.n	8002112 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210e:	429a      	cmp	r2, r3
 8002110:	d001      	beq.n	8002116 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	40007000 	.word	0x40007000
 8002128:	42420060 	.word	0x42420060

0800212c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0d0      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002140:	4b6a      	ldr	r3, [pc, #424]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d910      	bls.n	8002170 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b67      	ldr	r3, [pc, #412]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 0207 	bic.w	r2, r3, #7
 8002156:	4965      	ldr	r1, [pc, #404]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b63      	ldr	r3, [pc, #396]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0b8      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d020      	beq.n	80021be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002188:	4b59      	ldr	r3, [pc, #356]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a58      	ldr	r2, [pc, #352]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002192:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0308 	and.w	r3, r3, #8
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a0:	4b53      	ldr	r3, [pc, #332]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4a52      	ldr	r2, [pc, #328]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80021aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ac:	4b50      	ldr	r3, [pc, #320]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	494d      	ldr	r1, [pc, #308]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d040      	beq.n	800224c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b47      	ldr	r3, [pc, #284]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d115      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e07f      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ea:	4b41      	ldr	r3, [pc, #260]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e073      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fa:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e06b      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220a:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f023 0203 	bic.w	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4936      	ldr	r1, [pc, #216]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800221c:	f7fe fc40 	bl	8000aa0 <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	e00a      	b.n	800223a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002224:	f7fe fc3c 	bl	8000aa0 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e053      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 020c 	and.w	r2, r3, #12
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	429a      	cmp	r2, r3
 800224a:	d1eb      	bne.n	8002224 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800224c:	4b27      	ldr	r3, [pc, #156]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d210      	bcs.n	800227c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b24      	ldr	r3, [pc, #144]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 0207 	bic.w	r2, r3, #7
 8002262:	4922      	ldr	r1, [pc, #136]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	4b20      	ldr	r3, [pc, #128]	; (80022ec <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e032      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4916      	ldr	r1, [pc, #88]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	4313      	orrs	r3, r2
 8002298:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d009      	beq.n	80022ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	490e      	ldr	r1, [pc, #56]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ba:	f000 f82d 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 80022be:	4601      	mov	r1, r0
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <HAL_RCC_ClockConfig+0x1c8>)
 80022cc:	5cd3      	ldrb	r3, [r2, r3]
 80022ce:	fa21 f303 	lsr.w	r3, r1, r3
 80022d2:	4a09      	ldr	r2, [pc, #36]	; (80022f8 <HAL_RCC_ClockConfig+0x1cc>)
 80022d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <HAL_RCC_ClockConfig+0x1d0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fa12 	bl	8000704 <HAL_InitTick>

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40022000 	.word	0x40022000
 80022f0:	40021000 	.word	0x40021000
 80022f4:	08003610 	.word	0x08003610
 80022f8:	20000000 	.word	0x20000000
 80022fc:	20000004 	.word	0x20000004

08002300 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_RCC_EnableCSS+0x14>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	4242004c 	.word	0x4242004c

08002318 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002318:	b490      	push	{r4, r7}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800231e:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002320:	1d3c      	adds	r4, r7, #4
 8002322:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002328:	4b28      	ldr	r3, [pc, #160]	; (80023cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002342:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b04      	cmp	r3, #4
 8002350:	d002      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x40>
 8002352:	2b08      	cmp	r3, #8
 8002354:	d003      	beq.n	800235e <HAL_RCC_GetSysClockFreq+0x46>
 8002356:	e02d      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002358:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800235a:	623b      	str	r3, [r7, #32]
      break;
 800235c:	e02d      	b.n	80023ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	0c9b      	lsrs	r3, r3, #18
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800236a:	4413      	add	r3, r2
 800236c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002370:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	0c5b      	lsrs	r3, r3, #17
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800238a:	4413      	add	r3, r2
 800238c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002390:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	4a0f      	ldr	r2, [pc, #60]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002396:	fb02 f203 	mul.w	r2, r2, r3
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
 80023a2:	e004      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	4a0c      	ldr	r2, [pc, #48]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023a8:	fb02 f303 	mul.w	r3, r2, r3
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	623b      	str	r3, [r7, #32]
      break;
 80023b2:	e002      	b.n	80023ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023b6:	623b      	str	r3, [r7, #32]
      break;
 80023b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ba:	6a3b      	ldr	r3, [r7, #32]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3728      	adds	r7, #40	; 0x28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc90      	pop	{r4, r7}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	080035fc 	.word	0x080035fc
 80023cc:	0800360c 	.word	0x0800360c
 80023d0:	40021000 	.word	0x40021000
 80023d4:	007a1200 	.word	0x007a1200
 80023d8:	003d0900 	.word	0x003d0900

080023dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e0:	4b02      	ldr	r3, [pc, #8]	; (80023ec <HAL_RCC_GetHCLKFreq+0x10>)
 80023e2:	681b      	ldr	r3, [r3, #0]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	20000000 	.word	0x20000000

080023f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023f4:	f7ff fff2 	bl	80023dc <HAL_RCC_GetHCLKFreq>
 80023f8:	4601      	mov	r1, r0
 80023fa:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	4a03      	ldr	r2, [pc, #12]	; (8002414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002406:	5cd3      	ldrb	r3, [r2, r3]
 8002408:	fa21 f303 	lsr.w	r3, r1, r3
}
 800240c:	4618      	mov	r0, r3
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	08003620 	.word	0x08003620

08002418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800241c:	f7ff ffde 	bl	80023dc <HAL_RCC_GetHCLKFreq>
 8002420:	4601      	mov	r1, r0
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	0adb      	lsrs	r3, r3, #11
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	4a03      	ldr	r2, [pc, #12]	; (800243c <HAL_RCC_GetPCLK2Freq+0x24>)
 800242e:	5cd3      	ldrb	r3, [r2, r3]
 8002430:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	08003620 	.word	0x08003620

08002440 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	220f      	movs	r2, #15
 800244e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_RCC_GetClockConfig+0x58>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0203 	and.w	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <HAL_RCC_GetClockConfig+0x58>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_GetClockConfig+0x58>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_RCC_GetClockConfig+0x58>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	08db      	lsrs	r3, r3, #3
 800247a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_RCC_GetClockConfig+0x5c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0207 	and.w	r2, r3, #7
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	40021000 	.word	0x40021000
 800249c:	40022000 	.word	0x40022000

080024a0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_RCC_NMI_IRQHandler+0x20>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ac:	2b80      	cmp	r3, #128	; 0x80
 80024ae:	d104      	bne.n	80024ba <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80024b0:	f000 f828 	bl	8002504 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80024b6:	2280      	movs	r2, #128	; 0x80
 80024b8:	701a      	strb	r2, [r3, #0]
  }
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000
 80024c4:	4002100a 	.word	0x4002100a

080024c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024d0:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <RCC_Delay+0x34>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <RCC_Delay+0x38>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	0a5b      	lsrs	r3, r3, #9
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024e4:	bf00      	nop
  }
  while (Delay --);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1e5a      	subs	r2, r3, #1
 80024ea:	60fa      	str	r2, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f9      	bne.n	80024e4 <RCC_Delay+0x1c>
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000000 	.word	0x20000000
 8002500:	10624dd3 	.word	0x10624dd3

08002504 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e01d      	b.n	800255e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f815 	bl	8002566 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3304      	adds	r3, #4
 800254c:	4619      	mov	r1, r3
 800254e:	4610      	mov	r0, r2
 8002550:	f000 f962 	bl	8002818 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d007      	beq.n	80025b2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d122      	bne.n	800261a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d11b      	bne.n	800261a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f06f 0202 	mvn.w	r2, #2
 80025ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f8ed 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 8002606:	e005      	b.n	8002614 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f8e0 	bl	80027ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f8ef 	bl	80027f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b04      	cmp	r3, #4
 8002626:	d122      	bne.n	800266e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b04      	cmp	r3, #4
 8002634:	d11b      	bne.n	800266e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f06f 0204 	mvn.w	r2, #4
 800263e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f8c3 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 800265a:	e005      	b.n	8002668 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f8b6 	bl	80027ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f8c5 	bl	80027f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b08      	cmp	r3, #8
 800267a:	d122      	bne.n	80026c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b08      	cmp	r3, #8
 8002688:	d11b      	bne.n	80026c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f06f 0208 	mvn.w	r2, #8
 8002692:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2204      	movs	r2, #4
 8002698:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f899 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 80026ae:	e005      	b.n	80026bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f88c 	bl	80027ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f89b 	bl	80027f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	2b10      	cmp	r3, #16
 80026ce:	d122      	bne.n	8002716 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	2b10      	cmp	r3, #16
 80026dc:	d11b      	bne.n	8002716 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f06f 0210 	mvn.w	r2, #16
 80026e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2208      	movs	r2, #8
 80026ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f86f 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 8002702:	e005      	b.n	8002710 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f862 	bl	80027ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f871 	bl	80027f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b01      	cmp	r3, #1
 8002722:	d10e      	bne.n	8002742 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d107      	bne.n	8002742 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f06f 0201 	mvn.w	r2, #1
 800273a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7fd ff97 	bl	8000670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274c:	2b80      	cmp	r3, #128	; 0x80
 800274e:	d10e      	bne.n	800276e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b80      	cmp	r3, #128	; 0x80
 800275c:	d107      	bne.n	800276e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f8d8 	bl	800291e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002778:	2b40      	cmp	r3, #64	; 0x40
 800277a:	d10e      	bne.n	800279a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002786:	2b40      	cmp	r3, #64	; 0x40
 8002788:	d107      	bne.n	800279a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f835 	bl	8002804 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d10e      	bne.n	80027c6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f003 0320 	and.w	r3, r3, #32
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	d107      	bne.n	80027c6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f06f 0220 	mvn.w	r2, #32
 80027be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f8a3 	bl	800290c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr
	...

08002818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a33      	ldr	r2, [pc, #204]	; (80028f8 <TIM_Base_SetConfig+0xe0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d013      	beq.n	8002858 <TIM_Base_SetConfig+0x40>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a32      	ldr	r2, [pc, #200]	; (80028fc <TIM_Base_SetConfig+0xe4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d00f      	beq.n	8002858 <TIM_Base_SetConfig+0x40>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283e:	d00b      	beq.n	8002858 <TIM_Base_SetConfig+0x40>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a2f      	ldr	r2, [pc, #188]	; (8002900 <TIM_Base_SetConfig+0xe8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d007      	beq.n	8002858 <TIM_Base_SetConfig+0x40>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a2e      	ldr	r2, [pc, #184]	; (8002904 <TIM_Base_SetConfig+0xec>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d003      	beq.n	8002858 <TIM_Base_SetConfig+0x40>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a2d      	ldr	r2, [pc, #180]	; (8002908 <TIM_Base_SetConfig+0xf0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d108      	bne.n	800286a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a22      	ldr	r2, [pc, #136]	; (80028f8 <TIM_Base_SetConfig+0xe0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d013      	beq.n	800289a <TIM_Base_SetConfig+0x82>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a21      	ldr	r2, [pc, #132]	; (80028fc <TIM_Base_SetConfig+0xe4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00f      	beq.n	800289a <TIM_Base_SetConfig+0x82>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002880:	d00b      	beq.n	800289a <TIM_Base_SetConfig+0x82>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a1e      	ldr	r2, [pc, #120]	; (8002900 <TIM_Base_SetConfig+0xe8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d007      	beq.n	800289a <TIM_Base_SetConfig+0x82>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <TIM_Base_SetConfig+0xec>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d003      	beq.n	800289a <TIM_Base_SetConfig+0x82>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <TIM_Base_SetConfig+0xf0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d108      	bne.n	80028ac <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <TIM_Base_SetConfig+0xe0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d003      	beq.n	80028e0 <TIM_Base_SetConfig+0xc8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a08      	ldr	r2, [pc, #32]	; (80028fc <TIM_Base_SetConfig+0xe4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d103      	bne.n	80028e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	615a      	str	r2, [r3, #20]
}
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	40012c00 	.word	0x40012c00
 80028fc:	40013400 	.word	0x40013400
 8002900:	40000400 	.word	0x40000400
 8002904:	40000800 	.word	0x40000800
 8002908:	40000c00 	.word	0x40000c00

0800290c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e03f      	b.n	80029c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fe f808 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2224      	movs	r2, #36	; 0x24
 8002960:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002972:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f90b 	bl	8002b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002988:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695a      	ldr	r2, [r3, #20]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002998:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b088      	sub	sp, #32
 80029ce:	af02      	add	r7, sp, #8
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	603b      	str	r3, [r7, #0]
 80029d6:	4613      	mov	r3, r2
 80029d8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	f040 8083 	bne.w	8002af2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_UART_Transmit+0x2e>
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e07b      	b.n	8002af4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_UART_Transmit+0x40>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e074      	b.n	8002af4 <HAL_UART_Transmit+0x12a>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2221      	movs	r2, #33	; 0x21
 8002a1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a20:	f7fe f83e 	bl	8000aa0 <HAL_GetTick>
 8002a24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	88fa      	ldrh	r2, [r7, #6]
 8002a2a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	88fa      	ldrh	r2, [r7, #6]
 8002a30:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a32:	e042      	b.n	8002aba <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4a:	d122      	bne.n	8002a92 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2200      	movs	r2, #0
 8002a54:	2180      	movs	r1, #128	; 0x80
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f850 	bl	8002afc <UART_WaitOnFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e046      	b.n	8002af4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a78:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d103      	bne.n	8002a8a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	3302      	adds	r3, #2
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	e017      	b.n	8002aba <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	e013      	b.n	8002aba <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2180      	movs	r1, #128	; 0x80
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 f82d 	bl	8002afc <UART_WaitOnFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e023      	b.n	8002af4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	60ba      	str	r2, [r7, #8]
 8002ab2:	781a      	ldrb	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1b7      	bne.n	8002a34 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2200      	movs	r2, #0
 8002acc:	2140      	movs	r1, #64	; 0x40
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f814 	bl	8002afc <UART_WaitOnFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e00a      	b.n	8002af4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002af2:	2302      	movs	r3, #2
  }
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b0c:	e02c      	b.n	8002b68 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d028      	beq.n	8002b68 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d007      	beq.n	8002b2c <UART_WaitOnFlagUntilTimeout+0x30>
 8002b1c:	f7fd ffc0 	bl	8000aa0 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d21d      	bcs.n	8002b68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b3a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695a      	ldr	r2, [r3, #20]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e00f      	b.n	8002b88 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	4013      	ands	r3, r2
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	bf0c      	ite	eq
 8002b78:	2301      	moveq	r3, #1
 8002b7a:	2300      	movne	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d0c3      	beq.n	8002b0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002bca:	f023 030c 	bic.w	r3, r3, #12
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	68f9      	ldr	r1, [r7, #12]
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a52      	ldr	r2, [pc, #328]	; (8002d3c <UART_SetConfig+0x1ac>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d14e      	bne.n	8002c96 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bf8:	f7ff fc0e 	bl	8002418 <HAL_RCC_GetPCLK2Freq>
 8002bfc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	009a      	lsls	r2, r3, #2
 8002c08:	441a      	add	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	4a4a      	ldr	r2, [pc, #296]	; (8002d40 <UART_SetConfig+0x1b0>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	0119      	lsls	r1, r3, #4
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009a      	lsls	r2, r3, #2
 8002c28:	441a      	add	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c34:	4b42      	ldr	r3, [pc, #264]	; (8002d40 <UART_SetConfig+0x1b0>)
 8002c36:	fba3 0302 	umull	r0, r3, r3, r2
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	2064      	movs	r0, #100	; 0x64
 8002c3e:	fb00 f303 	mul.w	r3, r0, r3
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	3332      	adds	r3, #50	; 0x32
 8002c48:	4a3d      	ldr	r2, [pc, #244]	; (8002d40 <UART_SetConfig+0x1b0>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c54:	4419      	add	r1, r3
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009a      	lsls	r2, r3, #2
 8002c60:	441a      	add	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c6c:	4b34      	ldr	r3, [pc, #208]	; (8002d40 <UART_SetConfig+0x1b0>)
 8002c6e:	fba3 0302 	umull	r0, r3, r3, r2
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2064      	movs	r0, #100	; 0x64
 8002c76:	fb00 f303 	mul.w	r3, r0, r3
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	3332      	adds	r3, #50	; 0x32
 8002c80:	4a2f      	ldr	r2, [pc, #188]	; (8002d40 <UART_SetConfig+0x1b0>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	f003 020f 	and.w	r2, r3, #15
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	440a      	add	r2, r1
 8002c92:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002c94:	e04d      	b.n	8002d32 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c96:	f7ff fbab 	bl	80023f0 <HAL_RCC_GetPCLK1Freq>
 8002c9a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009a      	lsls	r2, r3, #2
 8002ca6:	441a      	add	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb2:	4a23      	ldr	r2, [pc, #140]	; (8002d40 <UART_SetConfig+0x1b0>)
 8002cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	0119      	lsls	r1, r3, #4
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009a      	lsls	r2, r3, #2
 8002cc6:	441a      	add	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cd2:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <UART_SetConfig+0x1b0>)
 8002cd4:	fba3 0302 	umull	r0, r3, r3, r2
 8002cd8:	095b      	lsrs	r3, r3, #5
 8002cda:	2064      	movs	r0, #100	; 0x64
 8002cdc:	fb00 f303 	mul.w	r3, r0, r3
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	3332      	adds	r3, #50	; 0x32
 8002ce6:	4a16      	ldr	r2, [pc, #88]	; (8002d40 <UART_SetConfig+0x1b0>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf2:	4419      	add	r1, r3
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009a      	lsls	r2, r3, #2
 8002cfe:	441a      	add	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <UART_SetConfig+0x1b0>)
 8002d0c:	fba3 0302 	umull	r0, r3, r3, r2
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	2064      	movs	r0, #100	; 0x64
 8002d14:	fb00 f303 	mul.w	r3, r0, r3
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	3332      	adds	r3, #50	; 0x32
 8002d1e:	4a08      	ldr	r2, [pc, #32]	; (8002d40 <UART_SetConfig+0x1b0>)
 8002d20:	fba2 2303 	umull	r2, r3, r2, r3
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	f003 020f 	and.w	r2, r3, #15
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	440a      	add	r2, r1
 8002d30:	609a      	str	r2, [r3, #8]
}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40013800 	.word	0x40013800
 8002d40:	51eb851f 	.word	0x51eb851f

08002d44 <__errno>:
 8002d44:	4b01      	ldr	r3, [pc, #4]	; (8002d4c <__errno+0x8>)
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	2000000c 	.word	0x2000000c

08002d50 <__libc_init_array>:
 8002d50:	b570      	push	{r4, r5, r6, lr}
 8002d52:	2500      	movs	r5, #0
 8002d54:	4e0c      	ldr	r6, [pc, #48]	; (8002d88 <__libc_init_array+0x38>)
 8002d56:	4c0d      	ldr	r4, [pc, #52]	; (8002d8c <__libc_init_array+0x3c>)
 8002d58:	1ba4      	subs	r4, r4, r6
 8002d5a:	10a4      	asrs	r4, r4, #2
 8002d5c:	42a5      	cmp	r5, r4
 8002d5e:	d109      	bne.n	8002d74 <__libc_init_array+0x24>
 8002d60:	f000 fc34 	bl	80035cc <_init>
 8002d64:	2500      	movs	r5, #0
 8002d66:	4e0a      	ldr	r6, [pc, #40]	; (8002d90 <__libc_init_array+0x40>)
 8002d68:	4c0a      	ldr	r4, [pc, #40]	; (8002d94 <__libc_init_array+0x44>)
 8002d6a:	1ba4      	subs	r4, r4, r6
 8002d6c:	10a4      	asrs	r4, r4, #2
 8002d6e:	42a5      	cmp	r5, r4
 8002d70:	d105      	bne.n	8002d7e <__libc_init_array+0x2e>
 8002d72:	bd70      	pop	{r4, r5, r6, pc}
 8002d74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d78:	4798      	blx	r3
 8002d7a:	3501      	adds	r5, #1
 8002d7c:	e7ee      	b.n	8002d5c <__libc_init_array+0xc>
 8002d7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d82:	4798      	blx	r3
 8002d84:	3501      	adds	r5, #1
 8002d86:	e7f2      	b.n	8002d6e <__libc_init_array+0x1e>
 8002d88:	0800365c 	.word	0x0800365c
 8002d8c:	0800365c 	.word	0x0800365c
 8002d90:	0800365c 	.word	0x0800365c
 8002d94:	08003660 	.word	0x08003660

08002d98 <memset>:
 8002d98:	4603      	mov	r3, r0
 8002d9a:	4402      	add	r2, r0
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d100      	bne.n	8002da2 <memset+0xa>
 8002da0:	4770      	bx	lr
 8002da2:	f803 1b01 	strb.w	r1, [r3], #1
 8002da6:	e7f9      	b.n	8002d9c <memset+0x4>

08002da8 <_vsiprintf_r>:
 8002da8:	b500      	push	{lr}
 8002daa:	b09b      	sub	sp, #108	; 0x6c
 8002dac:	9100      	str	r1, [sp, #0]
 8002dae:	9104      	str	r1, [sp, #16]
 8002db0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002db4:	9105      	str	r1, [sp, #20]
 8002db6:	9102      	str	r1, [sp, #8]
 8002db8:	4905      	ldr	r1, [pc, #20]	; (8002dd0 <_vsiprintf_r+0x28>)
 8002dba:	9103      	str	r1, [sp, #12]
 8002dbc:	4669      	mov	r1, sp
 8002dbe:	f000 f86d 	bl	8002e9c <_svfiprintf_r>
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	9b00      	ldr	r3, [sp, #0]
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	b01b      	add	sp, #108	; 0x6c
 8002dca:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dce:	bf00      	nop
 8002dd0:	ffff0208 	.word	0xffff0208

08002dd4 <vsiprintf>:
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	460a      	mov	r2, r1
 8002dd8:	4601      	mov	r1, r0
 8002dda:	4802      	ldr	r0, [pc, #8]	; (8002de4 <vsiprintf+0x10>)
 8002ddc:	6800      	ldr	r0, [r0, #0]
 8002dde:	f7ff bfe3 	b.w	8002da8 <_vsiprintf_r>
 8002de2:	bf00      	nop
 8002de4:	2000000c 	.word	0x2000000c

08002de8 <__ssputs_r>:
 8002de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dec:	688e      	ldr	r6, [r1, #8]
 8002dee:	4682      	mov	sl, r0
 8002df0:	429e      	cmp	r6, r3
 8002df2:	460c      	mov	r4, r1
 8002df4:	4690      	mov	r8, r2
 8002df6:	4699      	mov	r9, r3
 8002df8:	d837      	bhi.n	8002e6a <__ssputs_r+0x82>
 8002dfa:	898a      	ldrh	r2, [r1, #12]
 8002dfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e00:	d031      	beq.n	8002e66 <__ssputs_r+0x7e>
 8002e02:	2302      	movs	r3, #2
 8002e04:	6825      	ldr	r5, [r4, #0]
 8002e06:	6909      	ldr	r1, [r1, #16]
 8002e08:	1a6f      	subs	r7, r5, r1
 8002e0a:	6965      	ldr	r5, [r4, #20]
 8002e0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e10:	fb95 f5f3 	sdiv	r5, r5, r3
 8002e14:	f109 0301 	add.w	r3, r9, #1
 8002e18:	443b      	add	r3, r7
 8002e1a:	429d      	cmp	r5, r3
 8002e1c:	bf38      	it	cc
 8002e1e:	461d      	movcc	r5, r3
 8002e20:	0553      	lsls	r3, r2, #21
 8002e22:	d530      	bpl.n	8002e86 <__ssputs_r+0x9e>
 8002e24:	4629      	mov	r1, r5
 8002e26:	f000 fb37 	bl	8003498 <_malloc_r>
 8002e2a:	4606      	mov	r6, r0
 8002e2c:	b950      	cbnz	r0, 8002e44 <__ssputs_r+0x5c>
 8002e2e:	230c      	movs	r3, #12
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	f8ca 3000 	str.w	r3, [sl]
 8002e38:	89a3      	ldrh	r3, [r4, #12]
 8002e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e3e:	81a3      	strh	r3, [r4, #12]
 8002e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e44:	463a      	mov	r2, r7
 8002e46:	6921      	ldr	r1, [r4, #16]
 8002e48:	f000 fab6 	bl	80033b8 <memcpy>
 8002e4c:	89a3      	ldrh	r3, [r4, #12]
 8002e4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e56:	81a3      	strh	r3, [r4, #12]
 8002e58:	6126      	str	r6, [r4, #16]
 8002e5a:	443e      	add	r6, r7
 8002e5c:	6026      	str	r6, [r4, #0]
 8002e5e:	464e      	mov	r6, r9
 8002e60:	6165      	str	r5, [r4, #20]
 8002e62:	1bed      	subs	r5, r5, r7
 8002e64:	60a5      	str	r5, [r4, #8]
 8002e66:	454e      	cmp	r6, r9
 8002e68:	d900      	bls.n	8002e6c <__ssputs_r+0x84>
 8002e6a:	464e      	mov	r6, r9
 8002e6c:	4632      	mov	r2, r6
 8002e6e:	4641      	mov	r1, r8
 8002e70:	6820      	ldr	r0, [r4, #0]
 8002e72:	f000 faac 	bl	80033ce <memmove>
 8002e76:	68a3      	ldr	r3, [r4, #8]
 8002e78:	2000      	movs	r0, #0
 8002e7a:	1b9b      	subs	r3, r3, r6
 8002e7c:	60a3      	str	r3, [r4, #8]
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	441e      	add	r6, r3
 8002e82:	6026      	str	r6, [r4, #0]
 8002e84:	e7dc      	b.n	8002e40 <__ssputs_r+0x58>
 8002e86:	462a      	mov	r2, r5
 8002e88:	f000 fb60 	bl	800354c <_realloc_r>
 8002e8c:	4606      	mov	r6, r0
 8002e8e:	2800      	cmp	r0, #0
 8002e90:	d1e2      	bne.n	8002e58 <__ssputs_r+0x70>
 8002e92:	6921      	ldr	r1, [r4, #16]
 8002e94:	4650      	mov	r0, sl
 8002e96:	f000 fab3 	bl	8003400 <_free_r>
 8002e9a:	e7c8      	b.n	8002e2e <__ssputs_r+0x46>

08002e9c <_svfiprintf_r>:
 8002e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea0:	461d      	mov	r5, r3
 8002ea2:	898b      	ldrh	r3, [r1, #12]
 8002ea4:	b09d      	sub	sp, #116	; 0x74
 8002ea6:	061f      	lsls	r7, r3, #24
 8002ea8:	4680      	mov	r8, r0
 8002eaa:	460c      	mov	r4, r1
 8002eac:	4616      	mov	r6, r2
 8002eae:	d50f      	bpl.n	8002ed0 <_svfiprintf_r+0x34>
 8002eb0:	690b      	ldr	r3, [r1, #16]
 8002eb2:	b96b      	cbnz	r3, 8002ed0 <_svfiprintf_r+0x34>
 8002eb4:	2140      	movs	r1, #64	; 0x40
 8002eb6:	f000 faef 	bl	8003498 <_malloc_r>
 8002eba:	6020      	str	r0, [r4, #0]
 8002ebc:	6120      	str	r0, [r4, #16]
 8002ebe:	b928      	cbnz	r0, 8002ecc <_svfiprintf_r+0x30>
 8002ec0:	230c      	movs	r3, #12
 8002ec2:	f8c8 3000 	str.w	r3, [r8]
 8002ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eca:	e0c8      	b.n	800305e <_svfiprintf_r+0x1c2>
 8002ecc:	2340      	movs	r3, #64	; 0x40
 8002ece:	6163      	str	r3, [r4, #20]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8002ed4:	2320      	movs	r3, #32
 8002ed6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002eda:	2330      	movs	r3, #48	; 0x30
 8002edc:	f04f 0b01 	mov.w	fp, #1
 8002ee0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ee4:	9503      	str	r5, [sp, #12]
 8002ee6:	4637      	mov	r7, r6
 8002ee8:	463d      	mov	r5, r7
 8002eea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002eee:	b10b      	cbz	r3, 8002ef4 <_svfiprintf_r+0x58>
 8002ef0:	2b25      	cmp	r3, #37	; 0x25
 8002ef2:	d13e      	bne.n	8002f72 <_svfiprintf_r+0xd6>
 8002ef4:	ebb7 0a06 	subs.w	sl, r7, r6
 8002ef8:	d00b      	beq.n	8002f12 <_svfiprintf_r+0x76>
 8002efa:	4653      	mov	r3, sl
 8002efc:	4632      	mov	r2, r6
 8002efe:	4621      	mov	r1, r4
 8002f00:	4640      	mov	r0, r8
 8002f02:	f7ff ff71 	bl	8002de8 <__ssputs_r>
 8002f06:	3001      	adds	r0, #1
 8002f08:	f000 80a4 	beq.w	8003054 <_svfiprintf_r+0x1b8>
 8002f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f0e:	4453      	add	r3, sl
 8002f10:	9309      	str	r3, [sp, #36]	; 0x24
 8002f12:	783b      	ldrb	r3, [r7, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 809d 	beq.w	8003054 <_svfiprintf_r+0x1b8>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f24:	9304      	str	r3, [sp, #16]
 8002f26:	9307      	str	r3, [sp, #28]
 8002f28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f2c:	931a      	str	r3, [sp, #104]	; 0x68
 8002f2e:	462f      	mov	r7, r5
 8002f30:	2205      	movs	r2, #5
 8002f32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002f36:	4850      	ldr	r0, [pc, #320]	; (8003078 <_svfiprintf_r+0x1dc>)
 8002f38:	f000 fa30 	bl	800339c <memchr>
 8002f3c:	9b04      	ldr	r3, [sp, #16]
 8002f3e:	b9d0      	cbnz	r0, 8002f76 <_svfiprintf_r+0xda>
 8002f40:	06d9      	lsls	r1, r3, #27
 8002f42:	bf44      	itt	mi
 8002f44:	2220      	movmi	r2, #32
 8002f46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f4a:	071a      	lsls	r2, r3, #28
 8002f4c:	bf44      	itt	mi
 8002f4e:	222b      	movmi	r2, #43	; 0x2b
 8002f50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f54:	782a      	ldrb	r2, [r5, #0]
 8002f56:	2a2a      	cmp	r2, #42	; 0x2a
 8002f58:	d015      	beq.n	8002f86 <_svfiprintf_r+0xea>
 8002f5a:	462f      	mov	r7, r5
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	250a      	movs	r5, #10
 8002f60:	9a07      	ldr	r2, [sp, #28]
 8002f62:	4639      	mov	r1, r7
 8002f64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f68:	3b30      	subs	r3, #48	; 0x30
 8002f6a:	2b09      	cmp	r3, #9
 8002f6c:	d94d      	bls.n	800300a <_svfiprintf_r+0x16e>
 8002f6e:	b1b8      	cbz	r0, 8002fa0 <_svfiprintf_r+0x104>
 8002f70:	e00f      	b.n	8002f92 <_svfiprintf_r+0xf6>
 8002f72:	462f      	mov	r7, r5
 8002f74:	e7b8      	b.n	8002ee8 <_svfiprintf_r+0x4c>
 8002f76:	4a40      	ldr	r2, [pc, #256]	; (8003078 <_svfiprintf_r+0x1dc>)
 8002f78:	463d      	mov	r5, r7
 8002f7a:	1a80      	subs	r0, r0, r2
 8002f7c:	fa0b f000 	lsl.w	r0, fp, r0
 8002f80:	4318      	orrs	r0, r3
 8002f82:	9004      	str	r0, [sp, #16]
 8002f84:	e7d3      	b.n	8002f2e <_svfiprintf_r+0x92>
 8002f86:	9a03      	ldr	r2, [sp, #12]
 8002f88:	1d11      	adds	r1, r2, #4
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	9103      	str	r1, [sp, #12]
 8002f8e:	2a00      	cmp	r2, #0
 8002f90:	db01      	blt.n	8002f96 <_svfiprintf_r+0xfa>
 8002f92:	9207      	str	r2, [sp, #28]
 8002f94:	e004      	b.n	8002fa0 <_svfiprintf_r+0x104>
 8002f96:	4252      	negs	r2, r2
 8002f98:	f043 0302 	orr.w	r3, r3, #2
 8002f9c:	9207      	str	r2, [sp, #28]
 8002f9e:	9304      	str	r3, [sp, #16]
 8002fa0:	783b      	ldrb	r3, [r7, #0]
 8002fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8002fa4:	d10c      	bne.n	8002fc0 <_svfiprintf_r+0x124>
 8002fa6:	787b      	ldrb	r3, [r7, #1]
 8002fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8002faa:	d133      	bne.n	8003014 <_svfiprintf_r+0x178>
 8002fac:	9b03      	ldr	r3, [sp, #12]
 8002fae:	3702      	adds	r7, #2
 8002fb0:	1d1a      	adds	r2, r3, #4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	9203      	str	r2, [sp, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bfb8      	it	lt
 8002fba:	f04f 33ff 	movlt.w	r3, #4294967295
 8002fbe:	9305      	str	r3, [sp, #20]
 8002fc0:	4d2e      	ldr	r5, [pc, #184]	; (800307c <_svfiprintf_r+0x1e0>)
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	7839      	ldrb	r1, [r7, #0]
 8002fc6:	4628      	mov	r0, r5
 8002fc8:	f000 f9e8 	bl	800339c <memchr>
 8002fcc:	b138      	cbz	r0, 8002fde <_svfiprintf_r+0x142>
 8002fce:	2340      	movs	r3, #64	; 0x40
 8002fd0:	1b40      	subs	r0, r0, r5
 8002fd2:	fa03 f000 	lsl.w	r0, r3, r0
 8002fd6:	9b04      	ldr	r3, [sp, #16]
 8002fd8:	3701      	adds	r7, #1
 8002fda:	4303      	orrs	r3, r0
 8002fdc:	9304      	str	r3, [sp, #16]
 8002fde:	7839      	ldrb	r1, [r7, #0]
 8002fe0:	2206      	movs	r2, #6
 8002fe2:	4827      	ldr	r0, [pc, #156]	; (8003080 <_svfiprintf_r+0x1e4>)
 8002fe4:	1c7e      	adds	r6, r7, #1
 8002fe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fea:	f000 f9d7 	bl	800339c <memchr>
 8002fee:	2800      	cmp	r0, #0
 8002ff0:	d038      	beq.n	8003064 <_svfiprintf_r+0x1c8>
 8002ff2:	4b24      	ldr	r3, [pc, #144]	; (8003084 <_svfiprintf_r+0x1e8>)
 8002ff4:	bb13      	cbnz	r3, 800303c <_svfiprintf_r+0x1a0>
 8002ff6:	9b03      	ldr	r3, [sp, #12]
 8002ff8:	3307      	adds	r3, #7
 8002ffa:	f023 0307 	bic.w	r3, r3, #7
 8002ffe:	3308      	adds	r3, #8
 8003000:	9303      	str	r3, [sp, #12]
 8003002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003004:	444b      	add	r3, r9
 8003006:	9309      	str	r3, [sp, #36]	; 0x24
 8003008:	e76d      	b.n	8002ee6 <_svfiprintf_r+0x4a>
 800300a:	fb05 3202 	mla	r2, r5, r2, r3
 800300e:	2001      	movs	r0, #1
 8003010:	460f      	mov	r7, r1
 8003012:	e7a6      	b.n	8002f62 <_svfiprintf_r+0xc6>
 8003014:	2300      	movs	r3, #0
 8003016:	250a      	movs	r5, #10
 8003018:	4619      	mov	r1, r3
 800301a:	3701      	adds	r7, #1
 800301c:	9305      	str	r3, [sp, #20]
 800301e:	4638      	mov	r0, r7
 8003020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003024:	3a30      	subs	r2, #48	; 0x30
 8003026:	2a09      	cmp	r2, #9
 8003028:	d903      	bls.n	8003032 <_svfiprintf_r+0x196>
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0c8      	beq.n	8002fc0 <_svfiprintf_r+0x124>
 800302e:	9105      	str	r1, [sp, #20]
 8003030:	e7c6      	b.n	8002fc0 <_svfiprintf_r+0x124>
 8003032:	fb05 2101 	mla	r1, r5, r1, r2
 8003036:	2301      	movs	r3, #1
 8003038:	4607      	mov	r7, r0
 800303a:	e7f0      	b.n	800301e <_svfiprintf_r+0x182>
 800303c:	ab03      	add	r3, sp, #12
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	4622      	mov	r2, r4
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <_svfiprintf_r+0x1ec>)
 8003044:	a904      	add	r1, sp, #16
 8003046:	4640      	mov	r0, r8
 8003048:	f3af 8000 	nop.w
 800304c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003050:	4681      	mov	r9, r0
 8003052:	d1d6      	bne.n	8003002 <_svfiprintf_r+0x166>
 8003054:	89a3      	ldrh	r3, [r4, #12]
 8003056:	065b      	lsls	r3, r3, #25
 8003058:	f53f af35 	bmi.w	8002ec6 <_svfiprintf_r+0x2a>
 800305c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800305e:	b01d      	add	sp, #116	; 0x74
 8003060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003064:	ab03      	add	r3, sp, #12
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	4622      	mov	r2, r4
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <_svfiprintf_r+0x1ec>)
 800306c:	a904      	add	r1, sp, #16
 800306e:	4640      	mov	r0, r8
 8003070:	f000 f882 	bl	8003178 <_printf_i>
 8003074:	e7ea      	b.n	800304c <_svfiprintf_r+0x1b0>
 8003076:	bf00      	nop
 8003078:	08003628 	.word	0x08003628
 800307c:	0800362e 	.word	0x0800362e
 8003080:	08003632 	.word	0x08003632
 8003084:	00000000 	.word	0x00000000
 8003088:	08002de9 	.word	0x08002de9

0800308c <_printf_common>:
 800308c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003090:	4691      	mov	r9, r2
 8003092:	461f      	mov	r7, r3
 8003094:	688a      	ldr	r2, [r1, #8]
 8003096:	690b      	ldr	r3, [r1, #16]
 8003098:	4606      	mov	r6, r0
 800309a:	4293      	cmp	r3, r2
 800309c:	bfb8      	it	lt
 800309e:	4613      	movlt	r3, r2
 80030a0:	f8c9 3000 	str.w	r3, [r9]
 80030a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030a8:	460c      	mov	r4, r1
 80030aa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030ae:	b112      	cbz	r2, 80030b6 <_printf_common+0x2a>
 80030b0:	3301      	adds	r3, #1
 80030b2:	f8c9 3000 	str.w	r3, [r9]
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	0699      	lsls	r1, r3, #26
 80030ba:	bf42      	ittt	mi
 80030bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80030c0:	3302      	addmi	r3, #2
 80030c2:	f8c9 3000 	strmi.w	r3, [r9]
 80030c6:	6825      	ldr	r5, [r4, #0]
 80030c8:	f015 0506 	ands.w	r5, r5, #6
 80030cc:	d107      	bne.n	80030de <_printf_common+0x52>
 80030ce:	f104 0a19 	add.w	sl, r4, #25
 80030d2:	68e3      	ldr	r3, [r4, #12]
 80030d4:	f8d9 2000 	ldr.w	r2, [r9]
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	42ab      	cmp	r3, r5
 80030dc:	dc29      	bgt.n	8003132 <_printf_common+0xa6>
 80030de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80030e2:	6822      	ldr	r2, [r4, #0]
 80030e4:	3300      	adds	r3, #0
 80030e6:	bf18      	it	ne
 80030e8:	2301      	movne	r3, #1
 80030ea:	0692      	lsls	r2, r2, #26
 80030ec:	d42e      	bmi.n	800314c <_printf_common+0xc0>
 80030ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030f2:	4639      	mov	r1, r7
 80030f4:	4630      	mov	r0, r6
 80030f6:	47c0      	blx	r8
 80030f8:	3001      	adds	r0, #1
 80030fa:	d021      	beq.n	8003140 <_printf_common+0xb4>
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	68e5      	ldr	r5, [r4, #12]
 8003100:	f003 0306 	and.w	r3, r3, #6
 8003104:	2b04      	cmp	r3, #4
 8003106:	bf18      	it	ne
 8003108:	2500      	movne	r5, #0
 800310a:	f8d9 2000 	ldr.w	r2, [r9]
 800310e:	f04f 0900 	mov.w	r9, #0
 8003112:	bf08      	it	eq
 8003114:	1aad      	subeq	r5, r5, r2
 8003116:	68a3      	ldr	r3, [r4, #8]
 8003118:	6922      	ldr	r2, [r4, #16]
 800311a:	bf08      	it	eq
 800311c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003120:	4293      	cmp	r3, r2
 8003122:	bfc4      	itt	gt
 8003124:	1a9b      	subgt	r3, r3, r2
 8003126:	18ed      	addgt	r5, r5, r3
 8003128:	341a      	adds	r4, #26
 800312a:	454d      	cmp	r5, r9
 800312c:	d11a      	bne.n	8003164 <_printf_common+0xd8>
 800312e:	2000      	movs	r0, #0
 8003130:	e008      	b.n	8003144 <_printf_common+0xb8>
 8003132:	2301      	movs	r3, #1
 8003134:	4652      	mov	r2, sl
 8003136:	4639      	mov	r1, r7
 8003138:	4630      	mov	r0, r6
 800313a:	47c0      	blx	r8
 800313c:	3001      	adds	r0, #1
 800313e:	d103      	bne.n	8003148 <_printf_common+0xbc>
 8003140:	f04f 30ff 	mov.w	r0, #4294967295
 8003144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003148:	3501      	adds	r5, #1
 800314a:	e7c2      	b.n	80030d2 <_printf_common+0x46>
 800314c:	2030      	movs	r0, #48	; 0x30
 800314e:	18e1      	adds	r1, r4, r3
 8003150:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800315a:	4422      	add	r2, r4
 800315c:	3302      	adds	r3, #2
 800315e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003162:	e7c4      	b.n	80030ee <_printf_common+0x62>
 8003164:	2301      	movs	r3, #1
 8003166:	4622      	mov	r2, r4
 8003168:	4639      	mov	r1, r7
 800316a:	4630      	mov	r0, r6
 800316c:	47c0      	blx	r8
 800316e:	3001      	adds	r0, #1
 8003170:	d0e6      	beq.n	8003140 <_printf_common+0xb4>
 8003172:	f109 0901 	add.w	r9, r9, #1
 8003176:	e7d8      	b.n	800312a <_printf_common+0x9e>

08003178 <_printf_i>:
 8003178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800317c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003180:	460c      	mov	r4, r1
 8003182:	7e09      	ldrb	r1, [r1, #24]
 8003184:	b085      	sub	sp, #20
 8003186:	296e      	cmp	r1, #110	; 0x6e
 8003188:	4617      	mov	r7, r2
 800318a:	4606      	mov	r6, r0
 800318c:	4698      	mov	r8, r3
 800318e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003190:	f000 80b3 	beq.w	80032fa <_printf_i+0x182>
 8003194:	d822      	bhi.n	80031dc <_printf_i+0x64>
 8003196:	2963      	cmp	r1, #99	; 0x63
 8003198:	d036      	beq.n	8003208 <_printf_i+0x90>
 800319a:	d80a      	bhi.n	80031b2 <_printf_i+0x3a>
 800319c:	2900      	cmp	r1, #0
 800319e:	f000 80b9 	beq.w	8003314 <_printf_i+0x19c>
 80031a2:	2958      	cmp	r1, #88	; 0x58
 80031a4:	f000 8083 	beq.w	80032ae <_printf_i+0x136>
 80031a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80031b0:	e032      	b.n	8003218 <_printf_i+0xa0>
 80031b2:	2964      	cmp	r1, #100	; 0x64
 80031b4:	d001      	beq.n	80031ba <_printf_i+0x42>
 80031b6:	2969      	cmp	r1, #105	; 0x69
 80031b8:	d1f6      	bne.n	80031a8 <_printf_i+0x30>
 80031ba:	6820      	ldr	r0, [r4, #0]
 80031bc:	6813      	ldr	r3, [r2, #0]
 80031be:	0605      	lsls	r5, r0, #24
 80031c0:	f103 0104 	add.w	r1, r3, #4
 80031c4:	d52a      	bpl.n	800321c <_printf_i+0xa4>
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6011      	str	r1, [r2, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	da03      	bge.n	80031d6 <_printf_i+0x5e>
 80031ce:	222d      	movs	r2, #45	; 0x2d
 80031d0:	425b      	negs	r3, r3
 80031d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80031d6:	486f      	ldr	r0, [pc, #444]	; (8003394 <_printf_i+0x21c>)
 80031d8:	220a      	movs	r2, #10
 80031da:	e039      	b.n	8003250 <_printf_i+0xd8>
 80031dc:	2973      	cmp	r1, #115	; 0x73
 80031de:	f000 809d 	beq.w	800331c <_printf_i+0x1a4>
 80031e2:	d808      	bhi.n	80031f6 <_printf_i+0x7e>
 80031e4:	296f      	cmp	r1, #111	; 0x6f
 80031e6:	d020      	beq.n	800322a <_printf_i+0xb2>
 80031e8:	2970      	cmp	r1, #112	; 0x70
 80031ea:	d1dd      	bne.n	80031a8 <_printf_i+0x30>
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	f043 0320 	orr.w	r3, r3, #32
 80031f2:	6023      	str	r3, [r4, #0]
 80031f4:	e003      	b.n	80031fe <_printf_i+0x86>
 80031f6:	2975      	cmp	r1, #117	; 0x75
 80031f8:	d017      	beq.n	800322a <_printf_i+0xb2>
 80031fa:	2978      	cmp	r1, #120	; 0x78
 80031fc:	d1d4      	bne.n	80031a8 <_printf_i+0x30>
 80031fe:	2378      	movs	r3, #120	; 0x78
 8003200:	4865      	ldr	r0, [pc, #404]	; (8003398 <_printf_i+0x220>)
 8003202:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003206:	e055      	b.n	80032b4 <_printf_i+0x13c>
 8003208:	6813      	ldr	r3, [r2, #0]
 800320a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800320e:	1d19      	adds	r1, r3, #4
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6011      	str	r1, [r2, #0]
 8003214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003218:	2301      	movs	r3, #1
 800321a:	e08c      	b.n	8003336 <_printf_i+0x1be>
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003222:	6011      	str	r1, [r2, #0]
 8003224:	bf18      	it	ne
 8003226:	b21b      	sxthne	r3, r3
 8003228:	e7cf      	b.n	80031ca <_printf_i+0x52>
 800322a:	6813      	ldr	r3, [r2, #0]
 800322c:	6825      	ldr	r5, [r4, #0]
 800322e:	1d18      	adds	r0, r3, #4
 8003230:	6010      	str	r0, [r2, #0]
 8003232:	0628      	lsls	r0, r5, #24
 8003234:	d501      	bpl.n	800323a <_printf_i+0xc2>
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	e002      	b.n	8003240 <_printf_i+0xc8>
 800323a:	0668      	lsls	r0, r5, #25
 800323c:	d5fb      	bpl.n	8003236 <_printf_i+0xbe>
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	296f      	cmp	r1, #111	; 0x6f
 8003242:	bf14      	ite	ne
 8003244:	220a      	movne	r2, #10
 8003246:	2208      	moveq	r2, #8
 8003248:	4852      	ldr	r0, [pc, #328]	; (8003394 <_printf_i+0x21c>)
 800324a:	2100      	movs	r1, #0
 800324c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003250:	6865      	ldr	r5, [r4, #4]
 8003252:	2d00      	cmp	r5, #0
 8003254:	60a5      	str	r5, [r4, #8]
 8003256:	f2c0 8095 	blt.w	8003384 <_printf_i+0x20c>
 800325a:	6821      	ldr	r1, [r4, #0]
 800325c:	f021 0104 	bic.w	r1, r1, #4
 8003260:	6021      	str	r1, [r4, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d13d      	bne.n	80032e2 <_printf_i+0x16a>
 8003266:	2d00      	cmp	r5, #0
 8003268:	f040 808e 	bne.w	8003388 <_printf_i+0x210>
 800326c:	4665      	mov	r5, ip
 800326e:	2a08      	cmp	r2, #8
 8003270:	d10b      	bne.n	800328a <_printf_i+0x112>
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	07db      	lsls	r3, r3, #31
 8003276:	d508      	bpl.n	800328a <_printf_i+0x112>
 8003278:	6923      	ldr	r3, [r4, #16]
 800327a:	6862      	ldr	r2, [r4, #4]
 800327c:	429a      	cmp	r2, r3
 800327e:	bfde      	ittt	le
 8003280:	2330      	movle	r3, #48	; 0x30
 8003282:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003286:	f105 35ff 	addle.w	r5, r5, #4294967295
 800328a:	ebac 0305 	sub.w	r3, ip, r5
 800328e:	6123      	str	r3, [r4, #16]
 8003290:	f8cd 8000 	str.w	r8, [sp]
 8003294:	463b      	mov	r3, r7
 8003296:	aa03      	add	r2, sp, #12
 8003298:	4621      	mov	r1, r4
 800329a:	4630      	mov	r0, r6
 800329c:	f7ff fef6 	bl	800308c <_printf_common>
 80032a0:	3001      	adds	r0, #1
 80032a2:	d14d      	bne.n	8003340 <_printf_i+0x1c8>
 80032a4:	f04f 30ff 	mov.w	r0, #4294967295
 80032a8:	b005      	add	sp, #20
 80032aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032ae:	4839      	ldr	r0, [pc, #228]	; (8003394 <_printf_i+0x21c>)
 80032b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80032b4:	6813      	ldr	r3, [r2, #0]
 80032b6:	6821      	ldr	r1, [r4, #0]
 80032b8:	1d1d      	adds	r5, r3, #4
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6015      	str	r5, [r2, #0]
 80032be:	060a      	lsls	r2, r1, #24
 80032c0:	d50b      	bpl.n	80032da <_printf_i+0x162>
 80032c2:	07ca      	lsls	r2, r1, #31
 80032c4:	bf44      	itt	mi
 80032c6:	f041 0120 	orrmi.w	r1, r1, #32
 80032ca:	6021      	strmi	r1, [r4, #0]
 80032cc:	b91b      	cbnz	r3, 80032d6 <_printf_i+0x15e>
 80032ce:	6822      	ldr	r2, [r4, #0]
 80032d0:	f022 0220 	bic.w	r2, r2, #32
 80032d4:	6022      	str	r2, [r4, #0]
 80032d6:	2210      	movs	r2, #16
 80032d8:	e7b7      	b.n	800324a <_printf_i+0xd2>
 80032da:	064d      	lsls	r5, r1, #25
 80032dc:	bf48      	it	mi
 80032de:	b29b      	uxthmi	r3, r3
 80032e0:	e7ef      	b.n	80032c2 <_printf_i+0x14a>
 80032e2:	4665      	mov	r5, ip
 80032e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80032e8:	fb02 3311 	mls	r3, r2, r1, r3
 80032ec:	5cc3      	ldrb	r3, [r0, r3]
 80032ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80032f2:	460b      	mov	r3, r1
 80032f4:	2900      	cmp	r1, #0
 80032f6:	d1f5      	bne.n	80032e4 <_printf_i+0x16c>
 80032f8:	e7b9      	b.n	800326e <_printf_i+0xf6>
 80032fa:	6813      	ldr	r3, [r2, #0]
 80032fc:	6825      	ldr	r5, [r4, #0]
 80032fe:	1d18      	adds	r0, r3, #4
 8003300:	6961      	ldr	r1, [r4, #20]
 8003302:	6010      	str	r0, [r2, #0]
 8003304:	0628      	lsls	r0, r5, #24
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	d501      	bpl.n	800330e <_printf_i+0x196>
 800330a:	6019      	str	r1, [r3, #0]
 800330c:	e002      	b.n	8003314 <_printf_i+0x19c>
 800330e:	066a      	lsls	r2, r5, #25
 8003310:	d5fb      	bpl.n	800330a <_printf_i+0x192>
 8003312:	8019      	strh	r1, [r3, #0]
 8003314:	2300      	movs	r3, #0
 8003316:	4665      	mov	r5, ip
 8003318:	6123      	str	r3, [r4, #16]
 800331a:	e7b9      	b.n	8003290 <_printf_i+0x118>
 800331c:	6813      	ldr	r3, [r2, #0]
 800331e:	1d19      	adds	r1, r3, #4
 8003320:	6011      	str	r1, [r2, #0]
 8003322:	681d      	ldr	r5, [r3, #0]
 8003324:	6862      	ldr	r2, [r4, #4]
 8003326:	2100      	movs	r1, #0
 8003328:	4628      	mov	r0, r5
 800332a:	f000 f837 	bl	800339c <memchr>
 800332e:	b108      	cbz	r0, 8003334 <_printf_i+0x1bc>
 8003330:	1b40      	subs	r0, r0, r5
 8003332:	6060      	str	r0, [r4, #4]
 8003334:	6863      	ldr	r3, [r4, #4]
 8003336:	6123      	str	r3, [r4, #16]
 8003338:	2300      	movs	r3, #0
 800333a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800333e:	e7a7      	b.n	8003290 <_printf_i+0x118>
 8003340:	6923      	ldr	r3, [r4, #16]
 8003342:	462a      	mov	r2, r5
 8003344:	4639      	mov	r1, r7
 8003346:	4630      	mov	r0, r6
 8003348:	47c0      	blx	r8
 800334a:	3001      	adds	r0, #1
 800334c:	d0aa      	beq.n	80032a4 <_printf_i+0x12c>
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	079b      	lsls	r3, r3, #30
 8003352:	d413      	bmi.n	800337c <_printf_i+0x204>
 8003354:	68e0      	ldr	r0, [r4, #12]
 8003356:	9b03      	ldr	r3, [sp, #12]
 8003358:	4298      	cmp	r0, r3
 800335a:	bfb8      	it	lt
 800335c:	4618      	movlt	r0, r3
 800335e:	e7a3      	b.n	80032a8 <_printf_i+0x130>
 8003360:	2301      	movs	r3, #1
 8003362:	464a      	mov	r2, r9
 8003364:	4639      	mov	r1, r7
 8003366:	4630      	mov	r0, r6
 8003368:	47c0      	blx	r8
 800336a:	3001      	adds	r0, #1
 800336c:	d09a      	beq.n	80032a4 <_printf_i+0x12c>
 800336e:	3501      	adds	r5, #1
 8003370:	68e3      	ldr	r3, [r4, #12]
 8003372:	9a03      	ldr	r2, [sp, #12]
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	42ab      	cmp	r3, r5
 8003378:	dcf2      	bgt.n	8003360 <_printf_i+0x1e8>
 800337a:	e7eb      	b.n	8003354 <_printf_i+0x1dc>
 800337c:	2500      	movs	r5, #0
 800337e:	f104 0919 	add.w	r9, r4, #25
 8003382:	e7f5      	b.n	8003370 <_printf_i+0x1f8>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1ac      	bne.n	80032e2 <_printf_i+0x16a>
 8003388:	7803      	ldrb	r3, [r0, #0]
 800338a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800338e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003392:	e76c      	b.n	800326e <_printf_i+0xf6>
 8003394:	08003639 	.word	0x08003639
 8003398:	0800364a 	.word	0x0800364a

0800339c <memchr>:
 800339c:	b510      	push	{r4, lr}
 800339e:	b2c9      	uxtb	r1, r1
 80033a0:	4402      	add	r2, r0
 80033a2:	4290      	cmp	r0, r2
 80033a4:	4603      	mov	r3, r0
 80033a6:	d101      	bne.n	80033ac <memchr+0x10>
 80033a8:	2300      	movs	r3, #0
 80033aa:	e003      	b.n	80033b4 <memchr+0x18>
 80033ac:	781c      	ldrb	r4, [r3, #0]
 80033ae:	3001      	adds	r0, #1
 80033b0:	428c      	cmp	r4, r1
 80033b2:	d1f6      	bne.n	80033a2 <memchr+0x6>
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd10      	pop	{r4, pc}

080033b8 <memcpy>:
 80033b8:	b510      	push	{r4, lr}
 80033ba:	1e43      	subs	r3, r0, #1
 80033bc:	440a      	add	r2, r1
 80033be:	4291      	cmp	r1, r2
 80033c0:	d100      	bne.n	80033c4 <memcpy+0xc>
 80033c2:	bd10      	pop	{r4, pc}
 80033c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033cc:	e7f7      	b.n	80033be <memcpy+0x6>

080033ce <memmove>:
 80033ce:	4288      	cmp	r0, r1
 80033d0:	b510      	push	{r4, lr}
 80033d2:	eb01 0302 	add.w	r3, r1, r2
 80033d6:	d807      	bhi.n	80033e8 <memmove+0x1a>
 80033d8:	1e42      	subs	r2, r0, #1
 80033da:	4299      	cmp	r1, r3
 80033dc:	d00a      	beq.n	80033f4 <memmove+0x26>
 80033de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033e2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80033e6:	e7f8      	b.n	80033da <memmove+0xc>
 80033e8:	4283      	cmp	r3, r0
 80033ea:	d9f5      	bls.n	80033d8 <memmove+0xa>
 80033ec:	1881      	adds	r1, r0, r2
 80033ee:	1ad2      	subs	r2, r2, r3
 80033f0:	42d3      	cmn	r3, r2
 80033f2:	d100      	bne.n	80033f6 <memmove+0x28>
 80033f4:	bd10      	pop	{r4, pc}
 80033f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033fa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80033fe:	e7f7      	b.n	80033f0 <memmove+0x22>

08003400 <_free_r>:
 8003400:	b538      	push	{r3, r4, r5, lr}
 8003402:	4605      	mov	r5, r0
 8003404:	2900      	cmp	r1, #0
 8003406:	d043      	beq.n	8003490 <_free_r+0x90>
 8003408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800340c:	1f0c      	subs	r4, r1, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	bfb8      	it	lt
 8003412:	18e4      	addlt	r4, r4, r3
 8003414:	f000 f8d0 	bl	80035b8 <__malloc_lock>
 8003418:	4a1e      	ldr	r2, [pc, #120]	; (8003494 <_free_r+0x94>)
 800341a:	6813      	ldr	r3, [r2, #0]
 800341c:	4610      	mov	r0, r2
 800341e:	b933      	cbnz	r3, 800342e <_free_r+0x2e>
 8003420:	6063      	str	r3, [r4, #4]
 8003422:	6014      	str	r4, [r2, #0]
 8003424:	4628      	mov	r0, r5
 8003426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800342a:	f000 b8c6 	b.w	80035ba <__malloc_unlock>
 800342e:	42a3      	cmp	r3, r4
 8003430:	d90b      	bls.n	800344a <_free_r+0x4a>
 8003432:	6821      	ldr	r1, [r4, #0]
 8003434:	1862      	adds	r2, r4, r1
 8003436:	4293      	cmp	r3, r2
 8003438:	bf01      	itttt	eq
 800343a:	681a      	ldreq	r2, [r3, #0]
 800343c:	685b      	ldreq	r3, [r3, #4]
 800343e:	1852      	addeq	r2, r2, r1
 8003440:	6022      	streq	r2, [r4, #0]
 8003442:	6063      	str	r3, [r4, #4]
 8003444:	6004      	str	r4, [r0, #0]
 8003446:	e7ed      	b.n	8003424 <_free_r+0x24>
 8003448:	4613      	mov	r3, r2
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	b10a      	cbz	r2, 8003452 <_free_r+0x52>
 800344e:	42a2      	cmp	r2, r4
 8003450:	d9fa      	bls.n	8003448 <_free_r+0x48>
 8003452:	6819      	ldr	r1, [r3, #0]
 8003454:	1858      	adds	r0, r3, r1
 8003456:	42a0      	cmp	r0, r4
 8003458:	d10b      	bne.n	8003472 <_free_r+0x72>
 800345a:	6820      	ldr	r0, [r4, #0]
 800345c:	4401      	add	r1, r0
 800345e:	1858      	adds	r0, r3, r1
 8003460:	4282      	cmp	r2, r0
 8003462:	6019      	str	r1, [r3, #0]
 8003464:	d1de      	bne.n	8003424 <_free_r+0x24>
 8003466:	6810      	ldr	r0, [r2, #0]
 8003468:	6852      	ldr	r2, [r2, #4]
 800346a:	4401      	add	r1, r0
 800346c:	6019      	str	r1, [r3, #0]
 800346e:	605a      	str	r2, [r3, #4]
 8003470:	e7d8      	b.n	8003424 <_free_r+0x24>
 8003472:	d902      	bls.n	800347a <_free_r+0x7a>
 8003474:	230c      	movs	r3, #12
 8003476:	602b      	str	r3, [r5, #0]
 8003478:	e7d4      	b.n	8003424 <_free_r+0x24>
 800347a:	6820      	ldr	r0, [r4, #0]
 800347c:	1821      	adds	r1, r4, r0
 800347e:	428a      	cmp	r2, r1
 8003480:	bf01      	itttt	eq
 8003482:	6811      	ldreq	r1, [r2, #0]
 8003484:	6852      	ldreq	r2, [r2, #4]
 8003486:	1809      	addeq	r1, r1, r0
 8003488:	6021      	streq	r1, [r4, #0]
 800348a:	6062      	str	r2, [r4, #4]
 800348c:	605c      	str	r4, [r3, #4]
 800348e:	e7c9      	b.n	8003424 <_free_r+0x24>
 8003490:	bd38      	pop	{r3, r4, r5, pc}
 8003492:	bf00      	nop
 8003494:	20000168 	.word	0x20000168

08003498 <_malloc_r>:
 8003498:	b570      	push	{r4, r5, r6, lr}
 800349a:	1ccd      	adds	r5, r1, #3
 800349c:	f025 0503 	bic.w	r5, r5, #3
 80034a0:	3508      	adds	r5, #8
 80034a2:	2d0c      	cmp	r5, #12
 80034a4:	bf38      	it	cc
 80034a6:	250c      	movcc	r5, #12
 80034a8:	2d00      	cmp	r5, #0
 80034aa:	4606      	mov	r6, r0
 80034ac:	db01      	blt.n	80034b2 <_malloc_r+0x1a>
 80034ae:	42a9      	cmp	r1, r5
 80034b0:	d903      	bls.n	80034ba <_malloc_r+0x22>
 80034b2:	230c      	movs	r3, #12
 80034b4:	6033      	str	r3, [r6, #0]
 80034b6:	2000      	movs	r0, #0
 80034b8:	bd70      	pop	{r4, r5, r6, pc}
 80034ba:	f000 f87d 	bl	80035b8 <__malloc_lock>
 80034be:	4a21      	ldr	r2, [pc, #132]	; (8003544 <_malloc_r+0xac>)
 80034c0:	6814      	ldr	r4, [r2, #0]
 80034c2:	4621      	mov	r1, r4
 80034c4:	b991      	cbnz	r1, 80034ec <_malloc_r+0x54>
 80034c6:	4c20      	ldr	r4, [pc, #128]	; (8003548 <_malloc_r+0xb0>)
 80034c8:	6823      	ldr	r3, [r4, #0]
 80034ca:	b91b      	cbnz	r3, 80034d4 <_malloc_r+0x3c>
 80034cc:	4630      	mov	r0, r6
 80034ce:	f000 f863 	bl	8003598 <_sbrk_r>
 80034d2:	6020      	str	r0, [r4, #0]
 80034d4:	4629      	mov	r1, r5
 80034d6:	4630      	mov	r0, r6
 80034d8:	f000 f85e 	bl	8003598 <_sbrk_r>
 80034dc:	1c43      	adds	r3, r0, #1
 80034de:	d124      	bne.n	800352a <_malloc_r+0x92>
 80034e0:	230c      	movs	r3, #12
 80034e2:	4630      	mov	r0, r6
 80034e4:	6033      	str	r3, [r6, #0]
 80034e6:	f000 f868 	bl	80035ba <__malloc_unlock>
 80034ea:	e7e4      	b.n	80034b6 <_malloc_r+0x1e>
 80034ec:	680b      	ldr	r3, [r1, #0]
 80034ee:	1b5b      	subs	r3, r3, r5
 80034f0:	d418      	bmi.n	8003524 <_malloc_r+0x8c>
 80034f2:	2b0b      	cmp	r3, #11
 80034f4:	d90f      	bls.n	8003516 <_malloc_r+0x7e>
 80034f6:	600b      	str	r3, [r1, #0]
 80034f8:	18cc      	adds	r4, r1, r3
 80034fa:	50cd      	str	r5, [r1, r3]
 80034fc:	4630      	mov	r0, r6
 80034fe:	f000 f85c 	bl	80035ba <__malloc_unlock>
 8003502:	f104 000b 	add.w	r0, r4, #11
 8003506:	1d23      	adds	r3, r4, #4
 8003508:	f020 0007 	bic.w	r0, r0, #7
 800350c:	1ac3      	subs	r3, r0, r3
 800350e:	d0d3      	beq.n	80034b8 <_malloc_r+0x20>
 8003510:	425a      	negs	r2, r3
 8003512:	50e2      	str	r2, [r4, r3]
 8003514:	e7d0      	b.n	80034b8 <_malloc_r+0x20>
 8003516:	684b      	ldr	r3, [r1, #4]
 8003518:	428c      	cmp	r4, r1
 800351a:	bf16      	itet	ne
 800351c:	6063      	strne	r3, [r4, #4]
 800351e:	6013      	streq	r3, [r2, #0]
 8003520:	460c      	movne	r4, r1
 8003522:	e7eb      	b.n	80034fc <_malloc_r+0x64>
 8003524:	460c      	mov	r4, r1
 8003526:	6849      	ldr	r1, [r1, #4]
 8003528:	e7cc      	b.n	80034c4 <_malloc_r+0x2c>
 800352a:	1cc4      	adds	r4, r0, #3
 800352c:	f024 0403 	bic.w	r4, r4, #3
 8003530:	42a0      	cmp	r0, r4
 8003532:	d005      	beq.n	8003540 <_malloc_r+0xa8>
 8003534:	1a21      	subs	r1, r4, r0
 8003536:	4630      	mov	r0, r6
 8003538:	f000 f82e 	bl	8003598 <_sbrk_r>
 800353c:	3001      	adds	r0, #1
 800353e:	d0cf      	beq.n	80034e0 <_malloc_r+0x48>
 8003540:	6025      	str	r5, [r4, #0]
 8003542:	e7db      	b.n	80034fc <_malloc_r+0x64>
 8003544:	20000168 	.word	0x20000168
 8003548:	2000016c 	.word	0x2000016c

0800354c <_realloc_r>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	4607      	mov	r7, r0
 8003550:	4614      	mov	r4, r2
 8003552:	460e      	mov	r6, r1
 8003554:	b921      	cbnz	r1, 8003560 <_realloc_r+0x14>
 8003556:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800355a:	4611      	mov	r1, r2
 800355c:	f7ff bf9c 	b.w	8003498 <_malloc_r>
 8003560:	b922      	cbnz	r2, 800356c <_realloc_r+0x20>
 8003562:	f7ff ff4d 	bl	8003400 <_free_r>
 8003566:	4625      	mov	r5, r4
 8003568:	4628      	mov	r0, r5
 800356a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800356c:	f000 f826 	bl	80035bc <_malloc_usable_size_r>
 8003570:	42a0      	cmp	r0, r4
 8003572:	d20f      	bcs.n	8003594 <_realloc_r+0x48>
 8003574:	4621      	mov	r1, r4
 8003576:	4638      	mov	r0, r7
 8003578:	f7ff ff8e 	bl	8003498 <_malloc_r>
 800357c:	4605      	mov	r5, r0
 800357e:	2800      	cmp	r0, #0
 8003580:	d0f2      	beq.n	8003568 <_realloc_r+0x1c>
 8003582:	4631      	mov	r1, r6
 8003584:	4622      	mov	r2, r4
 8003586:	f7ff ff17 	bl	80033b8 <memcpy>
 800358a:	4631      	mov	r1, r6
 800358c:	4638      	mov	r0, r7
 800358e:	f7ff ff37 	bl	8003400 <_free_r>
 8003592:	e7e9      	b.n	8003568 <_realloc_r+0x1c>
 8003594:	4635      	mov	r5, r6
 8003596:	e7e7      	b.n	8003568 <_realloc_r+0x1c>

08003598 <_sbrk_r>:
 8003598:	b538      	push	{r3, r4, r5, lr}
 800359a:	2300      	movs	r3, #0
 800359c:	4c05      	ldr	r4, [pc, #20]	; (80035b4 <_sbrk_r+0x1c>)
 800359e:	4605      	mov	r5, r0
 80035a0:	4608      	mov	r0, r1
 80035a2:	6023      	str	r3, [r4, #0]
 80035a4:	f7fd f94e 	bl	8000844 <_sbrk>
 80035a8:	1c43      	adds	r3, r0, #1
 80035aa:	d102      	bne.n	80035b2 <_sbrk_r+0x1a>
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	b103      	cbz	r3, 80035b2 <_sbrk_r+0x1a>
 80035b0:	602b      	str	r3, [r5, #0]
 80035b2:	bd38      	pop	{r3, r4, r5, pc}
 80035b4:	20000254 	.word	0x20000254

080035b8 <__malloc_lock>:
 80035b8:	4770      	bx	lr

080035ba <__malloc_unlock>:
 80035ba:	4770      	bx	lr

080035bc <_malloc_usable_size_r>:
 80035bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035c0:	1f18      	subs	r0, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	bfbc      	itt	lt
 80035c6:	580b      	ldrlt	r3, [r1, r0]
 80035c8:	18c0      	addlt	r0, r0, r3
 80035ca:	4770      	bx	lr

080035cc <_init>:
 80035cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ce:	bf00      	nop
 80035d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d2:	bc08      	pop	{r3}
 80035d4:	469e      	mov	lr, r3
 80035d6:	4770      	bx	lr

080035d8 <_fini>:
 80035d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035da:	bf00      	nop
 80035dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035de:	bc08      	pop	{r3}
 80035e0:	469e      	mov	lr, r3
 80035e2:	4770      	bx	lr
